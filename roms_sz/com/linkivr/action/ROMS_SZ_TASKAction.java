package com.linkivr.action;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jsx3.chart.LogarithmicAxis;

import net.sf.ezmorph.bean.MorphDynaBean;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.lang.NumberUtils;
import org.apache.struts2.ServletActionContext;
import org.apache.struts2.components.ElseIf;
import org.docx4j.Docx4J;
import org.docx4j.model.datastorage.XPathEnhancerParser.main_return;
import org.docx4j.openpackaging.packages.WordprocessingMLPackage;
import org.hibernate.annotations.ForceDiscriminator;
import org.springframework.stereotype.Component;

import sun.misc.BASE64Encoder;
import util.JsonUtil;
import util.TestCreateZip;

import com.linkivr.model.ROMS201_TASK;
import com.linkivr.model.ROMS_SZ_DEVICE;
import com.linkivr.model.ROMS_SZ_DOC;
import com.linkivr.model.ROMS_SZ_STAFF;
import com.linkivr.model.ROMS_SZ_TASK;
import com.linkivr.model.ROMS_SZ_TASKAUTH;
import com.linkivr.model.ROMS_SZ_TASKDEVICE;
import com.linkivr.model.ROMS_SZ_TASKSTAFF;
import com.linkivr.service.ROMS_SZ_DOCService;
import com.linkivr.service.ROMS_SZ_STAFFService;
import com.linkivr.service.ROMS_SZ_TASKAUTHService;
import com.linkivr.service.ROMS_SZ_TASKDEVICEService;
import com.linkivr.service.ROMS_SZ_TASKSTAFFService;
import com.linkivr.service.ROMS_SZ_TASKService;
import com.linkivr.template.ROMS_SZ_DEVICEDATA;
import com.linkivr.template.ROMS_SZ_POINTDATA;
import com.linkivr.util.AlgorithmUtil;
import com.linkivr.util.CalculateUtil;
import com.linkivr.util.RunCommand;
import com.linkivr.util.ToDocxWord;
import com.opensymphony.xwork2.ActionSupport;
import com.sun.xml.bind.v2.model.core.ID;

import freemarker.template.Configuration;
import freemarker.template.Template;

@Component("romssztaskAction")
public class ROMS_SZ_TASKAction extends ActionSupport {

	private static final long serialVersionUID = 5255480732540713187L;
	private static final String String = null;
	private String jsonString;
	private String white = "/staffImg/white.png";
	//Configuration用于读取ftl文件
    public static Configuration configuration = new Configuration();
	
	private ROMS_SZ_TASKService romssztaskService;
	private ROMS_SZ_TASKAUTHService romssztaskauthService;
	private ROMS_SZ_TASKDEVICEService romssztaskdeviceService;
	private ROMS_SZ_TASKSTAFFService romssztasktaffService;
	private ROMS_SZ_STAFFService romsszstaffService;
	private ROMS_SZ_DOCService romsszdocService;
	
	public String getJsonString() {
		return jsonString;
	}
	public void setJsonString(String jsonString) {
		this.jsonString = jsonString;
	}
	public ROMS_SZ_TASKService getRomssztaskService() {
		return romssztaskService;
	}
	@Resource
	public void setRomssztaskService(ROMS_SZ_TASKService romssztaskService) {
		this.romssztaskService = romssztaskService;
	}
	
	public ROMS_SZ_TASKAUTHService getRomssztaskauthService() {
		return romssztaskauthService;
	}
	@Resource
	public void setRomssztaskauthService(
			ROMS_SZ_TASKAUTHService romssztaskauthService) {
		this.romssztaskauthService = romssztaskauthService;
	}
	
	public ROMS_SZ_TASKDEVICEService getRomssztaskdeviceService() {
		return romssztaskdeviceService;
	}
	@Resource
	public void setRomssztaskdeviceService(
			ROMS_SZ_TASKDEVICEService romssztaskdeviceService) {
		this.romssztaskdeviceService = romssztaskdeviceService;
	}
	
	public ROMS_SZ_STAFFService getRomsszstaffService() {
		return romsszstaffService;
	}
	@Resource
	public void setRomsszstaffService(ROMS_SZ_STAFFService romsszstaffService) {
		this.romsszstaffService = romsszstaffService;
	}

	public ROMS_SZ_TASKSTAFFService getRomssztasktaffService() {
		return romssztasktaffService;
	}
	@Resource
	public void setRomssztasktaffService(
			ROMS_SZ_TASKSTAFFService romssztasktaffService) {
		this.romssztasktaffService = romssztasktaffService;
	}

	public ROMS_SZ_DOCService getRomsszdocService() {
		return romsszdocService;
	}
	@Resource
	public void setRomsszdocService(ROMS_SZ_DOCService romsszdocService) {
		this.romsszdocService = romsszdocService;
	}

	private List<File> file;// 对应前面的name
	
	// 使用列表保存多个上传文件的文件名
	private List<String> fileFileName;
	// 使用列表保存多个上传文件的MIME类型
	private List<String> fileContentType;
	
	private static String uploadDir = "roms_sz";
	
	
	public String getUploadDir() {
		return uploadDir;
	}
	@SuppressWarnings("static-access")
	public void setUploadDir(String uploadDir) {
		this.uploadDir = uploadDir;
	}
	public List<File> getFile() {
		return file;
	}
	public void setFile(List<File> file) {
		this.file = file;
	}
	public List<String> getFileFileName() {
		return fileFileName;
	}
	public void setFileFileName(List<String> fileFileName) {
		this.fileFileName = fileFileName;
	}
	public List<String> getFileContentType() {
		return fileContentType;
	}
	public void setFileContentType(List<String> fileContentType) {
		this.fileContentType = fileContentType;
	}
	
	/**
	 * 安卓版平板上传签名照片和点位图接口
	 * 应用场景：安卓版平板上传签名照片和点位图接口
	 * @throws Exception 
	 */
	public String app_upload_image() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_upload_image函数");
		HttpServletResponse response = ServletActionContext.getResponse();
		HttpServletRequest request = ServletActionContext.getRequest();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		try {
			out = response.getWriter();
		} catch (IOException e2) {
			e2.printStackTrace();
		}
		
		String taskid = request.getParameter("taskid");
		logger.info("任务id="+taskid);
		int type = Integer.parseInt(request.getParameter("type"));
		logger.info("类型（0是点位图，1是受检单位签名照,2是确认人签名照）="+type);
//		int type = 0;
		
		//查询任务信息
		ROMS_SZ_TASK task = romssztaskService.query(taskid);
		if (task == null) {
			jsonString="{success:false,msg:'没有该任务'}";
		    out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
		}
		String where = " and taskId='"+taskid+"' and templateId is not null";
		ROMS_SZ_TASKAUTH taskauth = romssztaskauthService.queryWhere(where);
		if (taskauth == null) {
			jsonString="{success:false,msg:'该任务没有绑定模板'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		
		String serverfile = null; // 服务器存储文件的路径
		String userfile = null;// 仅文件名 用于客户端显示
		BufferedOutputStream bos = null;
		BufferedInputStream bis = null;
		String reInfo = "";// 上传成功返回的东西
		setUploadDir("roms_sz");
		@SuppressWarnings("unused")
		String totalsize = "0k";
		logger.info("file="+file);
		
		if (file.size() == 0) {

			String msg = "{success:false,msg:'上传错误,请选择上传文件'}";
			try {
				response.getWriter().write(msg);
				out.flush();
				out.close();
				return null;
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		for (int i = 0; i < file.size(); i++) {
			userfile = fileFileName.get(i);
			System.out.println("userfile====" + userfile);
			 if (type == 0) {
					//修改点位图照片名字
				 userfile = "点位图.jpg";
				}else if (type == 1) {
					//修改受检单位签名照名字
					userfile = "受检单位签名照.jpg";
				}else{
					//修改确认人签名照名字
					userfile = "确认人签名照.jpg";
				}
			int index = userfile.lastIndexOf('.');
			logger.info("index="+index);
			String path = new String((ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()).getBytes("UTF-8"), "UTF-8");
			
			logger.info("服务器路径=" + path);

			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(userfile.equals(name)){
	    			s[j].delete();
	    		}
	  
	    	} 
			if (index != -1)
				serverfile = userfile.substring(0, index) + userfile.substring(index);// 生成新文件名
			else
				serverfile = userfile;
			reInfo += userfile;
			logger.info("222222"+userfile);
			bos = null;
			bis = null;
			try {
				FileInputStream fis = new FileInputStream(file.get(i));
				bis = new BufferedInputStream(fis);
				System.out.println("文件size:"
						+ String.valueOf(fis.available() / 1000) + "k");
				totalsize = String.valueOf(fis.available() / 1000) + "k";
			
				FileOutputStream fos = new FileOutputStream(new File(dir,
						serverfile));

				serverfile = path + "//" + serverfile;
				
				bos = new BufferedOutputStream(fos);
				byte[] buf = new byte[4096];
				int len = -1;
				while ((len = bis.read(buf)) != -1) {
					Thread.sleep(10);
					bos.write(buf, 0, len);
				}
				
				
				String url="/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+userfile;
				 if (type == 0) {
					//更新任务存放点位图字段
					task.setPointUrl(url);
					logger.info("点位图路径："+url);
				}else if (type == 1) {
					//更新任务存放受检单位签名照字段
					task.setUnitUrl(url);
					logger.info("受检单位路径："+url);
				}else{
					//更新任务存放确认人签名照字段
					task.setConfirmUrl(url);
					logger.info("确认人路径："+url);
				}
				
				romssztaskService.update(task);
			} catch (Exception e) {
				try {
					String msg = "{errcode:0,success:false,msg:'上传错误'}";
					response.getWriter().write(msg);
					//out.write("fail");
					out.flush();
					out.close();
					return null;
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			} finally {
				// //////////////////////善后
				try {
					if (null != bis)
						bis.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				try {
					if (null != bos)
						bos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		
		jsonString="{success:true,msg:'上传成功'}";
	    out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 安卓版平板上传现场照片接口
	 * 应用场景：安卓版平板上传现场照片接口
	 * @throws Exception 
	 */
	public String app_upload_sceneimage() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_upload_sceneimage函数");
		HttpServletResponse response = ServletActionContext.getResponse();
		HttpServletRequest request = ServletActionContext.getRequest();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		try {
			out = response.getWriter();
		} catch (IOException e2) {
			e2.printStackTrace();
		}
		
		String taskid = request.getParameter("taskid");
		logger.info("任务id="+taskid);
		
		//查询任务信息
		ROMS_SZ_TASK task = romssztaskService.query(taskid);
		if (task == null) {
			jsonString="{success:false,msg:'没有该任务'}";
		    out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
		}
		
		String where = " and taskId='"+taskid+"' and templateId is not null";
		ROMS_SZ_TASKAUTH taskauth = romssztaskauthService.queryWhere(where);
		if (taskauth == null) {
			jsonString="{success:false,msg:'该任务没有绑定模板'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		
		String serverfile = null; // 服务器存储文件的路径
		String userfile = null;// 仅文件名 用于客户端显示
		BufferedOutputStream bos = null;
		BufferedInputStream bis = null;
		String reInfo = "";// 上传成功返回的东西
		setUploadDir("roms_sz");
		@SuppressWarnings("unused")
		String totalsize = "0k";
		logger.info("file="+file);
		
		if (file.size() == 0) {

			String msg = "{success:false,msg:'上传错误,请选择上传文件'}";
			out.write(msg);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
//			try {
//				response.getWriter().write(msg);
//				out.flush();
//				out.close();
//				return null;
//			} catch (IOException e) {
//				e.printStackTrace();
//			}
		}
		
		for (int i = 0; i < file.size(); i++) {
			userfile = fileFileName.get(i);
			System.out.println("userfile====" + userfile);
			
//			userfile = "现场照片.jpg";
			
			int index = userfile.lastIndexOf('.');
			logger.info("index="+index);
			String path = new String((ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/imager").getBytes("UTF-8"), "UTF-8");
			logger.info("服务器路径=" + path);

			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(userfile.equals(name)){
	    			s[j].delete();
	    		}
	  
	    	} 
			if (index != -1)
				serverfile = userfile.substring(0, index) + userfile.substring(index);// 生成新文件名
			else
				serverfile = userfile;
			reInfo += userfile;
			logger.info("222222"+userfile);
			bos = null;
			bis = null;
			try {
				FileInputStream fis = new FileInputStream(file.get(i));
				bis = new BufferedInputStream(fis);
				System.out.println("文件size:"
						+ String.valueOf(fis.available() / 1000) + "k");
				totalsize = String.valueOf(fis.available() / 1000) + "k";
			
				FileOutputStream fos = new FileOutputStream(new File(dir,
						serverfile));

				serverfile = path + "//" + serverfile;
				
				bos = new BufferedOutputStream(fos);
				byte[] buf = new byte[4096];
				int len = -1;
				while ((len = bis.read(buf)) != -1) {
					Thread.sleep(10);
					bos.write(buf, 0, len);
				}
				
				String url="/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/imager/";
				
				//更新任务存放现场照片字段
				task.setPhotoUrl(url);
				romssztaskService.update(task);
			} catch (Exception e) {
				String msg = "{errcode:0,success:false,msg:'上传现场照片错误'}";
				out.write(msg);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
//				try {
//					String msg = "{errcode:0,success:false,msg:'上传现场照片错误'}";
//					response.getWriter().write(msg);
//					//out.write("fail");
//					out.flush();
//					out.close();
//					return null;
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
			} finally {
				////////////////////////善后
				try {
					if (null != bis)
						bis.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
				try {
					if (null != bos)
						bos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		
		jsonString="{success:true,msg:'上传现场照片成功'}";
	    out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	//通过流的方式根据地址读取图片
	public static String getImageStr(String imgFile) {
	       InputStream in = null;
	       byte[] data = null;
	       try {
	           in = new FileInputStream(imgFile);
	           data = new byte[in.available()];
	           in.read(data);
	           in.close();
	       } catch (Exception e) {
	           e.printStackTrace();
	       }
	       BASE64Encoder encoder = new BASE64Encoder();
	       return encoder.encode(data);
	   }
	
	//去掉空格回车等字符
	 public static String formatString(String s){
	        String s1=null;
	        if (s!=null) {
//	            Pattern p = Pattern.compile("\\s*|\t|\r|\n");
	        	Pattern p = Pattern.compile("\r|\n");
	            Matcher m = p.matcher(s);
	            s1 = m.replaceAll("");
	        }
	        return s1;
	    }
	 
	/**
	 * docx转pdf
	 * @param cmdType
	 * @return
	 * @throws IOException
	 */
	public int cmdRun(String cmdType) throws IOException{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		
	
			logger.info("cmd="+cmdType);
			//System.out.println(cmdType);
			String[] cmdArray = {"sh", "-c", cmdType}; 	
			Map<String,String> returnMap = RunCommand.run(cmdArray);
			String flag = returnMap.get("exitVal");
			String errStr = returnMap.get("errStr");
			String resultStr = returnMap.get("outputStr");
			System.out.println("errStr--->"+errStr);
			System.out.println("resultStr--->"+resultStr);
			
			String resultStr1 = resultStr.replaceAll("\n", "<br/>");
			String resultStr2 = resultStr1.replaceAll("null", "");
			logger.info("result="+resultStr2);
			//if(errStr==null||errStr.equals("null"))
			//	errStr = "";
			String result;
			int ret = 1;
			if (flag.equals("0"))
			{
				ret = 1;
				result="{success:true,msg:'命令执行成功！<br>',err:'"+errStr+"',result:'"+resultStr2+"'}";
			}
			else
			{
				ret = 0;
				result="{success:true,msg:'命令执行失败！<br>',err:'"+errStr+"',result:'"+resultStr2+"'}";				
			}			
			logger.info("result="+result);
	
			return ret;
	}

	/**
	 * 打包任务文件夹
	 * @return
	 * @throws Exception 
	 */
	public String packTaskZip() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("packTaskZip()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setHeader("Access-Control-Allow-Origin", "*");
		
		PrintWriter out = response.getWriter();
		
		String url = "";
		try {
			String taskId = request.getParameter("taskId");
			logger.info("任务id="+taskId);
			
			if (taskId == null) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			String where = " and taskId='"+taskId+"' and templateId is not null";
			ROMS_SZ_TASKAUTH taskauth = romssztaskauthService.queryWhere(where);
			if (taskauth == null) {
				jsonString="{success:false,msg:'该任务没有绑定模板'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			int taskNum = task.getTaskNum();
			String zipName = task.getProjectNum();
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+taskNum;
			System.out.println("服务器路径=" + path);
			
			String zipPath = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum();
			System.out.println("zip压缩文件输出路径=" + zipPath);
			
			File f2 = new File(zipPath);
			File s2[] = f2.listFiles();
			for(int j=0;j<s2.length;j++) {
				String name1=s2[j].getName();
				if((zipName+".zip").equals(name1)){
					s2[j].delete();
				}
			}
			
			//获取项目文件夹去打包(压缩文件夹下的文件和文件夹)
			TestCreateZip zc = new TestCreateZip();
	    	Boolean createZip = zc.createZip(path,zipPath+"/"+zipName+".zip");
	    	if (!createZip) {
	    		jsonString="{'success':false,'msg':'打包失败'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
	    	
	    	//获取web.xml配置的一个默认地址
			String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
			url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+zipName+".zip";
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'打包失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'打包成功','url':'"+url+"'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 更新任务是否开始工作
	 * @return
	 * @throws Exception 
	 */
	public String app_updateIsDone() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_updateIsDone()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String taskId = request.getParameter("taskId");
			logger.info("任务id="+taskId);
			
			if (taskId == null) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			task.setIsDone(1);
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'更新失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'更新成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 平板上传测点和数据接口
	 * @return
	 * @throws Exception 
	 */
	public String app_add_data() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_add_data()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8");
			String taskId = request.getParameter("taskId");
			logger.info("json="+json);
			logger.info("taskId="+taskId);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			task.setData(json);
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 生成一个任务对应一个报告接口(放射)
	 * @return
	 * @throws Exception 
	 */
	public String report_Generate() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_Generate()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		response.setHeader("Access-Control-Allow-Origin", "*");
		PrintWriter out = response.getWriter();
		try {
			String json = request.getParameter("data");
			logger.info("json="+json);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{success:false,msg:'没有数据上传'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String taskId = (String) morphDynaBean.get("taskId");
			logger.info("任务id="+taskId);
//			String docNum = (String) morphDynaBean.get("docNum");
//			logger.info("报告编号="+docNum);
			String docTime = (String) morphDynaBean.get("docTime");
			logger.info("报告时间="+docTime);
//			String taskId = "30755612-8b1f-4335-9051-e4c84595805c";
//			String docNum = "12341234";
//			String docTime = "2017-11-28 15:30:35";
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{success:false,msg:'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			String where = " and taskId='"+taskId+"' and templateId is not null";
			ROMS_SZ_TASKAUTH taskauth = romssztaskauthService.queryWhere(where);
			if (taskauth == null) {
				jsonString="{success:false,msg:'该任务没有绑定模板'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			
			String docUrl = "";
			String docHeadUrl = "";
			//通过任务模板来生成不同的报告
			
			String docNum = task.getProjectNum();
			String name = taskauth.getDeviceType().getName();//类型
			String num = taskauth.getTemplate().getNum();//模板编号
			int type = taskauth.getDeviceType().getDeviceMain().getType();//1是医用放射(防护)，2是工业放射，3是环境卫生，4是公共卫生,5是医用放射(性能)
			
			//1是医用放射(防护),5是医用放射(性能)
			if (type == 1 || type == 5) {
				if (name.equals("本底")) {
					if (num.equals("372")) {
						docUrl = this.report_fs_bd_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_bd_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}
					
				}else if (name.equals("牙片机")) {
					if (num.equals("366")) {
						docUrl = this.report_fs_ykj_fh_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_ykj_fh_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}else if (num.equals("421")) {
						docUrl = this.report_fs_ykj_xn_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_ykj_xn_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}
				}else if(name.equals("口腔CT")){
					if (num.equals("421")) {
						docUrl = this.report_fs_kqct_xn_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("DR摄影")) {
					if (num.equals("369")) {
						docUrl = this.report_fs_syj_fh_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_syj_fh_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}else if (num.equals("418")) {
						docUrl = this.report_fs_dr_xn_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_dr_xn_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}
					
				}else if (name.equals("CR")) {
					if (num.equals("374")) {
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("透视机")) {
					if (num.equals("374")) {
						docUrl = this.report_fs_tsj_fh_docx(taskId, docNum, taskauth);
						docHeadUrl = report_fs_tsj_fh_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}else if (num.equals("422")) {
						docUrl = this.report_fs_ts_xn_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_ts_xn_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}
					
				}else if (name.equals("体检车")) {
					if (num.equals("367")) {
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("手术室")) {
					if (num.equals("368")) {
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("乳腺机")) {
					if (num.equals("374")) {
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("CT")) {
					if (num.equals("374")) {
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}else{
						docUrl = this.report_fs_ctxn_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("DSA")) {
					if (num.equals("370")) {
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}else{
						
					}
					
				}else if (name.equals("医用直线加速器")) {
					if (num.equals("398")) {
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}else{
						
					}
					
				}else if (name.equals("后装治疗机")) {
					if (num.equals("394")) {
						docUrl = this.report_fs_hzjxn_docx(taskId,docNum,taskauth);
					}else{
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("粒子植入设备")) {
					if (num.equals("394") || num.equals("386")) {
						docUrl = this.report_fs_hzjxn_docx(taskId,docNum,taskauth);
					}else{
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("模拟定位机")) {
					if (num.equals("374")) {
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}else{
						
					}
					
				}else if (name.equals("γ刀")) {
					if (num.equals("393")) {
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}else if (num.equals("392")) {
						docUrl = this.report_fs_ydxn_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("SPECT")) {
					if (num.equals("373")) {
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}else if (num.equals("389")) {
						docUrl = this.report_fs_spectxn_docx(taskId, docNum, taskauth);
					}
					
				}else if (name.equals("PET")) {
					if (num.equals("373")) {
						docUrl = this.report_fs_yysbfh_docx(taskId,docNum,taskauth);
					}else if (num.equals("387")) {
						docUrl = this.report_fs_petxn_docx(taskId, docNum, taskauth);
					}
					
				}else if (name.equals("乳腺DR")) {
					if (num.equals("374")) {
						docUrl = this.report_fs_rxdr_fh_docx(taskId, docNum, taskauth);
						docHeadUrl = report_fs_rxdr_fh_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}else if (num.equals("424")) {
						docUrl = this.report_fs_rxdr_xn_docx(taskId,docNum,taskauth); 
						docHeadUrl = report_fs_rxdr_xn_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}
				}else if (name.equals("全景机")) {
					if (num.equals("3661")) {
						docUrl = this.report_fs_qjj_fh_docx(taskId, docNum, taskauth);
						docHeadUrl = report_fs_qjj_fh_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}else if (num.equals("421")) {
//						docUrl = this.report_fs_ykj_xn_docx(taskId,docNum,taskauth);
						docUrl = this.report_fs_ykqjj_xn_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_ykj_xn_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}
				}else if (name.equals("屏片摄影")) {
					if (num.equals("419")) {
						docUrl = this.report_fs_pp_xn_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_pp_xn_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}else if (num.equals("369")) {
						docUrl = this.report_fs_syj_fh_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_syj_fh_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}
				}else if (name.equals("乳腺屏片")) {
					if (num.equals("451")) {
						docUrl = this.report_fs_rxpp_xn_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_rxpp_xn_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}else if (num.equals("374")) {
						docUrl = this.report_fs_rxdr_fh_docx(taskId, docNum, taskauth);
						docHeadUrl = report_fs_rxdr_fh_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}
				}
				
				
				//2是工业放射
			}else if (type == 2) {
				if (name.equals("X射线衍射仪和荧光分析仪")) {
					if (num.equals("375")) {
						docUrl = this.report_fs_ygfxy_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("含密封源仪表（不含中子）")) {
					if (num.equals("3721")) {
//						docUrl = this.report_fs_fsy_docx(taskId,docNum,taskauth);
						docUrl = this.report_fs_mfyy_fh_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_mfyy_fh_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}
					
				}else if (name.equals("安检机")) {
					if (num.equals("375")) {
//						docUrl = this.report_fs_ygfxy_docx(taskId,docNum,taskauth);
						docUrl = this.report_fs_ajj_fh_docx(taskId,docNum,taskauth);
						docHeadUrl = report_fs_ajj_fh_head_docx(taskId,docNum,sdf.parse(docTime),taskauth);
					}
					
				}else if (name.equals("货包")) {
					if (num.equals("376") || num.equals("377") || num.equals("378")) {
						docUrl = this.report_fs_hb_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("γ射线工业探伤")) {
					if (num.equals("372")) {
						docUrl = this.report_fs_fsy_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("X射线工业探伤")) {
					if (num.equals("375")) {
						docUrl = this.report_fs_ygfxy_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("γ射线工业CT")) {
					if (num.equals("372")) {
						docUrl = this.report_fs_fsy_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("γ射线和电子束辐照装置")) {
					if (num.equals("400") || num.equals("401")) {
						docUrl = this.report_fs_fsy_docx(taskId,docNum,taskauth);
					}
					
				}else if (name.equals("豁免")) {
					if (num.equals("375")) {
						
					}
					
				}
				
				
				//3是环境卫生
			}else if (type == 3) {
				
				
				
				//4是公共卫生
			}else if (type == 4) {
				if (name.equals("职业卫生物理因素")) {
					if (num.equals("284")) {
						docUrl = this.report_ws_zw_docx(taskId, docNum, taskauth);
					}
				}
			}
			
			logger.info("报告相对路径="+docUrl);
			if (docUrl.equals("") || docHeadUrl.equals("")) {
				jsonString="{success:false,msg:'生成失败'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			task.setDocTime(sdf.parse(docTime));
			task.setDocNum(docNum);
			task.setDocUrl(docUrl+".docx");
			romssztaskService.update(task);
			
			//添加报告记录
			String where1 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC szDOC = romsszdocService.queryWhere(where1);
			if (szDOC == null) {
				ROMS_SZ_DOC doc = new ROMS_SZ_DOC();
				doc.setCreatetime(sdf.parse(docTime));
				doc.setDocNum(docNum);
				doc.setDocPdfUrl(docUrl+".pdf");
				doc.setDocUrl(docUrl+".docx");
				doc.setDocHeadUrl(docHeadUrl+"报告封面.docx");
				doc.setDocHeadPdfUrl(docHeadUrl+"报告封面.pdf");
				doc.setTask(task);
				doc.setProject(task.getProject());
				doc.setSubCompany(task.getProject().getSubCompany());
				romsszdocService.add(doc);
			}else{
				szDOC.setCreatetime(sdf.parse(docTime));
				szDOC.setDocNum(docNum);
				szDOC.setDocPdfUrl(docUrl+".pdf");
				szDOC.setDocUrl(docUrl+".docx");
				szDOC.setDocHeadUrl(docHeadUrl+"报告封面.docx");
				szDOC.setDocHeadPdfUrl(docHeadUrl+"报告封面.pdf");
				szDOC.setTask(task);
				szDOC.setProject(task.getProject());
				szDOC.setSubCompany(task.getProject().getSubCompany());
				romsszdocService.update(szDOC);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{errcode:0,success:false,msg:'生成失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{success:true,msg:'生成成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 生成原始记录表接口
	 * @return
	 * @throws Exception 
	 */
	public String app_updatePass() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_updatePass()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String taskId = request.getParameter("taskId");
			logger.info("任务id="+taskId);
//			String taskId = "dd737fd9-0062-4a31-875a-6f5c4bb275b8";
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{success:false,msg:'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			String where = " and taskId='"+taskId+"' and templateId is not null";
			ROMS_SZ_TASKAUTH taskauth = romssztaskauthService.queryWhere(where);
			if (taskauth == null) {
				jsonString="{success:false,msg:'该任务没有绑定模板'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			String url = "";
			String num = taskauth.getTemplate().getNum();
			logger.info("模板编号="+num);
			
			if (num.equals("284")) {
				url = this.upload_284_docx(taskId,taskauth);
			}else if (num.equals("366")) {
				url = this.upload_366_docx(taskId,taskauth);
			}else if (num.equals("3661")) {
				url = this.upload_3661_docx(taskId,taskauth);
			}else if (num.equals("367")) {
				url = this.upload_367_docx(taskId,taskauth);
			}else if (num.equals("368")) {
				url = this.upload_368_docx(taskId,taskauth);
			}else if (num.equals("369")) {
				url = this.upload_369_docx(taskId,taskauth);
			}else if (num.equals("370")) {
				url = this.upload_370_docx(taskId,taskauth);
			}else if (num.equals("371")) {
				url = this.upload_371_docx(taskId,taskauth);
			}else if (num.equals("372")) {
				url = this.upload_372_docx(taskId,taskauth);
			}else if (num.equals("3721")) {
				url = this.upload_3721_docx(taskId,taskauth);
			}else if (num.equals("373")) {
				url = this.upload_373_docx(taskId,taskauth);
			}else if (num.equals("374")) {
				url = this.upload_374_docx(taskId,taskauth);
			}else if (num.equals("375")) {
				url = this.upload_375_docx(taskId,taskauth);
			}else if (num.equals("376")) {
				url = this.upload_376_docx(taskId,taskauth);
			}else if (num.equals("377")) {
				url = this.upload_377_docx(taskId,taskauth);
			}else if (num.equals("378")) {
				url = this.upload_378_docx(taskId,taskauth);
			}else if (num.equals("379")) {
				url = this.upload_379_docx(taskId,taskauth);
			}else if (num.equals("380")) {
				url = this.upload_380_docx(taskId,taskauth);
			}else if (num.equals("381")) {
				url = this.upload_381_docx(taskId,taskauth);
			}else if (num.equals("382")) {
				url = this.upload_382_docx(taskId,taskauth);
			}else if (num.equals("383")) {
				url = this.upload_383_docx(taskId,taskauth);
			}else if (num.equals("384")) {
				url = this.upload_384_docx(taskId,taskauth);
			}else if (num.equals("385")) {
				url = this.upload_385_docx(taskId,taskauth);
			}else if (num.equals("386")) {
				url = this.upload_386_docx(taskId,taskauth);
			}else if (num.equals("387")) {
				url = this.upload_387_docx(taskId,taskauth);
			}else if (num.equals("388")) {
				url = this.upload_388_docx(taskId,taskauth);
			}else if (num.equals("389")) {
				url = this.upload_389_docx(taskId,taskauth);
			}else if (num.equals("390")) {
				url = this.upload_390_docx(taskId,taskauth);
			}else if (num.equals("391")) {
				url = this.upload_391_docx(taskId,taskauth);
			}else if (num.equals("392")) {
				url = this.upload_392_docx(taskId,taskauth);
			}else if (num.equals("393")) {
				url = this.upload_393_docx(taskId,taskauth);
			}else if (num.equals("394")) {
				url = this.upload_394_docx(taskId,taskauth);
			}else if (num.equals("395")) {
				url = this.upload_395_docx(taskId,taskauth);
			}else if (num.equals("396")) {
				url = this.upload_396_docx(taskId,taskauth);
			}else if (num.equals("398")) {
				url = this.upload_398_docx(taskId,taskauth);
			}else if (num.equals("399")) {
				url = this.upload_399_docx(taskId,taskauth);
			}else if (num.equals("400")) {
				url = this.upload_400_docx(taskId,taskauth);
			}else if (num.equals("401")) {
				url = this.upload_401_docx(taskId,taskauth);
			}else if (num.equals("418")) {
				url = this.upload_418_docx(taskId,taskauth);
			}else if (num.equals("419")) {
				url = this.upload_419_docx(taskId,taskauth);
			}else if (num.equals("421")) {
				url = this.upload_421_docx(taskId,taskauth);
			}else if (num.equals("422")) {
				url = this.upload_422_docx(taskId,taskauth);
			}else if (num.equals("424")) {
				url = this.upload_424_docx(taskId,taskauth);
			}else if (num.equals("451")) {
				url = this.upload_451_docx(taskId,taskauth);
			}else if (num.equals("493")) {
				url = this.upload_493_docx(taskId,taskauth);
			}else if (num.equals("495")) {
				url = this.upload_495_docx(taskId,taskauth);
			}else if (num.equals("497")) {
				url = this.upload_497_docx(taskId,taskauth);
			}else if (num.equals("508")) {
				url = this.upload_508_docx(taskId,taskauth);
			}
			logger.info("原始记录表相对路径="+url);
			
			if (url.equals("")) {
				jsonString="{success:false,msg:'生成失败'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			task.setMeasureDataPdfUrl(url+".pdf");
			task.setMeasureDataUrl(url+".docx");
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{errcode:0,success:false,msg:'生成失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		
		jsonString="{success:true,msg:'生成成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 通过任务id查询任务所关联人员
	 * @return
	 * @throws Exception 
	 */
	public String app_queryTaskStaff() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_queryTaskStaff()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		String data = "";
		try {
			String taskId = request.getParameter("taskId");
			logger.info("taskId="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务','data':[]}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			String where = " and taskId='"+taskId+"' and staffId is not null and type=0";
			List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where);
			logger.info("任务关联人员数量="+taskStaffs.size());
			
			for (int i = 0; i < taskStaffs.size(); i++) {
				if (i != 0) {
					data += ",";
				}
				
				String t = "{'staffId':'"+taskStaffs.get(i).getStaff().getId()
				+"','staffName':'"+taskStaffs.get(i).getStaff().getStaffName()
				+"','staffPhone':'"+taskStaffs.get(i).getStaff().getStaffPhone()
				+"','photoUrl':'"+taskStaffs.get(i).getStaff().getPhotoUrl()
				+"'}";
				
				data += t;
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'查询失败','data':[]}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'查询成功','data':["+data+"]}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 通过id查询任务id
	 * 应用场景：平板更新页面
	 * @return
	 * @throws Exception 
	 * @throws Exception 
	 */
	public String app_queryId() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_queryId()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		String audit = "";
		ROMS_SZ_TASK task = null;
		try {
			String taskId = request.getParameter("taskId");
			logger.info("任务id="+taskId);
			task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'任务未上传','pass':''}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			int pass = task.getPass();
			
			if (pass == 0) {
				audit = "未审核";
			}else if (pass == 1) {
				audit = "未通过";
			}else if (pass == 2){ 
				audit = "通过";
			}else{
				audit = "未上传";
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			jsonString = "{'errcode':0,'success':false,'msg':'查询错误','pass':''}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString = "{'success':true,'msg':'查询成功','pass':'"+audit+"','projectNum':'"+task.getProjectNum()+"'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 通过id查询任务信息
	 * @return
	 * @throws Exception
	 */
	public String app_queryTask() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_queryTask()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		String data = "";
		try {
			String taskId = request.getParameter("taskId");
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString = "{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			String where = " and taskId='"+taskId+"' and templateId is not null";
			ROMS_SZ_TASKAUTH taskAuth = romssztaskauthService.queryWhere(where);
			
			if (taskAuth == null) {
				jsonString = "{'success':false,'msg':'该任务没有绑定模板'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			String num = taskAuth.getTemplate().getNum();
			logger.info("任务模板编号="+num);
			
//			if (num.equals("366")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','deviceFactor':'"+task.getDeviceFactor()
//				+"','standard':'"+task.getStandard()
//				+"','factor':'"+task.getFactor()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"','conditions':'"+task.getConditions()
//				+"','testingProject':'"+task.getTestingProject()
//				+"','address':'"+task.getAddress()
//				+"'";
//			}else if (num.equals("367")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','deviceFactor':'"+task.getDeviceFactor()
//				+"','standard':'"+task.getStandard()
//				+"','factor':'"+task.getFactor()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"','conditions':'"+task.getConditions()
//				+"'";
//			}else if (num.equals("368")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','deviceFactor':'"+task.getDeviceFactor()
//				+"','standard':'"+task.getStandard()
//				+"','factor':'"+task.getFactor()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"','conditions':'"+task.getConditions()
//				+"'";
//			}else if (num.equals("369")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','deviceFactor':'"+task.getDeviceFactor()
//				+"','standard':'"+task.getStandard()
//				+"','factor':'"+task.getFactor()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"','conditions':'"+task.getConditions()
//				+"'";
//			}else if (num.equals("370")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','deviceFactor':'"+task.getDeviceFactor()
//				+"','standard':'"+task.getStandard()
//				+"','factor':'"+task.getFactor()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"','computerRoom':'"+task.getComputerRoom()
//				+"','performer':'"+task.getPerformer()
//				+"'";
//			}else if (num.equals("371")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','deviceFactor':'"+task.getDeviceFactor()
//				+"','standard':'"+task.getStandard()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nuclideName':'"+task.getNuclideName()
//				+"','nuclideNum':'"+task.getNuclideNum()
//				+"','nuclideVender':'"+task.getNuclideVender()
//				+"','currentActivity':'"+task.getCurrentActivity()
//				+"'";
//			}else if (num.equals("372")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','deviceFactor':'"+task.getDeviceFactor()
//				+"','standard':'"+task.getStandard()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nuclideName':'"+task.getNuclideName()
//				+"','nuclideNum':'"+task.getNuclideNum()
//				+"','nuclideVender':'"+task.getNuclideVender()
//				+"','currentActivity':'"+task.getCurrentActivity()
//				+"','factor':'"+task.getFactor()
//				+"'";
//			}else if (num.equals("373")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','activityResponse':'"+task.getActivityResponse()
//				+"','standard':'"+task.getStandard()
//				+"','nuclideName':'"+task.getNuclideName()
//				+"','nuclideNum':'"+task.getNuclideNum()
//				+"','nuclideVender':'"+task.getNuclideVender()
//				+"','currentActivity':'"+task.getCurrentActivity()
//				+"'";
//			}else if (num.equals("374")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','deviceFactor':'"+task.getDeviceFactor()
//				+"','standard':'"+task.getStandard()
//				+"','factor':'"+task.getFactor()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"','conditions':'"+task.getConditions()
//				+"'";
//			}else if (num.equals("375")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','deviceFactor':'"+task.getDeviceFactor()
//				+"','standard':'"+task.getStandard()
//				+"','factor':'"+task.getFactor()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"','conditions':'"+task.getConditions()
//				+"'";
//			}else if (num.equals("376")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','deviceFactor':'"+task.getDeviceFactor()
//				+"','standard':'"+task.getStandard()
//				+"','cargoName':'"+task.getCargoName()
//				+"','packageNum':'"+task.getPackageNum()
//				+"','physicalState':'"+task.getPhysicalState()
//				+"','nuclideName':'"+task.getNuclideName()
//				+"','currentActivity':'"+task.getCurrentActivity()
//				+"'";
//			}else if (num.equals("377")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','factor':'"+task.getFactor()
//				+"','standard':'"+task.getStandard()
//				+"','cargoName':'"+task.getCargoName()
//				+"','packageNum':'"+task.getPackageNum()
//				+"','physicalState':'"+task.getPhysicalState()
//				+"','nuclideName':'"+task.getNuclideName()
//				+"','packageType':'"+task.getPackageType()
//				+"','packageSize':'"+task.getPackageSize()
//				+"','packageActivity':'"+task.getPackageActivity()
//				+"','rayType':'"+task.getRayType()
//				+"'";
//			}else if (num.equals("378")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','place':'"+task.getPlace()
//				+"','weather':'"+task.getWeather()
//				+"','activityResponse':'"+task.getActivityResponse()
//				+"','standard':'"+task.getStandard()
//				+"','cargoName':'"+task.getCargoName()
//				+"','packageNum':'"+task.getPackageNum()
//				+"','physicalState':'"+task.getPhysicalState()
//				+"','nuclideName':'"+task.getNuclideName()
//				+"','packageType':'"+task.getPackageType()
//				+"','packageSize':'"+task.getPackageSize()
//				+"','packageActivity':'"+task.getPackageActivity()
//				+"','rayType':'"+task.getRayType()
//				+"'";
//			}else if (num.equals("380")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','standard':'"+task.getStandard()
//				+"','factor':'"+task.getFactor()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"'";
//			}else if (num.equals("381")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','standard':'"+task.getStandard()
//				+"','exposureControl':'"+task.getExposureControl()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"'";
//			}else if (num.equals("382")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','standard':'"+task.getStandard()
//				+"','brightnessControl':'"+task.getBrightnessControl()
//				+"','imageIntensifier':'"+task.getImageIntensifier()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"'";
//			}else if (num.equals("383")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','standard':'"+task.getStandard()
//				+"','timeDeixis':'"+task.getTimeDeixis()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"'";
//			}else if (num.equals("384")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','standard':'"+task.getStandard()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"'";
//			}else if (num.equals("385")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','standard':'"+task.getStandard()
//				+"','sidDeixis':'"+task.getSidDeixis()
//				+"','radiometricControl':'"+task.getRadiometricControl()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"','nominalCapacity':'"+task.getNominalCapacity()
//				+"'";
//			}else if (num.equals("386")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','standard':'"+task.getStandard()
//				+"','sourcesSpecies':'"+task.getSourcesSpecies()
//				+"','sourcesVender':'"+task.getSourcesVender()
//				+"'";
//			}else if (num.equals("387")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','checkDeviceNum':'"+task.getCheckDeviceNum()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','checkDeviceModel':'"+task.getCheckDeviceModel()
//				+"','checkDeviceVender':'"+task.getCheckDeviceVender()
//				+"'";
//			}else if (num.equals("393")) {
//				//对象转json
//				String dataString = JsonUtil.objectToJsonStr(task);
//				data = dataString.substring(1, data.length()-1);
//			}else if (num.equals("401")) {
//				data = "'projectNum':'"+task.getProjectNum()
//				+"','checkUnitName':'"+task.getCheckUnitName()
//				+"','checkUnitAddress':'"+task.getCheckUnitAddress()
//				+"','monitorType':'"+task.getMonitorType()
//				+"','place':'"+task.getPlace()
//				+"','deviceFactor':'"+task.getDeviceFactor()
//				+"','standard':'"+task.getStandard()
//				+"','factor':'"+task.getFactor()
//				+"','checkDeviceName':'"+task.getCheckDeviceName()
//				+"','exposureDeviceModel':'"+task.getExposureDeviceModel()
//				+"','source':'"+task.getSource()
//				+"','nuclideName':'"+task.getNuclideName()
//				+"','nuclideVender':'"+task.getNuclideVender()
//				+"','maxActivity':'"+task.getMaxActivity()
//				+"','currentActivity':'"+task.getCurrentActivity()
//				+"'";
//			}else{
////				logger.info("======="+data);
//			}
			//对象转json
			String dataString = JsonUtil.objectToJsonStr(task);
			data = dataString.substring(1, dataString.length()-1);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString = "{'errcode':0,'success':false,'msg':'查询失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString = "{'success':true,'msg':'查询成功',"+data+"}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	
	
	/**
	 * 生成医用设备防护报告接口
	 * @return
	 */
	public String report_fs_yysbfh_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_yysbfh_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVener",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		dataMap.put("deviceName",taskDevices.get(i).getDevice().getDeviceName());//主要检测仪器
				    dataMap.put("deviceUnit",taskDevices.get(i).getDevice().getDeviceUnit());//检测仪器检定单位
				    dataMap.put("correctNum",taskDevices.get(i).getDevice().getCorrectNum());//检定证书编号
				    dataMap.put("correctTime",taskDevices.get(i).getDevice().getCorrectTime());//证书有效日期至
				}
			}
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					
					if (type == 1) {
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setAvg(item6);
						
						pointDatas.add(pointData);
					}
				}
			}
			//防止没有测点而文档无法打开
			if (objArray.length == 0) {
				ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
				pointData.setP("");
				pointData.setDepict("");
				pointData.setAvg("");
				
				pointDatas.add(pointData);
			}
			dataMap.put("pointDatas",pointDatas);//数据
		    
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_yysbfh.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 生成荧光分析仪报告接口
	 * @return
	 */
	public String report_fs_ygfxy_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ygfxy_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		dataMap.put("deviceName",taskDevices.get(i).getDevice().getDeviceName());//主要检测仪器
				    dataMap.put("deviceUnit",taskDevices.get(i).getDevice().getDeviceUnit());//检测仪器检定单位
				    dataMap.put("correctNum",taskDevices.get(i).getDevice().getCorrectNum());//检定证书编号
				    dataMap.put("correctTime",taskDevices.get(i).getDevice().getCorrectTime());//证书有效日期至
				}
			}
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					
					if (type == 1) {
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setAvg(item6);
						
						pointDatas.add(pointData);
					}
				}
			}
			//防止没有测点而文档无法打开
			if (objArray.length == 0) {
				ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
				pointData.setP("");
				pointData.setDepict("");
				pointData.setAvg("");
				
				pointDatas.add(pointData);
			}
			dataMap.put("pointDatas",pointDatas);//数据
		    
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_ygfxy.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 生成放射源报告接口
	 * @return
	 */
	public String report_fs_fsy_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_fsy_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("nuclideVener",task.getNuclideVender());//核素生产厂家
		    dataMap.put("nuclideNum",task.getNuclideNum());//核素编码
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    dataMap.put("currentActivity",task.getCurrentActivity());//核素活度
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    
		  //循环判断只把有编号的仪器添加进报告里
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		dataMap.put("deviceName",taskDevices.get(i).getDevice().getDeviceName());//主要检测仪器
				    dataMap.put("deviceUnit",taskDevices.get(i).getDevice().getDeviceUnit());//检测仪器检定单位
				    dataMap.put("correntNum",taskDevices.get(i).getDevice().getCorrectNum());//检定证书编号
				    dataMap.put("correntTime",taskDevices.get(i).getDevice().getCorrectTime());//证书有效日期至
				}
			}
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					
					if (type == 1) {
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setAvg(item6);
						
						pointDatas.add(pointData);
					}
				}
			}
			//防止没有测点而文档无法打开
			if (objArray.length == 0) {
				ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
				pointData.setP("");
				pointData.setDepict("");
				pointData.setAvg("");
				
				pointDatas.add(pointData);
			}
			dataMap.put("pointDatas",pointDatas);//数据
//			logger.info("====="+JSONObject.fromObject(dataMap));
		    
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_fsy.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 生成货包报告接口
	 * @return
	 */
	public String report_fs_hb_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_hb_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("packageNum",task.getPackageNum());//货包批号
		    dataMap.put("cargoName",task.getCargoName());//货物名称
		    dataMap.put("rayType",task.getRayType());//射线类型
		    dataMap.put("packageSize",task.getPackageSize());//货包件数
		    dataMap.put("physicacState",task.getPhysicalState());//物理状态
		    dataMap.put("packageActivity",task.getPackageActivity());//货包总放射性活度
		    dataMap.put("packageType",task.getPackageType());//货包类型
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					
					if (type == 1) {
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setAvg(item6);
						
						pointDatas.add(pointData);
					}
				}
			}
			//防止没有测点而文档无法打开
			if (objArray.length == 0) {
				ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
				pointData.setP("");
				pointData.setDepict("");
				pointData.setAvg("");
				
				pointDatas.add(pointData);
			}
			dataMap.put("pointDatas",pointDatas);//数据
//			logger.info("====="+JSONObject.fromObject(dataMap));
		    
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_hb.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 生成CT性能报告接口
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_ctxn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_fsy_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    
		    //循环判断只把有编号的仪器添加进报告里
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		dataMap.put("deviceName",taskDevices.get(i).getDevice().getDeviceName());//主要检测仪器
				    dataMap.put("deviceUnit",taskDevices.get(i).getDevice().getDeviceUnit());//检测仪器检定单位
				    dataMap.put("correctNum",taskDevices.get(i).getDevice().getCorrectNum());//检定证书编号
				    dataMap.put("correctTime",taskDevices.get(i).getDevice().getCorrectTime());//证书有效日期至
				}
			}
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0表示CTDIw，1表示诊断床定位精度，2表示水的CT值（HU）、均匀性（HU）及噪声* ，3表示定位光精度,mm，4表示重建层厚偏差，5表示高对比分辨力lp/cm，6表示低对比可探测能力，7表示CT值线性，HU="+type);
				
				if (type == 0) {
					int subType = Integer.parseInt((String) morphDynaBean.get("subType"));
					logger.info("0表示头部模体，1表示体部模体="+subType);
					
					if (subType == 0) {
						String item = (String) morphDynaBean.get("item10");
						logger.info("CTDIw,mGy-头部模体检测结果="+item);
						
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP((i+3)+"");
						pointData.setItem1("CTDIw,mGy");
						pointData.setItem2("头部模体");
						pointData.setItem3(item==""?"-----":item);
						if (task.getMonitorType().equals("验收检测")) {
							pointData.setItem4("与厂家说明书指标相差±10%以内");
						}else{
							pointData.setItem4("与厂家说明书指标相差±15%以内，若无说明书技术指标参考，应&lt;30");
						}
						
						
						pointDatas.add(pointData);
					}else if (subType == 1) {
						String item = (String) morphDynaBean.get("item10");
						logger.info("CTDIw,mGy-体部模体检测结果="+item);
						
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP((i+3)+"");
						pointData.setItem1("CTDIw,mGy");
						pointData.setItem2("体部模体");
						pointData.setItem3(item==""?"-----":item);
						if (task.getMonitorType().equals("验收检测")) {
							pointData.setItem4("与厂家说明书指标相差±10%以内");
						}else{
							pointData.setItem4("与厂家说明书指标相差±15%以内，若无说明书技术指标参考，应&lt;30");
						}
						
						pointDatas.add(pointData);
					}
				}else if (type == 1) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("诊断床定位精度数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int type2 = Integer.parseInt((String) morphDynaBean1.get("type"));
						logger.info("0是定位，1是归位="+type2);
						String item = (String) morphDynaBean1.get("item7");
						logger.info("诊断床定位精度检测结果="+item);
						
						if (type2 == 0) {
							dataMap.put("cond4","定位");//检测条件
							dataMap.put("result4",item==""?"-----":item);//检测结果
							if (task.getMonitorType().equals("验收检测")) {
								dataMap.put("stan4","±2");//标准要求
							}else{
								dataMap.put("stan4","±2");//标准要求
							}
						}else{
							dataMap.put("cond5","归位");//检测条件
							dataMap.put("result5",item==""?"-----":item);//检测结果
							if (task.getMonitorType().equals("验收检测")) {
								dataMap.put("stan5","±2");//标准要求
							}else{
								dataMap.put("stan5","±2");//标准要求
							}
							
						}
						
					}
					
					dataMap.put("p2","2");//序号
					dataMap.put("project2","诊断床定位精度,mm");//检测项目
				}else if (type == 2) {
					String item8 = (String) morphDynaBean.get("item8");
					logger.info("水的CT值（水）,HU检测结果="+item8);
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("噪声,％检测结果="+item9);
					String item10 = (String) morphDynaBean.get("item10");
					logger.info("均匀性,HU检测结果="+item10);
					
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setP((i+3)+"");
					pointData.setItem1("水的CT值（水）,HU");
					pointData.setItem2("水模体");
					pointData.setItem3(item8==""?"-----":item8);
					if (task.getMonitorType().equals("验收检测")) {
						pointData.setItem4("±4");
					}else{
						pointData.setItem4("±6");
					}
					pointDatas.add(pointData);
					
					ROMS_SZ_POINTDATA pointData1 = new ROMS_SZ_POINTDATA();
					pointData1.setP((i+4)+"");
					pointData1.setItem1("噪声,％");
					pointData1.setItem2("头部模体CTDIw&lt; mGy");
					pointData1.setItem3(item9==""?"-----":item9);
					if (task.getMonitorType().equals("验收检测")) {
						pointData1.setItem4("&lt;0.35");
					}else{
						pointData1.setItem4("&lt;0.45");
					}
					pointDatas.add(pointData1);
					
					ROMS_SZ_POINTDATA pointData11 = new ROMS_SZ_POINTDATA();
					pointData11.setP((i+5)+"");
					pointData11.setItem1("均匀性,HU");
					pointData11.setItem2("水或等效水均匀模体");
					pointData11.setItem3(item10==""?"-----":item10);
					if (task.getMonitorType().equals("验收检测")) {
						pointData11.setItem4("±5");
					}else{
						pointData11.setItem4("±6");
					}
					pointDatas.add(pointData11);
				}else if (type == 3) {
					String item = (String) morphDynaBean.get("item6");
					logger.info("定位光精度检测结果="+item);
					
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setP((i+3)+"");
					pointData.setItem1("定位光精度,mm");
					pointData.setItem2("-----");
					pointData.setItem3(item==""?"-----":item);
					if (task.getMonitorType().equals("验收检测")) {
						pointData.setItem4("±2");
					}else{
						pointData.setItem4("±3");
					}
					
					pointDatas.add(pointData);
				}else if (type == 4) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("重建层厚偏差数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("重建层厚偏差标称值="+item1);
						String item12 = (String) morphDynaBean1.get("item12");
						logger.info("重建层厚偏差="+item12);
						
						if (!item1.equals("")) {
							if (Float.parseFloat(item1) >= 8) {
								dataMap.put("cond1","s≥8");//检测条件
								dataMap.put("result1",item1+"mm,"+item12+"%");//检测结果
								if (task.getMonitorType().equals("验收检测")) {
									dataMap.put("stan1","±10%");//标准要求
								}else{
									dataMap.put("stan1","±15%");//标准要求
								}
							}else if (8 > Float.parseFloat(item1) && Float.parseFloat(item1) > 2) {
								dataMap.put("cond2","8>s>2");//检测条件
								dataMap.put("result2",item1+"mm,"+item12+"%");//检测结果
								if (task.getMonitorType().equals("验收检测")) {
									dataMap.put("stan2","±25%");//标准要求
								}else{
									dataMap.put("stan2","±30%");//标准要求
								}
							}else if (Float.parseFloat(item1) <= 2) {
								dataMap.put("cond3","s≤2");//检测条件
								dataMap.put("result3",item1+"mm,"+item12+"%");//检测结果
								if (task.getMonitorType().equals("验收检测")) {
									dataMap.put("stan3","±40%");//标准要求
								}else{
									dataMap.put("stan3","±50%");//标准要求
								}
							}
						}
						
						//判断是否有值
						if (dataMap.get("result1") == null) {
							dataMap.put("cond1","s≥8");//检测条件
							dataMap.put("result1","-----");//检测结果
							if (task.getMonitorType().equals("验收检测")) {
								dataMap.put("stan1","±10%");//标准要求
							}else{
								dataMap.put("stan1","±15%");//标准要求
							}
						}else if (dataMap.get("result2") == null) {
							dataMap.put("cond2","8>s>2");//检测条件
							dataMap.put("result2","-----");//检测结果
							if (task.getMonitorType().equals("验收检测")) {
								dataMap.put("stan2","±25%");//标准要求
							}else{
								dataMap.put("stan2","±30%");//标准要求
							}
						}else if (dataMap.get("result3") == null) {
							dataMap.put("cond3","s≤2");//检测条件
							dataMap.put("result3","-----");//检测结果
							if (task.getMonitorType().equals("验收检测")) {
								dataMap.put("stan3","±40%");//标准要求
							}else{
								dataMap.put("stan3","±50%");//标准要求
							}
						}
					}
					
					dataMap.put("p1","1");//序号
					dataMap.put("project1","重建层厚偏差（s），mm");//检测项目
				}else if (type == 5) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("高对比分辨力lp/cm数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int type1 = Integer.parseInt((String) morphDynaBean1.get("type"));
						logger.info("0是常规算法,1是高对比算法");
						
						if (type1 == 0) {
							String item3 = (String) morphDynaBean1.get("item3");
							logger.info("高对比分辨力lp/cm检测结果="+item3);
							
							ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
							pointData.setP((i+3)+"");
							pointData.setItem1("高对比分辨力lp/cm");
							pointData.setItem2("常规算法CTDIw&lt;50mGy");
							pointData.setItem3(item3==""?"-----":item3);
							if (task.getMonitorType().equals("验收检测")) {
								pointData.setItem4(">6.0");
							}else{
								pointData.setItem4(">5.0");
							}
							
							pointDatas.add(pointData);
						}
					}
				}else if (type == 6) {
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("低对比可探测能力检测结果="+item9);
					
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setP((i+3)+"");
					pointData.setItem1("低对比可探测能力,mm");
					pointData.setItem2("-----");
					pointData.setItem3(item9==""?"-----":item9);
					if (task.getMonitorType().equals("验收检测")) {
						pointData.setItem4("&lt;2.5");
					}else{
						pointData.setItem4("&lt;3.0");
					}
					
					pointDatas.add(pointData);
				}else if (type == 7) {
					String item = (String) morphDynaBean.get("item12");
					logger.info("CT值线性检测结果="+item);
					
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setP((i+3)+"");
					pointData.setItem1("CT值线性，HU");
					pointData.setItem2("-----");
					pointData.setItem3(item==""?"-----":item);
					if (task.getMonitorType().equals("验收检测")) {
						pointData.setItem4("50");
					}else{
						pointData.setItem4("60");
					}
					
					pointDatas.add(pointData);
				}
			}
			dataMap.put("pointDatas",pointDatas);//数据
			logger.info(JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
//			String pas = ServletActionContext.getServletContext().getRealPath(
//					"");
//			//判断图片路径是否为空，为空就不上传
//			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
//				dataMap.put("point", "");
//			}else{
//				//点位图
//				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
//			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_ctxn.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 生成γ刀性能报告接口
	 * @return
	 */
	public String report_fs_ydxn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ydxn_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("sourcesVender",task.getSourcesVender());//治疗源生产厂家
		    dataMap.put("sourcesSpecies",task.getSourcesSpecies());//治疗源核数种类
		    dataMap.put("sourcesActivity",task.getSourcesActivity());//治疗源当前活度
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    
		  //循环判断只把有编号的仪器添加进报告里
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		dataMap.put("deviceName",taskDevices.get(i).getDevice().getDeviceName());//主要检测仪器
				    dataMap.put("deviceUnit",taskDevices.get(i).getDevice().getDeviceUnit());//检测仪器检定单位
				    dataMap.put("correctNum",taskDevices.get(i).getDevice().getCorrectNum());//检定证书编号
				    dataMap.put("correctTime",taskDevices.get(i).getDevice().getCorrectTime());//证书有效日期至
				}
			}
		    
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 1; i <= objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i-1]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("type="+type);
				
				if (type == 0) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					a = JSONObject.fromObject(objects[0]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setItem1((i+2)+"");
					pointData.setItem2("焦点剂量率");
					pointData.setItem3("18mm准直器");
					pointData.setItem4(item9);
					if (task.getMonitorType().equals("状态检测")) {
						pointData.setItem5("≥1.5Gy/min");
					}else{
						pointData.setItem5("≥2.5Gy/min");
					}
					
					pointDatas.add(pointData);
				}else if (type == 1) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					a = JSONObject.fromObject(objects[0]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setItem1((i+2)+"");
					pointData.setItem2("焦点计划剂量与实测剂量的相对偏差");
					pointData.setItem3("18mm准直器");
					pointData.setItem4(item9);
					pointData.setItem5("≤±5%");
					
					pointDatas.add(pointData);
				}else if (type == 2) {
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("item4="+item4);
					
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setItem1((i+2)+"");
					pointData.setItem2("机械中心与照射野中心的距离（mm）");
					pointData.setItem3("4mm准直器");
					pointData.setItem4(item4);
					pointData.setItem5("≤0.5mm");
					
					pointDatas.add(pointData);
				}else if (type == 3) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					//判断大于1就-1循环，不然就正常循环
					int as = 0;
					if (objects.length > 2) {
						as = objects.length-1;
					}else{
						as = objects.length;
					}
					for (int j = 1; j < as; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item5 = (String) morphDynaBean1.get("item5");
						logger.info("item5="+item5);
						
						if (item5.equals("")) {
							continue;
						}
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setItem3(item1+"mm准直器");
						pointData.setItem4(item5);
						pointData.setItem5("≤1.5mm");
						
						pointDatas1.add(pointData);
					}
					
					if (objects.length >= 1) {
						a = JSONObject.fromObject(objects[0]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item5 = (String) morphDynaBean1.get("item5");
						logger.info("item5="+item5);
						
						if (item5.equals("")) {
							dataMap.put("v11","");
							dataMap.put("v12","");
							dataMap.put("v13","");
						}else{
							dataMap.put("v11",item1+"mm准直器");
							dataMap.put("v12",item5);
							dataMap.put("v13","≤1.5mm");
						}
					}else{
						dataMap.put("v11","");
						dataMap.put("v12","");
						dataMap.put("v13","");
					}
					
					if (objects.length > 2) {
						a = JSONObject.fromObject(objects[as]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item5 = (String) morphDynaBean1.get("item5");
						logger.info("item5="+item5);
						
						if (item5.equals("")) {
							dataMap.put("v21","");
							dataMap.put("v22","");
							dataMap.put("v23","");
						}else{
							dataMap.put("v21",item1+"mm准直器");
							dataMap.put("v22",item5);
							dataMap.put("v23","≤1.5mm");
						}
						
					}else{
						dataMap.put("v21","");
						dataMap.put("v22","");
						dataMap.put("v23","");
					}
				}else if (type == 4) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					//判断大于1就-1循环，不然就正常循环
					int as = 0;
					if (objects.length > 2) {
						as = objects.length-1;
					}else{
						as = objects.length;
					}
					
					for (int j = 1; j < as; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item8 = (String) morphDynaBean1.get("item8");
						logger.info("item8="+item8);
						
						if (item8.equals("")) {
							continue;
						}
						
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setItem3(item1+"mm准直器");
						pointData.setItem4(item8);
						
						if (item1.equals("4")) {
							pointData.setItem5("≤4mm");
						}else if (item1.equals("8")) {
							pointData.setItem5("≤6mm");
						}else if (item1.equals("14")) {
							pointData.setItem5("≤10mm");
						}else if (item1.equals("18")) {
							pointData.setItem5("≤12mm");
						}else if (item1.equals("22")) {
							pointData.setItem5("≤14mm");
						}
						
						pointDatas2.add(pointData);
					}
					
					if (objects.length >= 1) {
						a = JSONObject.fromObject(objects[0]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item8 = (String) morphDynaBean1.get("item8");
						logger.info("item8="+item8);
						
						if (item8.equals("")) {
							dataMap.put("v31","");
							dataMap.put("v32","");
							dataMap.put("v33","");
						}else{
							dataMap.put("v31",item1+"mm准直器");
							dataMap.put("v32",item8);
							if (item1.equals("4")) {
								dataMap.put("v33","≤4mm");
							}else if (item1.equals("8")) {
								dataMap.put("v33","≤6mm");
							}else if (item1.equals("14")) {
								dataMap.put("v33","≤10mm");
							}else if (item1.equals("18")) {
								dataMap.put("v33","≤12mm");
							}else if (item1.equals("22")) {
								dataMap.put("v33","≤14mm");
							}
						}
						
					}else{
						dataMap.put("v31","");
						dataMap.put("v32","");
						dataMap.put("v33","");
					}
					
					if (objects.length > 2) {
						a = JSONObject.fromObject(objects[as]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item8 = (String) morphDynaBean1.get("item8");
						logger.info("item8="+item8);
						
						if (item8.equals("")) {
							dataMap.put("v41","");
							dataMap.put("v42","");
							dataMap.put("v43","");
						}else{
							dataMap.put("v41",item1+"mm准直器");
							dataMap.put("v42",item8);
							if (item1.equals("4")) {
								dataMap.put("v43","≤4mm");
							}else if (item1.equals("8")) {
								dataMap.put("v43","≤6mm");
							}else if (item1.equals("14")) {
								dataMap.put("v43","≤10mm");
							}else if (item1.equals("18")) {
								dataMap.put("v43","≤12mm");
							}else if (item1.equals("22")) {
								dataMap.put("v43","≤14mm");
							}
						}
						
					}else{
						dataMap.put("v41","");
						dataMap.put("v42","");
						dataMap.put("v43","");
					}
				}else if (type == 5) {
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("item5="+item5);
					
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setItem1(i+"");
					pointData.setItem2("透过准直体的泄漏辐射率（准直器关闭时与开启时辐射水平之比）（%）");
					pointData.setItem3("处于治疗预定位置的模体中心");
					pointData.setItem4(item5);
					pointData.setItem5("≤2%");
					
					pointDatas.add(pointData);
				}
				
			}
			
			dataMap.put("pointDatas",pointDatas);//数据
			dataMap.put("pointDatas1",pointDatas1);//数据1
			dataMap.put("pointDatas2",pointDatas2);//数据2
//			logger.info("====="+JSONObject.fromObject(dataMap));
		    
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_ydxn.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 生成PET性能报告接口
	 * @return
	 */
	public String report_fs_petxn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_petxn_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getTestingWay());//检测依据
		    dataMap.put("docNum",docNum);//报告编号
		    
		  //循环判断只把有编号的仪器添加进报告里
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	dataMap.put("deviceName",taskDevices.get(i).getDevice().getDeviceName());//主要检测仪器
			}
		    
		    //防止没有仪器
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			}
		    
		  //解析测点和数据json
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 1; i <= objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i-1]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("type="+type);
				
				if (type == 0) {
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item2 = (String) morphDynaBean1.get("item2");
						logger.info("item2="+item2);
						String item5 = (String) morphDynaBean1.get("item5");
						logger.info("item5="+item5);
						String item6 = (String) morphDynaBean1.get("item6");
						logger.info("item6="+item6);
						
						dataMap.put("v0"+j+"1",item1);
						dataMap.put("v0"+j+"2",item2);
						dataMap.put("v0"+j+"3",item5);
						dataMap.put("v0"+j+"4",item6);
					}
					
				}else if (type == 1) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 2; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v1"+j+k+"="+item);
							
							dataMap.put("v1"+j+k,item);
						}
					}
				}else if (type == 2) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					
					dataMap.put("v22",item1);
				}else if (type == 3) {
					
				}
			}
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
		    
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_petxn.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 生成SPECT性能报告接口
	 * @return
	 */
	public String report_fs_spectxn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_spectxn_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("probeCrystal",task.getProbeCrystal());//探头晶体厚度
		    dataMap.put("docNum",docNum);//报告编号
		    
		  //循环判断只把有编号的仪器添加进报告里
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	dataMap.put("deviceName",taskDevices.get(i).getDevice().getDeviceName());//主要检测仪器
			}
		    
		    //防止没有仪器
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			}
		    
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		  //解析测点和数据json
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 1; i <= objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i-1]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("type="+type);
				
				ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
				
				//0是空气中固有计数率特性
				if (type == 0) {
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("探头1"+item4);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("探头2"+item5);
					
					pointData.setItem1((i+2)+"");
					pointData.setItem2("空气中固有计数率特性/kcps");
					pointData.setItem3("探头1");
					pointData.setItem4(item4);
					pointData.setItem5("探头2");
					pointData.setItem6(item5);
					pointData.setItem7("≥75");
					pointData.setItem8("无");
					
					pointDatas.add(pointData);
					
					//1是固有泛源非均匀性
				}else if (type == 1) {
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("探头1"+item9);
					String item10 = (String) morphDynaBean.get("item10");
					logger.info("探头2"+item10);
					String item11 = (String) morphDynaBean.get("item11");
					logger.info("探头1"+item11);
					String item12 = (String) morphDynaBean.get("item12");
					logger.info("探头2"+item12);
					
					dataMap.put("v01","固有泛源非均匀性/%");
					dataMap.put("v02","积分均匀性");
					dataMap.put("v03","微分均匀性");
					dataMap.put("v04","探头1");
					dataMap.put("v05",item9);
					dataMap.put("v06","探头2");
					dataMap.put("v07",item10);
					dataMap.put("v08","探头1");
					dataMap.put("v09",item11);
					dataMap.put("v010","探头2");
					dataMap.put("v011",item12);
					dataMap.put("v012","≤4.5");
					dataMap.put("v013","≤3.5");
					dataMap.put("v014","无");
					
					//2是固有空间分辨力
				}else if (type == 2) {
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("探头1"+item9);
					String item10 = (String) morphDynaBean.get("item10");
					logger.info("探头2"+item10);
					
					pointData.setItem1((i+2)+"");
					pointData.setItem2("固有空间分辨力/mm");
					pointData.setItem3("探头1");
					pointData.setItem4(item9);
					pointData.setItem5("探头2");
					pointData.setItem6(item10);
					pointData.setItem7("≤6.0");
					pointData.setItem8("无");
					
					pointDatas.add(pointData);
					
					//3是固有空间线性
				}else if (type == 3) {
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("探头1"+item9);
					String item10 = (String) morphDynaBean.get("item10");
					logger.info("探头2"+item10);
					
					pointData.setItem1((i+2)+"");
					pointData.setItem2("固有空间线性/mm");
					pointData.setItem3("探头1");
					pointData.setItem4(item9);
					pointData.setItem5("探头2");
					pointData.setItem6(item10);
					pointData.setItem7("≤0.30");
					pointData.setItem8("无");
					
					pointDatas.add(pointData);
					
					//4是系统平面灵敏度Cps/MBq
				}else if (type == 4) {
					String item16 = (String) morphDynaBean.get("item16");
					logger.info("探头1"+item16);
					String item17 = (String) morphDynaBean.get("item17");
					logger.info("探头2"+item17);
					
					pointData.setItem1((i+2)+"");
					pointData.setItem2("系统平面灵敏度Cps/MBq");
					pointData.setItem3("探头1");
					pointData.setItem4(item16);
					pointData.setItem5("探头2");
					pointData.setItem6(item17);
					pointData.setItem7("≥60");
					pointData.setItem8("准直器：LEHR");
					
					pointDatas.add(pointData);
					
					//5是无散射系统空间分辨率
				}else if (type == 5) {
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("探头1"+item9);
					String item10 = (String) morphDynaBean.get("item10");
					logger.info("探头2"+item10);
					
					pointData.setItem1((i+2)+"");
					pointData.setItem2("无散射系统空间分辨率/mm");
					pointData.setItem3("探头1");
					pointData.setItem4(item9);
					pointData.setItem5("探头2");
					pointData.setItem6(item10);
					pointData.setItem7("≤10.0");
					pointData.setItem8("准直器：LEHR");
					
					pointDatas.add(pointData);
					
					//6是SPECT的系统空间分辨率
				}else if (type == 6) {
					String item11 = (String) morphDynaBean.get("item11");
					logger.info("探头2"+item11);
					
					dataMap.put("v11","SPECT的系统空间分辨率/mm");
					dataMap.put("v12",item11);
					dataMap.put("v13","≤17.0");
					dataMap.put("v14","准直器：LEHR");
				}
			}
			dataMap.put("pointDatas",pointDatas);
//			logger.info("====="+JSONObject.fromObject(dataMap));
		    
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_spectxn.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 生成豁免报告模板（射线装置）接口
	 * @return
	 */
	public String report_fs_hmsx_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_hmsx_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("docNum",docNum);//报告编号
		    
		  //循环判断只把有编号的仪器添加进报告里
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		dataMap.put("deviceName",taskDevices.get(i).getDevice().getDeviceName());//主要检测仪器
				    dataMap.put("deviceUnit",taskDevices.get(i).getDevice().getDeviceUnit());//检测仪器检定单位
				    dataMap.put("correctNum",taskDevices.get(i).getDevice().getCorrectNum());//检定证书编号
				    dataMap.put("correctTime",taskDevices.get(i).getDevice().getCorrectTime());//证书有效日期至
				}
			}
		    
		    //防止没有仪器
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
		    	dataMap.put("deviceUnit","");//检测仪器检定单位
			    dataMap.put("correctNum","");//检定证书编号
			    dataMap.put("correctTime","");//证书有效日期至
			}
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 1; i <= objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i-1]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					
					
					if (type == 0) {
						
					}else{
						
					}
				}
			}
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
		    
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_hmsx.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 生成后装机性能报告接口
	 * @return
	 */
	public String report_fs_hzjxn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_hzjxn_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getTestingWay());//检测依据
		    dataMap.put("sourcesSpecies",task.getSourcesSpecies());//治疗源核数种类
		    dataMap.put("sourcesVender",task.getSourcesVender());//治疗源生产厂家
		    dataMap.put("sourcesActivity",task.getSourcesActivity());//治疗源当前活度
		    dataMap.put("docNum",docNum);//报告编号
		    
		  //循环判断只把有编号的仪器添加进报告里
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	dataMap.put("deviceName",taskDevices.get(i).getDevice().getDeviceName());//主要检测仪器
			}
		    
		    //防止没有仪器
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			}
		    
		  //解析测点和数据json
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 1; i <= objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i-1]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("type="+type);
				
//				if (type == 0) {
//					
//					//获取数据
//					JSONArray jsonArray = a.getJSONArray("value");
//					Object[] objects = jsonArray.toArray();
//					logger.info("数据数量="+objects.length);
//					
//					for (int j = 1; j <= objects.length; j++) {
//						a = JSONObject.fromObject(objects[j-1]);
//						bean = JSONObject.toBean(a);
//						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
//						String item1 = (String) morphDynaBean1.get("item1");
//						logger.info("item1="+item1);
//						String item2 = (String) morphDynaBean1.get("item2");
//						logger.info("item2="+item2);
//						String item5 = (String) morphDynaBean1.get("item5");
//						logger.info("item5="+item5);
//						String item6 = (String) morphDynaBean1.get("item6");
//						logger.info("item6="+item6);
//						
//						dataMap.put("v0"+j+"1",item1);
//						dataMap.put("v0"+j+"2",item2);
//						dataMap.put("v0"+j+"3",item5);
//						dataMap.put("v0"+j+"4",item6);
//					}
//					
//				}else if (type == 1) {
//					//获取数据
//					JSONArray jsonArray = a.getJSONArray("value");
//					Object[] objects = jsonArray.toArray();
//					logger.info("数据数量="+objects.length);
//					
//					for (int j = 1; j <= objects.length; j++) {
//						a = JSONObject.fromObject(objects[j-1]);
//						bean = JSONObject.toBean(a);
//						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
//						
//						for (int k = 1; k <= 2; k++) {
//							String item = (String) morphDynaBean1.get("item"+k);
//							logger.info("v1"+j+k+"="+item);
//							
//							dataMap.put("v1"+j+k,item);
//						}
//					}
//				}else if (type == 2) {
//					String item1 = (String) morphDynaBean.get("item1");
//					logger.info("item1="+item1);
//					
//					dataMap.put("v22",item1);
//				}else if (type == 3) {
//					
//				}
			}
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
		    
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_hzjxn.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 生成本底报告接口
	 * @return
	 */
	public String report_fs_bd_docx_old(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_bd_docx_old()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		dataMap.put("deviceName",taskDevices.get(i).getDevice().getDeviceName());//主要检测仪器
				    dataMap.put("deviceUnit",taskDevices.get(i).getDevice().getDeviceUnit());//检测仪器检定单位
				    dataMap.put("correctNum",taskDevices.get(i).getDevice().getCorrectNum());//检定证书编号
				    dataMap.put("correctTime",taskDevices.get(i).getDevice().getCorrectTime());//证书有效日期至
				}
			}
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					
					if (type == 1) {
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setAvg(item6);
						
						pointDatas.add(pointData);
					}
				}
			}
			//防止没有测点而文档无法打开
			if (objArray.length == 0) {
				ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
				pointData.setP("");
				pointData.setDepict("");
				pointData.setAvg("");
				
				pointDatas.add(pointData);
			}
			dataMap.put("pointDatas",pointDatas);//数据
		    
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_bd.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 生成职位检测报告接口
	 * @return
	 */
	@SuppressWarnings("static-access")
	public String report_ws_zw_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_ws_zw_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getInserttime())+"年"+
		    M_sdf.format(task.getInserttime())+"月"+
		    d_sdf.format(task.getInserttime())+"日";
			
			String employUnit = task.getEmployUnit();
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("checkUnitName",employUnit.substring(0,employUnit.lastIndexOf("/")));//受检单位名称
		    dataMap.put("checkUnitAddress",employUnit.substring(employUnit.lastIndexOf("/")+1));//受检单位地址
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("docNum",docNum);//报告编号
		    
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		  //解析测点和数据json
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			
			dataMap.put("size",objArray.length);//点数
			for (int i = 1; i <= objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i-1]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				String item1 = (String) morphDynaBean.get("item1");
				logger.info("检测编号="+item1);
				String item3 = (String) morphDynaBean.get("item3");
				logger.info("检测地点="+item3);
				String item5 = (String) morphDynaBean.get("item5");
				logger.info("脉冲峰值="+item5);
				double item7 = Double.parseDouble((String) morphDynaBean.get("item7"));
				logger.info("接触时间="+item7);
				
				String[] values = new String[1];
				values[0] = item5;
				
				double sd = Math.log10(Math.pow(10, (((Math.log10(item7/8)*10)+Double.parseDouble(item5))*0.1))/5)*10;
				float f = CalculateUtil.get(values,String.valueOf(sd));
				logger.info("LEX,W值="+f);

				String it = "";
				if(f % 1 == 0){// 是这个整数，小数点后面是0
					it = (int)f+"";
				}else{
					it = f+"";
				}
				
				ROMS_SZ_POINTDATA pointDate = new ROMS_SZ_POINTDATA();
				pointDate.setItem1(item1);
				pointDate.setItem2(item3);
				pointDate.setItem3(item5);
				pointDate.setItem4(item7+"");
				pointDate.setItem5(it);
				pointDate.setItem6("85");
				
				if (f > 85) {
					pointDate.setItem7("不符合");
				}else{
					pointDate.setItem7("符合");
				}
				
				
				pointDatas.add(pointDate);
			}
			dataMap.put("pointDatas",pointDatas);//数据
//			logger.info("====="+JSONObject.fromObject(dataMap));
		    
			String pas = ServletActionContext.getServletContext().getRealPath(
			"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record","");
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
	
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/ws_zw.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	
	
	/*************新的报告生成接口**************/
	
	/**
	 * 医用放射牙科机
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	@SuppressWarnings("deprecation")
	public String report_fs_ykj_fh_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ykj_fh_docx()函数");
		
		String docUrl = "";
		String white = "/staffImg/white.png";
		int pass = 0;//用于结论是否符合
		String[] isNo = new String[200];//不合格的项目
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
		    //查询人员
		    String staffName = "";
		    String where1 = "";
		    int ass = 0;
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
//			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
//					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
//							"task.createtime LIKE '%"+yMd+"%' AND " +
//							"deviceType.deviceMain='5'";
//			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
//			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("staffName",staffName);//检测人员名字
//		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("testingWay",task.getTestingProject());//检测项目
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    
		  //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = task.getStandard();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
//			//补空值
//			if (str.length == 0) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard("");
//				standards.add(standard);
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
			//根据设备用途来选着不同的模板
			String ftl = "";
			String direction1 = "";
			String direction2 = "";
			int as = 0;//1代表一个出束，2代表两个出束
			String purpose = task.getItem2();//设备用途
			if (purpose.indexOf("口内牙片摄影") != -1) {
				ftl = "/fs_ykj_fh1.ftl";
				as = 1;
				dataMap.put("purpose1","口内牙片摄影");
				dataMap.put("purpose2","");
				
			}else if (purpose.indexOf("头颅摄影") != -1 && purpose.indexOf("全景扫描") != -1) {
				ftl = "/fs_ykj_fh2.ftl";
				as = 2;
				direction1 = task.getItem6();
				direction2 = task.getItem7();
				dataMap.put("purpose1","头颅摄影、全景扫描");
				dataMap.put("purpose2","头颅摄影");
				dataMap.put("purpose3","全景扫描");
				
				
			}else if (purpose.indexOf("头颅摄影") != -1 && purpose.indexOf("立位/站位口腔三维扫描") != -1) {
				ftl = "/fs_ykj_fh2.ftl";
				as = 2;
				direction1 = task.getItem6();
				direction2 = task.getItem8();
				dataMap.put("purpose1","头颅摄影、立位/站位口腔三维扫描");
				dataMap.put("purpose2","头颅摄影");
				dataMap.put("purpose3","立位/站位口腔三维扫描");
				
			}else if (purpose.indexOf("头颅摄影") != -1 && purpose.indexOf("卧位口腔三维扫描") != -1) {
				ftl = "/fs_ykj_fh2.ftl";
				as = 2;
				direction1 = task.getItem6();   
				direction2 = task.getItem9();
				dataMap.put("purpose1","头颅摄影、卧位口腔三维扫描");
				dataMap.put("purpose2","头颅摄影");
				dataMap.put("purpose3","卧位口腔三维扫描");
			}else if (purpose.indexOf("立位/站位口腔三维扫描") != -1 && purpose.indexOf("卧位口腔三维扫描") != -1) {
				ftl = "/fs_ykj_fh2.ftl";
				as = 2;
				direction1 = task.getItem8();
				direction2 = task.getItem9();
				dataMap.put("purpose1","立位/站位口腔三维扫描、卧位口腔三维扫描");
				dataMap.put("purpose2","立位/站位口腔三维扫描");
				dataMap.put("purpose3","卧位口腔三维扫描");
			}else if (purpose.indexOf("全景扫描") != -1) {
				ftl = "/fs_ykj_fh1.ftl";
				as = 1;
				dataMap.put("purpose1","全景扫描");
				dataMap.put("purpose2","");
				
			}else if (purpose.indexOf("立位/站位口腔三维扫描") != -1) {
				ftl = "/fs_ykj_fh1.ftl";
				as = 1;
				dataMap.put("purpose1","立位/站位口腔三维扫描");
				dataMap.put("purpose2","");
				
			}else if (purpose.indexOf("卧位口腔三维扫描") != -1) {
				ftl = "/fs_ykj_fh1.ftl";
				as = 1;
				dataMap.put("purpose1","卧位口腔三维扫描");
				dataMap.put("purpose2","");
				
			}
			dataMap.put("direction1", direction1);
			dataMap.put("direction2", direction2);
			
		    //仪器
			ROMS_SZ_DEVICE device = null;
			ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    
		    //没有仪器的时候补空值
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    dataMap.put("deviceLower","");//检测仪器探测下限
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
//	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceNum());//主要检测仪器
	    		dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
			    dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
			    
			    if (task.getTestingProject().indexOf("X") != -1 && task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
			    	
			    	correctNum = new ROMS_SZ_DEVICEDATA();
			    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("X") != -1) {
			    	correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else{
					correctNum.setCorrectNum("");
			    	correctNums.add(correctNum);
				}
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    //添加备注信息
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		    note.setNote((notes.size()+1)+".检测结果均包含本底值；");
		    notes.add(note);
		    
		    note = new ROMS_SZ_POINTDATA();
		    note.setNote((notes.size()+1)+"."+task.getOther()+"；");
		    notes.add(note);
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			
			String pieces = "";
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				String locationType = (String) morphDynaBean.get("locationType");
				logger.info("出束模式/射线照射方向="+locationType);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item7)) {
						parseDouble1 = Double.parseDouble(item7);
					}
					//判断是否结果是否符合
					if (parseDouble1 > 2.5) {
						pass = 1;
						isNo[j] = item2;
					}
					
					//0是本底
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("range",item6+"~"+item7+"μSv/h");//范围（最小值+最大值）
						dataMap.put("b_avg",item8+"±"+item9+"μSv/h");//平均值
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setDocv(item7);
						
						//判断as来插值
					    if (as == 1) {
					    	pointDatas1.add(pointData);
					    	
					    	//规定pointDatas大小等于***就放入另外一个points
							if (pointDatas1.size() == 16) {
								pointData = new ROMS_SZ_POINTDATA();
								if (locationType.indexOf("口内牙片摄影") != -1) {
									pointData.setItem1(locationType.substring(6));
								}else if (locationType.indexOf("三维扫描") != -1) {
									pointData.setItem1(locationType.substring(locationType.indexOf("三维扫描")+4,locationType.length()));
								}else{
									pointData.setItem1(locationType);
								}
								pointData.setItem2("5."+(pointDatas.size()+1)+locationType);
								pointData.setPointDatas(pointDatas1);
								pointDatas.add(pointData);
								
								//把pointDatas重新置空
								pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
							}else if (j == objects.length-1) {
								pointData = new ROMS_SZ_POINTDATA();
								if (locationType.indexOf("口内牙片摄影") != -1) {
									pointData.setItem1(locationType.substring(6));
								}else if (locationType.indexOf("三维扫描") != -1) {
									pointData.setItem1(locationType.substring(locationType.indexOf("三维扫描")+4,locationType.length()));
								}else{
									pointData.setItem1(locationType);
								}
								pointData.setItem2("5."+(pointDatas.size()+1)+locationType);
								pointData.setPointDatas(pointDatas1);
								pointDatas.add(pointData);
							}
						}else{
							//通过判断来吧两个不同的出束模式放到不同的list里面
							if (locationType.indexOf("立位/站位口腔三维扫描") != -1) {
								pointDatas2.add(pointData);
							}else{
								pointDatas3.add(pointData);
							}
						}
					}
				}
				
				//补空值
				if (objects.length == 0) {
					//0是本底
					if (type == 0) {
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setDocv("");
						pointDatas1.add(pointData);
						
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setItem1("");
						pointData.setItem2("5.");
						pointData.setPointDatas(pointDatas1);
						pointDatas.add(pointData);
					}
				}
			}
			
			//筛选两个list值
			int size = 0;
			//判断两种出束模式才进
			if (as == 2) {
				System.out.println(pointDatas3.size()+"===="+pointDatas2.size());
				//判断其中一个list可能没值
				if (pointDatas2.size() == 0) {
					//卧位
					for (int j = 0; j < pointDatas3.size(); j++) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(pointDatas3.get(j).getP());
						pointData.setDepict(pointDatas3.get(j).getDepict());
						pointData.setDocv("");
						pointData.setDocv1(pointDatas3.get(j).getDocv());
						pointDatas4.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas4.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == pointDatas3.size()-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
						}
					}
				}else if (pointDatas3.size() == 0) {
					//立位
					for (int j = 0; j < pointDatas2.size(); j++) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(pointDatas2.get(j).getP());
						pointData.setDepict(pointDatas2.get(j).getDepict());
						pointData.setDocv(pointDatas2.get(j).getDocv());
						pointData.setDocv1("");
						pointDatas4.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas4.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == pointDatas2.size()-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
						}
					}
				}else{
					if (pointDatas2.size() > pointDatas3.size()) {
						size = pointDatas3.size();
					}else{
						size = pointDatas2.size();
					}
					for (int j = 0; j < size; j++) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(pointDatas2.get(j).getP());
						pointData.setDepict(pointDatas2.get(j).getDepict());
						pointData.setDocv(pointDatas2.get(j).getDocv());
						pointData.setDocv1(pointDatas3.get(j).getDocv());
						pointDatas4.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas4.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == size-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
						}
					}
				}
			}
			
		  //循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int az = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (az != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					az ++;
				}
			}
		    //置空测试
		    dataMap.put("item1","");
		    dataMap.put("item2","");
		    dataMap.put("p","");
		    dataMap.put("depict","");
		    dataMap.put("docv","");
		    dataMap.put("docv1","");
		    
		    //判断结论
		    if (pass == 1) {
		    	dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外"+isNoName+"的辐射水平大于2.5μSv/h，不符合标准要求，其余所检位置辐射水平均不大于2.5μSv/h，符合标准要求。");//结论
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外的辐射水平均不大于2.5μSv/h，符合标准要求。");//结论
			}
		    dataMap.put("pieces",pieces);//单位
		    
		  //获取最后一位替换成句号
		    notes.get(notes.size()-1).setNote(notes.get(notes.size()-1).getNote().replace("；", "。"));
			dataMap.put("notes",notes);
			
			//判断是否有数据
			if (pointDatas.size() > 0) {
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				dataMap.put("item1",pointDatas.get(pointDatas.size()-1).getItem1());
			    dataMap.put("item2",pointDatas.get(pointDatas.size()-1).getItem2());
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("pointDatas",pointDatas);//数据1
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("pointDatas",pointDatas);//数据1
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 医用放射牙科机防护封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_ykj_fh_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ykj_fh_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectName","放射防护检测");//项目名称
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("monitorType","委托检测");//检测类别
		    
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_ykj_fh_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	
	/**
	 * 生成本底报告接口
	 * @return
	 */
	public String report_fs_bd_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_bd_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    
			SimpleDateFormat yMd_sdf= new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期   
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("objectWork",task.getObjectWork());//检测对象及工况
		    dataMap.put("staffName",staffName);//检测人
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String[] str = task.getStandard().substring(1, task.getStandard().length()).split("\\|");
			System.out.println("检测长度="+str.length);
			for (int i = 0; i < str.length; i++) {
				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
				standard.setStandard(str[i]);
				
				standards.add(standard);
			}
			dataMap.put("standards",standards);//检测依据
			
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
			    dataMap.put("correctNum","");//检定证书编号
			    dataMap.put("deviceLower","");//检测仪器探测下限 
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			    dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限 
			    
			    if (task.getTestingProject().indexOf("X") != -1 && task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
			    	
			    	correctNum = new ROMS_SZ_DEVICEDATA();
			    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
//			    	System.out.println("===1===");
				}else if (task.getTestingProject().indexOf("X") != -1) {
			    	correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
//			    	System.out.println("===2===");
				}else if (task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
//			    	System.out.println("===3===");
				}else{
					correctNum.setCorrectNum("");
			    	correctNums.add(correctNum);
				}
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    //检测现场信息里的备注
		    //备注
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		    note.setNote(task.getNote());
		    notes.add(note);
		    dataMap.put("notes",notes);
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    String pieces = "";
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				if (type == 1) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item2 = (String) morphDynaBean1.get("item2");
						logger.info("item2="+item2);
						String item3 = (String) morphDynaBean1.get("item3");
						logger.info("item3="+item3);
						String item7 = (String) morphDynaBean1.get("item7");
						logger.info("item7="+item7);
						String item8 = (String) morphDynaBean1.get("item8");
						logger.info("item8="+item8);
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("item9="+item9);
						String item11 = (String) morphDynaBean1.get("item11");
						logger.info("item11="+item11);
						pieces = (String) morphDynaBean1.get("pieces");
						logger.info("单位="+pieces);
						
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);
						pointData.setV2(item2);
						pointData.setV3(item3);
						pointData.setV4(item7+"～"+item8);
						pointData.setV5(item9);
						pointData.setV6(item11);
						
						pointDatas1.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas1.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == objects.length-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
						}
					}
					//防止没有测点而文档无法打开
					if (objArray.length == 0) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setV4("～");
						pointData.setV5("");
						pointData.setV6("");
						
						pointDatas1.add(pointData);
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas1);
						pointDatas.add(pointData);
					}
				}
			}
//		    for (int i = 0; i < 25; i++) {
//		    	pointData = new ROMS_SZ_POINTDATA();
//		    	pointData.setV1("11");
//				pointData.setV2("22");
//				pointData.setV3("33");
//				pointData.setV4("～");
//				pointData.setV5("44");
//				pointData.setV6("55");
//				pointDatas.add(pointData);
//			}
			dataMap.put("note","");
			dataMap.put("v1","");
			dataMap.put("v2","");
			dataMap.put("v3","");
			dataMap.put("v4","");
			dataMap.put("v5","");
			dataMap.put("v6","");
			
			logger.info("changdu="+pointDatas.size());
			//判断是否有数据
			if (pointDatas.size() > 0) {
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("pointDatas",pointDatas);//数据1
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("pointDatas",pointDatas);//数据1  
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_bd.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 医用放射本底封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_bd_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_bd_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","环境地表γ辐射剂量率");//项目名称
		    dataMap.put("objectWork",task.getObjectWork());//检测对象及工况
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("monitorType","委托检测");//检测类别
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_bd_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	
	/**
	 * 生成摄影机报告接口
	 * @return
	 */
	@SuppressWarnings({ "deprecation", "static-access" })
	public String report_fs_syj_fh_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_syj_fh_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
		String[] isNo = new String[200];//不合格的项目
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat yMd_sdf= new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
//			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
//					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
//							"task.createtime LIKE '%"+yMd+"%' AND " +
//							"deviceType.deviceMain='5'";
//			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("purpose",task.getItem2());//设备用途
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = task.getStandard();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
//			//补空值
//			if (str.length == 0) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard("");
//				standards.add(standard);
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    dataMap.put("deviceLower","");//检测仪器探测下限 
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			    dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
			    
			    if (task.getTestingProject().indexOf("X") != -1 && task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
			    	
			    	correctNum = new ROMS_SZ_DEVICEDATA();
			    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("X") != -1) {
			    	correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else{
					correctNum.setCorrectNum("");
			    	correctNums.add(correctNum);
				}
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
//		    //设备用途
//		    String item22 = task.getItem2();
//		    String purpose = "";
//		    if (item22.substring(0, 1).equals("1")) {
//				purpose += "  DR摄影";
//			}
//			if (item22.substring(1, 2).equals("1")) {
//				purpose += "  CR摄影";
//			}
//			if (item22.substring(2, 3).equals("1")) {
//				purpose += "  屏片摄影";
//			}
//		    dataMap.put("purpose",purpose);
		    
		    //检测现场信息里的备注
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		   
		    note.setNote((notes.size()+1)+".检测结果均包含本底值；");
		    notes.add(note);
		    //摄影模式
		    note = new ROMS_SZ_POINTDATA();
		    String item33 = task.getItem3();
		    if (item33.substring(0, 1).equals("1") && item33.substring(1, 2).equals("1")) {
		    	note.setNote((notes.size()+1)+".场所内设备具有卧位摄影和立位摄影模式，采用卧位摄影模式检测时照射野调至最大，立位摄影模式检测时照射野调至完全覆盖立位探测器；");
		    	notes.add(note);
			}else if (item33.substring(0, 1).equals("1") && item33.substring(1, 2).equals("0")) {
				note.setNote((notes.size()+1)+".场所内设备具有立位摄影模式，立位摄影模式检测时照射野调至完全覆盖立位探测器；");
				notes.add(note);
			}else if (item33.substring(0, 1).equals("0") && item33.substring(1, 2).equals("1")) {
				note.setNote((notes.size()+1)+".场所内设备具有卧位摄影模式，采用卧位摄影模式检测时照射野调至最大；");
				notes.add(note);
			}
		    
		    Double yearTime = 0d;
		    int yearFre = 0;
		    if (!task.getShooting1().equals("") && !task.getWeekWork().equals("") && !task.getExposureTimeRange1().equals("")) {
		    	//yearTime = ((((Double.parseDouble(task.getExposureTimeRange1())*365)/1000)/60)/60)/60;
		    	yearTime = ((((Double.parseDouble(task.getShooting1())*Double.parseDouble(task.getWeekWork()))*50)*Double.parseDouble(task.getExposureTimeRange1()))/1000)/3600;
			}
		    if (!task.getShooting1().equals("") && !task.getWeekWork().equals("")) {
		    	yearFre = (Integer.parseInt(task.getShooting1())*Integer.parseInt(task.getWeekWork()))*50;
			}
		    BigDecimal db = new BigDecimal(yearTime);
//		    DecimalFormat df = new DecimalFormat("###############0.00#");
//	        String yearT = df.format(db.toPlainString());
		    logger.info("======="+db.toPlainString());
		    String yearT = String.format("%.2f",Float.parseFloat(db.toPlainString()));
	        
		    note = new ROMS_SZ_POINTDATA();
		    note.setNote((notes.size()+1)+".委托方提供最大工作量：年最多曝光次数"+yearFre+"次、单次最长曝光时间"+task.getExposureTimeRange1()+"ms，计算得年最长曝光时间为"+yearT+"h；");
		    notes.add(note);
		    
		    if (!task.getNote().equals("") && !task.getNote().equals("/")) {
		    	 note = new ROMS_SZ_POINTDATA();
				    note.setNote((notes.size()+1)+"."+task.getNote()+"；");
				    notes.add(note);
			}
		    
		    //获取最后一位替换成句号
		    notes.get(notes.size()-1).setNote(notes.get(notes.size()-1).getNote().replace("；", "。"));
		    dataMap.put("notes",notes);//检测现场信息里的备注
		    
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    String pieces = "";
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				String location = (String) morphDynaBean.get("location");
				logger.info("射线照射方向="+location);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					
					
					if (type == 1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);
						pointData.setV2(item2);
						pointData.setV3(item7);
						pointData.setV4(item8);
						
						pointDatas1.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas1.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setItem1("5."+i+"射线照射方向"+location.substring(4, location.length())+"机房放射防护检测结果");
							pointData.setItem2(location.substring(0, 4));
							pointData.setItem3(location.substring(4, location.length()));
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == objects.length-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setItem1("5."+i+"射线照射方向"+location.substring(4, location.length())+"机房放射防护检测结果");
							pointData.setItem2(location.substring(0, 4));
							pointData.setItem3(location.substring(4, location.length()));
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
						}
						
						//判断是不是数字
						double parseDouble1 = 0d;
						if (NumberUtils.isNumber(item8)) {
							parseDouble1 = Double.parseDouble(item8);
						}
						//
						//判断是否结果是否符合
						if (parseDouble1 > 0.25) {
							pass = 1;
							isNo[j] = item2;
						}
					}else{
						dataMap.put("range",item6+"~"+item7+pieces);//范围（最小值+最大值）
						dataMap.put("avg",item8+"±"+item9+pieces);//平均值
					}
				}
				
				//防止没有测点而文档无法打开
				if (objects.length == 0) {
					if (type == 1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setV4("");
						
						pointDatas1.add(pointData);
					}else{
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("avg","±");//平均值
					}
				}
//				//循环往大集合里面插数据
//				if (type == 1) {
//					pointData = new ROMS_SZ_POINTDATA();
//					pointData.setItem1("5."+i+"射线照射方向"+locationType.substring(4, locationType.length())+"机房放射防护检测结果");
//					pointData.setItem2(locationType.substring(0, 4));
//					pointData.setItem3(locationType.substring(4, locationType.length()));
//					pointData.setPointDatas(pointDatas1);
//					pointDatas.add(pointData);
//				}
			}
			
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int az = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (az != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					az ++;
				}
			}
		    //判断结论
		    if (pass == 1) {
		    	dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外"+isNoName+"的辐射水平大于0.25mSv/a，不符合标准要求，其余所检位置辐射水平均不大于0.25mSv/a，符合标准要求。");//结论
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外的辐射水平均不大于0.25mSv/a，符合标准要求。");//结论
			}
			
//			ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
//			pointData.setV1("");
//			pointData.setV2("");
//			pointData.setV3("");
//			pointData.setV4("");
//			pointDatas.add(pointData);
//			dataMap.put("range","~");//范围（最小值+最大值）
//			dataMap.put("avg","±");//平均值
//			dataMap.put("standard","");
//			dataMap.put("item1","");
//			dataMap.put("item2","");
//			dataMap.put("item3","");
//			dataMap.put("v1","");
//			dataMap.put("v2","");
//			dataMap.put("v3","");
//			dataMap.put("v4","");
			
		  //判断是否有数据
			if (pointDatas.size() > 0) {
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				dataMap.put("item1",pointDatas.get(pointDatas.size()-1).getItem1());
			    dataMap.put("item2",pointDatas.get(pointDatas.size()-1).getItem2());
			    dataMap.put("item3",pointDatas.get(pointDatas.size()-1).getItem3());
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("pointDatas",pointDatas);//数据1
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("pointDatas",pointDatas);//数据1
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_syj_fh.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 摄影机报告封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_syj_fh_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_syj_fh_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","放射防护检测");//项目名称
		    dataMap.put("checkUnitName",task.getCheckUnitName());//委托单位
		    dataMap.put("monitorType","委托检测");//检测类别
		    dataMap.put("place",task.getPlace());//受检场所名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//场所内设备名称
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_syj_fh_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 生成乳腺DR报告接口
	 * @return
	 */
	@SuppressWarnings("deprecation")
	public String report_fs_rxdr_fh_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_rxdr_fh_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
		String[] isNo = new String[200];//不合格的项目
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat yMd_sdf= new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
//			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
//					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
//							"task.createtime LIKE '%"+yMd+"%' AND " +
//							"deviceType.deviceMain='5'";
//			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
//			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("conditions",task.getConditions());//检测条件
//		    dataMap.put("purpose","乳腺DR摄影");//设备用途
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = task.getStandard();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
//			//补空值
//			if (str.length == 0) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard("");
//				standards.add(standard);
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    dataMap.put("deviceLower","");//检测仪器探测下限 
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			    dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
			    
			    if (task.getTestingProject().indexOf("X") != -1 && task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
			    	
			    	correctNum = new ROMS_SZ_DEVICEDATA();
			    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("X") != -1) {
			    	correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else{
					correctNum.setCorrectNum("");
			    	correctNums.add(correctNum);
				}
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		  //检测现场信息里的备注
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		   
		    note.setNote("1.检测结果均包含本底值；");
		    notes.add(note);
		    
		    if (!task.getOther().equals("")) {
		    	note = new ROMS_SZ_POINTDATA();
			    note.setNote("2."+task.getOther()+"；");
			    notes.add(note);
			}
		    
		  //获取最后一位替换成句号
		    notes.get(notes.size()-1).setNote(notes.get(notes.size()-1).getNote().replace("；", "。"));
		    dataMap.put("notes",notes);//检测现场信息里的备注
		    
		    //设备用途
		    String item22 = task.getItem2();
		    String purpose = "";
		    if (item22.substring(0, 1).equals("1")) {
				purpose += "  CT扫描";
			}
			if (item22.substring(1, 2).equals("1")) {
				purpose += "  直接透视";
			}
			if (item22.substring(2, 3).equals("1")) {
				purpose += "  间接透视";
			}
			if (item22.substring(3, 4).equals("1")) {
				purpose += "  乳腺DR摄影";
			}
			if (item22.substring(4, 5).equals("1")) {
				purpose += "  乳腺CR摄影";
			}
			if (item22.substring(5, 6).equals("1")) {
				purpose += "  乳腺";
			}
			if (item22.substring(6, 7).equals("1")) {
				purpose += "  局部骨密度检查";
			}
			if (item22.substring(7, 8).equals("1")) {
				purpose += "  全身骨密度仪检查";
			}
			if (item22.substring(8, 9).equals("1")) {
				purpose += "  碎石定位";
			}
			if (item22.substring(9, 10).equals("1")) {
				purpose += "  "+task.getItem3();
			}
		    dataMap.put("purpose",purpose);
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    String pieces = "";
		    String data = task.getData();
		    System.out.println("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				String locationType = (String) morphDynaBean.get("locationType");
				logger.info("射线照射方向="+locationType);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 1) {
//						dataMap.put("dire",locationType.substring(locationType.indexOf(":")+1, locationType.length()));//射线照射方向
						
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);
						pointData.setV2(item2);
						pointData.setV3(item7);
						pointDatas1.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas1.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setItem1(locationType.substring(locationType.indexOf(":")+1, locationType.length()));
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == objects.length-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setItem1(locationType.substring(locationType.indexOf(":")+1, locationType.length()));
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
						}
						
						//判断是不是数字
						double parseDouble1 = 0d;
						if (NumberUtils.isNumber(item7)) {
							parseDouble1 = Double.parseDouble(item7);
						}
						//
						//判断是否结果是否符合
						if (parseDouble1 > 2.5) {
							pass = 1;
							isNo[j] = item2;
						}
					}else{
						dataMap.put("range",item6+"~"+item7+pieces);//范围（最小值+最大值）
						dataMap.put("avg",item8+"±"+item9+pieces);//平均值
					}
				}
				
				//防止没有测点而文档无法打开
				if (objects.length == 0) {
					if (type == 1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						
						pointDatas.add(pointData);
					}else{
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("avg","±");//平均值
					}
				}
			}
			
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int az = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (az != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					az ++;
				}
			}
		    //判断结论
		    if (pass == 1) {
		    	dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外"+isNoName+"的辐射水平大于2.5μSv/h，不符合标准要求，其余所检位置辐射水平均不大于2.5μSv/h，符合标准要求。");//结论
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外的辐射水平均不大于2.5μSv/h，符合标准要求。");//结论
			}
//			pointData = new ROMS_SZ_POINTDATA();
//			pointData.setV1("");
//			pointData.setV2("");
//			pointData.setV3("");
//			pointDatas.add(pointData);
//			dataMap.put("range","~");//范围（最小值+最大值）
//			dataMap.put("avg","±");//平均值
//			dataMap.put("dire","");//射线照射方向
			dataMap.put("pieces",pieces);//单位
			//判断是否有数据
			if (pointDatas.size() > 0) {
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				dataMap.put("item1",pointDatas.get(pointDatas.size()-1).getItem1());
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("pointDatas",pointDatas);//数据1
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("pointDatas",pointDatas);//数据1
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_rxdr_fh.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 乳腺DR报告封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_rxdr_fh_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_rxdr_fh_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","放射防护检测");//项目名称
		    dataMap.put("checkUnitName",task.getCheckUnitName());//委托单位
		    dataMap.put("monitorType","委托检测");//检测类别
		    dataMap.put("place",task.getPlace());//受检场所名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//场所内设备名称
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_rxdr_fh_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	
	/**
	 * 生成透视机报告接口
	 * @return
	 */
	public String report_fs_tsj_fh_docx_old(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_tsj_fh_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
		String[] isNo = new String[200];//不合格的项目
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
		    
			SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			
			//查询对应报告编号
			String docNum1 = "";
			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
							"task.createtime LIKE '%"+yMd+"%' AND " +
							"deviceType.deviceMain='5'";
			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区工业路第五工业区南一巷9号");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject","详见表6");//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV"+task.getNominalCapacity1());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("conditions",task.getConditions());//检测条件
//		    dataMap.put("purpose",task.getItem2());//设备用途
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = task.getStandard();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
//			//补空值
//			if (str.length == 0) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard("");
//				standards.add(standard);
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    dataMap.put("deviceLower","");//检测仪器探测下限 
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			    dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
			    
			    if (task.getTestingProject().indexOf("X") != -1 && task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
			    	
			    	correctNum = new ROMS_SZ_DEVICEDATA();
			    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("X") != -1) {
			    	correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else{
					correctNum.setCorrectNum("");
			    	correctNums.add(correctNum);
				}
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    //设备用途
		    String item22 = task.getItem2();
		    String purpose = "";
		    if (item22.substring(0, 1).equals("1")) {
				purpose += "  CT扫描";
			}
			if (item22.substring(1, 2).equals("1")) {
				purpose += "  直接透视";
			}
			if (item22.substring(2, 3).equals("1")) {
				purpose += "  间接透视";
			}
			if (item22.substring(3, 4).equals("1")) {
				purpose += "  乳腺DR摄影";
			}
			if (item22.substring(4, 5).equals("1")) {
				purpose += "  乳腺CR摄影";
			}
			if (item22.substring(5, 6).equals("1")) {
				purpose += "  乳腺";
			}
			if (item22.substring(6, 7).equals("1")) {
				purpose += "  局部骨密度检查";
			}
			if (item22.substring(7, 8).equals("1")) {
				purpose += "  全身骨密度仪检查";
			}
			if (item22.substring(8, 9).equals("1")) {
				purpose += "  碎石定位";
			}
			if (item22.substring(9, 10).equals("1")) {
				purpose += "  "+task.getItem3();
			}
		    dataMap.put("purpose",purpose);
		    
		    //检测现场信息里的备注
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		   
		    note.setNote("1.检测结果均包含本底值；");
		    notes.add(note);
		    
		    note = new ROMS_SZ_POINTDATA();
		    note.setNote("2."+task.getOther()+"。");
		    notes.add(note);
		    
		    
		    
		    dataMap.put("notes",notes);
		    
		    int as = 1;//用于区分几个模式
		    String ftl = "/fs_tsj_fh1.ftl";
		    String item44 = task.getItem4();
		    if (item44.substring(0, 1).equals("1") && item44.substring(1, 2).equals("1")) {
			    ftl = "/fs_tsj_fh2.ftl";
			    as = 2;
			}else{
				note = new ROMS_SZ_POINTDATA();
			    note.setNote("3.设备无头颅摄影模式。");
			    notes.add(note);
			}
		    dataMap.put("notes",notes);//检测现场信息里的备注
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    //先置空，有值就替换
		    dataMap.put("item1","");
			dataMap.put("item2","");
			dataMap.put("item3","");
			dataMap.put("item4","");
			
		    String pieces = "μSv/h";
		    String data = task.getData();
		    System.out.println("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				String locationType = (String) morphDynaBean.get("locationType");
				logger.info("射线照射方向="+locationType);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);
						pointData.setV2(item2);
						pointData.setV3(item7);
						
						//判断是不是数字
						double parseDouble1 = 0d;
						if (NumberUtils.isNumber(item7)) {
							parseDouble1 = Double.parseDouble(item7);
						}
						//
						//判断是否结果是否符合
						if (parseDouble1 > 2.5) {
							pass = 1;
							isNo[j] = item2;
						}
						
						//只有一种模式的情况下
						if (as == 1) {
							if (!locationType.equals("")) {
								dataMap.put("item1",locationType.substring(0, locationType.indexOf(":")));
								dataMap.put("item2",locationType.substring(locationType.indexOf(":")+1, locationType.length()));
							}else{
								dataMap.put("item1","");
								dataMap.put("item2","");
							}
							pointDatas1.add(pointData);
							
							
							if (pointDatas1.size()==16) {
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setPointDatas(pointDatas1);
								pointDatas.add(pointData);
							}else if(j==objects.length-1){
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setPointDatas(pointDatas1);
								pointDatas.add(pointData);
							}
						}else{
							if (!locationType.equals("")) {
								String substring = locationType.substring(0, locationType.indexOf(":"));
								if (substring.equals("立位透视")) {
									dataMap.put("item1",substring);
									dataMap.put("item2",locationType.substring(locationType.indexOf(":")+1, locationType.length()));
									
									pointDatas1.add(pointData);
								}else{
									dataMap.put("item3",substring);
									dataMap.put("item4",locationType.substring(locationType.indexOf(":")+1, locationType.length()));
									
									pointDatas2.add(pointData);
								}
							}
						}
					}else{
						dataMap.put("range",item6+"~"+item7+pieces);//范围（最小值+最大值）
						dataMap.put("avg",item8+"±"+item9+pieces);//平均值
					}
				}
				
				//防止没有测点而文档无法打开
				if (objects.length == 0) {
					if (type == 1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						
						//只有一种模式的情况下
						if (as == 1) {
							pointDatas.add(pointData);
						}
					}else{
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("avg","±");//平均值
					}
				}
			}
			
			//比对两个list大小，用最小的list来循环
			int size = 0;
			if (pointDatas1.size() > pointDatas2.size()) {
				size = pointDatas2.size();
			}else{
				size = pointDatas1.size();
			}
			for (int i = 0; i < size; i++) {
				pointData = new ROMS_SZ_POINTDATA();
				pointData.setV1(pointDatas1.get(i).getV1());
				pointData.setV2(pointDatas1.get(i).getV2());
				pointData.setV3(pointDatas1.get(i).getV3());//立位报告值
				pointData.setV4(pointDatas2.get(i).getV3());//卧位报告值
				pointDatas3.add(pointData);
				
				if (pointDatas3.size()==16) {
					pointData = new ROMS_SZ_POINTDATA();
					pointData.setPointDatas(pointDatas3);
					pointDatas.add(pointData);
				}else if(i==size-1){
					pointData = new ROMS_SZ_POINTDATA();
					pointData.setPointDatas(pointDatas3);
					pointDatas.add(pointData);
				}
				
				
			}
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int az = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (az != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					az ++;
				}
			}
		    //判断结论
		    if (pass == 1) {
		    	dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外"+isNoName+"的辐射水平大于2.5μSv/h，不符合标准要求，其余所检位置辐射水平均不大于2.5μSv/h，符合标准要求。");//结论
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外的辐射水平均不大于2.5μSv/h，符合标准要求。");//结论
			}
//			pointData = new ROMS_SZ_POINTDATA();
//			pointData.setV1("");
//			pointData.setV2("");
//			pointData.setV3("");
//			pointDatas.add(pointData);
//			dataMap.put("range","~");//范围（最小值+最大值）
//			dataMap.put("avg","±");//平均值
//			dataMap.put("item1","");
//			dataMap.put("item2","");
			dataMap.put("pieces",pieces);//单位
//			dataMap.put("pointDatas",pointDatas);//数据
			
			//判断是否有数据
			if (pointDatas.size() > 0) {
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("pointDatas",pointDatas);//数据1
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("pointDatas",pointDatas);//数据1
			}
			
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 生成透视机报告接口
	 * @return
	 */
	public String report_fs_tsj_fh_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_tsj_fh_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
		String[] isNo = new String[200];//不合格的项目
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
		    
			SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			
			//查询对应报告编号
			String docNum1 = "";
			/*String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
							"task.createtime LIKE '%"+yMd+"%' AND " +
							"deviceType.deviceMain='5'";
			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			
			//判断是否有对应的性能任务
			if (queryOtherTask != null) {
				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
				//判断对应的任务是否生成报告
				if (doc != null) {
					docNum1 = doc.getDocNum();
				}
			}*/
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject","详见表6");//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("conditions",task.getConditions());//检测条件
//		    dataMap.put("purpose",task.getItem2());//设备用途
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = task.getStandard();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
//			//补空值
//			if (str.length == 0) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard("");
//				standards.add(standard);
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    dataMap.put("deviceLower","");//检测仪器探测下限 
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			    dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
			    
			    if (task.getTestingProject().indexOf("X") != -1 && task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
			    	
			    	correctNum = new ROMS_SZ_DEVICEDATA();
			    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("X") != -1) {
			    	correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else{
					correctNum.setCorrectNum("");
			    	correctNums.add(correctNum);
				}
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    //设备用途
		    String item22 = task.getItem2();
		    String purpose = "";
		    if (item22.substring(0, 1).equals("1")) {
				purpose += "  CT扫描";
			}
			if (item22.substring(1, 2).equals("1")) {
				purpose += "  直接透视";
			}
			if (item22.substring(2, 3).equals("1")) {
				purpose += "  间接透视";
			}
			if (item22.substring(3, 4).equals("1")) {
				purpose += "  乳腺DR摄影";
			}
			if (item22.substring(4, 5).equals("1")) {
				purpose += "  乳腺CR摄影";
			}
			if (item22.substring(5, 6).equals("1")) {
				purpose += "  乳腺";
			}
			if (item22.substring(6, 7).equals("1")) {
				purpose += "  局部骨密度检查";
			}
			if (item22.substring(7, 8).equals("1")) {
				purpose += "  全身骨密度仪检查";
			}
			if (item22.substring(8, 9).equals("1")) {
				purpose += "  碎石定位";
			}
			if (item22.substring(9, 10).equals("1")) {
				purpose += "  "+task.getItem3();
			}
		    dataMap.put("purpose",purpose);
		    
		    String fx = "";
		    String item44 = task.getItem4();
		    if (item44.substring(0, 1).equals("1")) {
		    	fx += "立位透视、";
			}
		    if (item44.substring(1, 2).equals("1")) {
		    	fx += "卧位透视、";
			}
		    if (item44.substring(2, 3).equals("1")) {
		    	fx += "乳腺机、";
			}
		    if (item44.substring(3, 4).equals("1")) {
		    	fx += "骨密度仪、";
			}
		    if (item44.substring(4, 5).equals("1")) {
		    	fx += "碎石机、";
			}
		    
		    //检测现场信息里的备注
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		    
		    note.setNote((notes.size()+1)+".检测结果均包含本底值；");
		    notes.add(note);
		    
		    note = new ROMS_SZ_POINTDATA();
		    note.setNote((notes.size()+1)+".仅用于"+(fx.length()-1)+"；");
		    notes.add(note);
		    
		    if (!task.getOther().equals("")) {
		    	note = new ROMS_SZ_POINTDATA();
			    note.setNote((notes.size()+1)+"."+task.getOther()+"；");
			    notes.add(note);
			}
		    
		    
		    int as = 1;//用于区分几个模式
		    String ftl = "/fs_tsj_fh1.ftl";
		    if (item44.substring(0, 1).equals("1") && item44.substring(1, 2).equals("1")) {
			    ftl = "/fs_tsj_fh2.ftl";
			    as = 2;
			}
		    
		    //获取最后一位替换成句号
		    notes.get(notes.size()-1).setNote(notes.get(notes.size()-1).getNote().replace("；", "。"));
		    dataMap.put("notes",notes);//检测现场信息里的备注
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();

		    
		    //先置空，有值就替换
		    dataMap.put("item1","");
			dataMap.put("item2","");
			dataMap.put("item3","");
			dataMap.put("item4","");   
			
		    String pieces = "μSv/h";
		    String data = task.getData();
		    System.out.println("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));  
				logger.info("0是本底测点，1是测点="+type);
				String locationType = (String) morphDynaBean.get("locationType");
				logger.info("射线照射方向="+locationType);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				//置空数据
             	pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);   
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;  
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					
					//判断有单位才赋值
					if (pieces1 != null && !pieces1.equals("")) {
						pieces = pieces1;
					}
					
					if (type == 1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);
						pointData.setV2(item2);
						pointData.setV3(item7);
						
						//判断是不是数字
						double parseDouble1 = 0d;//报告值
						if (NumberUtils.isNumber(item7)) {
							parseDouble1 = Double.parseDouble(item7);
						}
//						double parseDouble2 = 0d;//标准差
//						if (NumberUtils.isNumber(item8)) {
//							parseDouble2 = Double.parseDouble(item8);
//						}
						
						//判断是否结果是否符合
						if (parseDouble1 > 2.5) {
							pass = 1;
							isNo[j] = item2;
						}
						
						//只有一种模式的情况下
						if (as == 1) {
							if (!locationType.equals("")) {
								dataMap.put("item1",locationType.substring(0, locationType.indexOf(":")));
								dataMap.put("item2",locationType.substring(locationType.indexOf(":")+1, locationType.length()));
							}else{
								dataMap.put("item1","");
								dataMap.put("item2","");
							}
							pointDatas1.add(pointData);
							
							
							if (pointDatas1.size()==16) {
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setPointDatas(pointDatas1);
								pointDatas.add(pointData);
								
								//置空数据     
					            pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
							}else if(j==objects.length-1){
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setPointDatas(pointDatas1);
								pointDatas.add(pointData);
							}
						}else{
							if (!locationType.equals("")) {
								String substring = locationType.substring(0, locationType.indexOf(":"));
								if (substring.equals("立位透视")) {
									dataMap.put("item1",substring);
									dataMap.put("item2",locationType.substring(locationType.indexOf(":")+1, locationType.length()));
									
									pointDatas2.add(pointData);
								}else{
									dataMap.put("item3",substring);
									dataMap.put("item4",locationType.substring(locationType.indexOf(":")+1, locationType.length()));
									
									pointDatas3.add(pointData);
								}
							}
						}
					}else{
						dataMap.put("range",item6+"~"+item7+pieces);//范围（最小值+最大值）
						dataMap.put("avg",item8+"±"+item9+pieces);//平均值
					}
				}
				
				//防止没有测点而文档无法打开
				if (objects.length == 0) {
					if (type == 1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						
						//只有一种模式的情况下
						if (as == 1) {
							pointDatas1.add(pointData);
							
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
						}
					}else{
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("avg","±");//平均值
					}
				}
			}
			
			//比对两个list大小，用最小的list来循环   
			int size = 0;
			
			//只有二种模式的情况下
			if (as == 2) {    
				if (pointDatas2.size() == 0) {
					for (int i = 0; i < pointDatas3.size(); i++) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(pointDatas3.get(i).getV1());
						pointData.setV2(pointDatas3.get(i).getV2());
						pointData.setV3("");//立位报告值
						pointData.setV4(pointDatas3.get(i).getV3());//卧位报告值
						pointDatas4.add(pointData);
						
						if (pointDatas4.size()==16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
						     
							//置空数据     
				            pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if(i == pointDatas3.size()-1){
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
						}
					}
				}else if(pointDatas3.size() == 0){
					for (int i = 0; i < pointDatas2.size(); i++) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(pointDatas2.get(i).getV1());
						pointData.setV2(pointDatas2.get(i).getV2());
						pointData.setV3(pointDatas2.get(i).getV3());//立位报告值
						pointData.setV4("");//卧位报告值
						pointDatas4.add(pointData);
						
						if (pointDatas4.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
					
							//置空数据
				            pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if(i == pointDatas2.size()-1){
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
						}
					}
				}else{
					if (pointDatas2.size() > pointDatas3.size()) {
						size = pointDatas3.size();
					}else{
						size = pointDatas2.size();
						
					}
					for (int f = 0; f < size; f++) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(pointDatas2.get(f).getV1());
						pointData.setV2(pointDatas2.get(f).getV2());
						pointData.setV3(pointDatas2.get(f).getV3());//立位报告值
						pointData.setV4(pointDatas3.get(f).getV3());//卧位报告值
						pointDatas4.add(pointData);
						
						if (pointDatas4.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
							
							//置空数据
				            pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if(f == size-1){
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
						}
					}
				}
			}
			
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int az = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (az != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					az ++;
				}
			}
		    
		    dataMap.put("v1",""); 
		    dataMap.put("v2","");
		    dataMap.put("v3","");
		    dataMap.put("v4","");
		    dataMap.put("standard","");
		    dataMap.put("correctNum",""); 
		    dataMap.put("note","");
//		    dataMap.put("pieces","");
		      
		    
		    //判断结论
		    if (pass == 1) {
		    	dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外"+isNoName+"的辐射水平大于2.5μSv/h，不符合标准要求，其余所检位置辐射水平均不大于2.5μSv/h，符合标准要求。");//结论
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外的辐射水平均不大于2.5μSv/h，符合标准要求。");//结论
			}
//			pointData = new ROMS_SZ_POINTDATA();
//			pointData.setV1("");
//			pointData.setV2("");
//			pointData.setV3("");
//			
//			pointData.setPointDatas(pointDatas3);
//			
//			pointDatas.add(pointData);
//			dataMap.put("range","~");//范围（最小值+最大值）
//			dataMap.put("avg","¡À");//平均值
//			dataMap.put("item1","");
// 		    dataMap.put("item2","");
			dataMap.put("pieces",pieces);//单位
			
			//判断是否有数据
			if (pointDatas.size() > 0) {
				logger.info("数据有： "+pointDatas.size()+"条");
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("pointDatas",pointDatas);//数据1
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("pointDatas",pointDatas);//数据1
			}
			
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			logger.info("ftl="+ftl);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}

	
	/**
	 * 透视机报告封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_tsj_fh_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_tsj_fh_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","放射防护检测");//项目名称
		    dataMap.put("checkUnitName",task.getCheckUnitName());//委托单位
		    dataMap.put("monitorType","委托检测");//检测类别
		    dataMap.put("place",task.getPlace());//受检场所名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//场所内设备名称
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_tsj_fh_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	

	/**
	 * 生成全景机报告接口
	 * @return
	 */
	@SuppressWarnings("deprecation")
	public String report_fs_qjj_fh_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_qjj_fh_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
		String[] isNo = new String[200];//不合格的项目
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
							"task.createtime LIKE '%"+yMd+"%' AND " +
							"deviceType.deviceMain='5'";
			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = task.getStandard();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
//			//补空值
//			if (str.length == 0) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard("");
//				standards.add(standard);
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    dataMap.put("deviceLower","");//检测仪器探测下限 
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			    dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
			    
			    if (task.getTestingProject().indexOf("X") != -1 && task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
			    	
			    	correctNum = new ROMS_SZ_DEVICEDATA();
			    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("X") != -1) {
			    	correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else{
					correctNum.setCorrectNum("");
			    	correctNums.add(correctNum);
				}
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		  //检测现场信息里的备注
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		   
		    note.setNote("1.检测结果均包含本底值；");
		    notes.add(note);
		    
		    if (task.getOther() != null && !task.getOther().equals("")) {
		    	note = new ROMS_SZ_POINTDATA();
			    note.setNote("2."+task.getOther()+"；");
			    notes.add(note);
			}
		    
		    //获取最后一位替换成句号
		    notes.get(notes.size()-1).setNote(notes.get(notes.size()-1).getNote().replace("；", "。"));
		    dataMap.put("notes",notes);
		    
		    //设备用途
		    String item22 = task.getItem2();
		    String purpose = "";
		    if (item22.substring(1, 2).equals("1") && item22.substring(0, 1).equals("1")) {
				purpose = "全景扫描，头颅摄影";
			}else if (item22.substring(1, 2).equals("1") && item22.substring(0, 1).equals("0")) {
				purpose = "全景扫描";
			}else{
				purpose = "头颅摄影";
			}
		    dataMap.put("purpose",purpose);
		    
		    int as = 1;//用于区分几个模式
		    String ftl = "/fs_qjj_fh1.ftl";
		    if (item22.substring(0, 1).equals("1") && item22.substring(1, 2).equals("1")) {
			    ftl = "/fs_qjj_fh2.ftl";
			    as = 2;
			}else{
				note = new ROMS_SZ_POINTDATA();
			    note.setNote("3.设备无头颅摄影模式。");
			    notes.add(note);
			}
		    dataMap.put("notes",notes);//检测现场信息里的备注
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    //先置空，有值就替换
		    dataMap.put("item1","");
			dataMap.put("item2","");
			dataMap.put("item3","");
			dataMap.put("item4","");
			
		    String pieces = "μSv/h";
		    String data = task.getData();
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				String locationType = (String) morphDynaBean.get("locationType");
				logger.info("射线照射方向="+locationType);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					
					if (type == 1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);
						pointData.setV2(item2);
						pointData.setV3(item7);
						
						//判断是不是数字
						double parseDouble1 = 0d;
						if (NumberUtils.isNumber(item7)) {
							parseDouble1 = Double.parseDouble(item7);
						}
						//判断是否结果是否符合
						if (pieces.equals("μSv/h")) {
							if (parseDouble1 > 2.5) {
								pass = 1;
								isNo[j] = item2;
							}
						}else{
							if (parseDouble1 > 2500) {
								pass = 1;
								isNo[j] = item2;
							}
						}
						
						//只有一种模式的情况下
						if (as == 1) {
							pointDatas1.add(pointData);
							
							//规定pointDatas大小等于***就放入另外一个points
							if (pointDatas1.size() == 16) {
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setPointDatas(pointDatas1);
								pointDatas.add(pointData);
								
								//把pointDatas重新置空
								pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
							}else if (j == objects.length-1) {
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setPointDatas(pointDatas1);
								pointDatas.add(pointData);
							}
						}else{
							if (!locationType.equals("")) {
								if (locationType.equals("全景扫描模式")) {
									pointDatas2.add(pointData);
								}else{
									pointDatas3.add(pointData);
								}
							}
						}
					}else{
						pieces = (String) morphDynaBean1.get("pieces");
						logger.info("单位="+pieces);
						
						dataMap.put("range",item6+"~"+item7+pieces);//范围（最小值+最大值）
						dataMap.put("avg",item8+"±"+item9+pieces);//平均值
					}
				}
				
				//因为value可能是[]所以要把模式方向赋值单独赋值
				if (type == 1) {
					String ms = "";
					
					//只有一种模式的情况下
					if (as == 1) {
						if (!locationType.equals("")) {
							dataMap.put("item1",locationType);
							if (locationType.equals("全景扫描模式")) {
								//判断如果是/就去除
								if (!task.getItem5().equals("/") && !task.getItem5().equals("")) {
									ms += task.getItem5()+"→";
								}
								if (!task.getItem6().equals("/") && !task.getItem6().equals("")) {
									ms += task.getItem6()+"→";
								}
								if (!task.getItem7().equals("/") && !task.getItem7().equals("")) {
									ms += task.getItem7()+"→";
								}
								if (!task.getItem8().equals("/") && !task.getItem8().equals("")) {
									ms += task.getItem8()+"→";
								}
								dataMap.put("item2",ms.substring(0, ms.length()-1));
							}else{
								dataMap.put("item2",task.getItem4());
							}
						}else{
							dataMap.put("item1","");
							dataMap.put("item2","");
						}
					}else{
						if (!locationType.equals("")) {
							if (locationType.equals("全景扫描模式")) {
								//判断如果是/就去除
								if (!task.getItem5().equals("/") && !task.getItem5().equals("")) {
									ms += task.getItem5()+"→";
								}
								if (!task.getItem6().equals("/") && !task.getItem6().equals("")) {
									ms += task.getItem6()+"→";
								}
								if (!task.getItem7().equals("/") && !task.getItem7().equals("")) {
									ms += task.getItem7()+"→";
								}
								if (!task.getItem8().equals("/") && !task.getItem8().equals("")) {
									ms += task.getItem8()+"→";
								}
								dataMap.put("item2",ms.substring(0, ms.length()-1));
								dataMap.put("item1",locationType);
							}else{
								dataMap.put("item3",locationType);
								dataMap.put("item4",task.getItem4());
							}
						}
					}
				}
				
				//防止没有测点而文档无法打开
				if (objects.length == 0) {
					if (type == 1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						
						//只有一种模式的情况下
						if (as == 1) {
							pointDatas1.add(pointData);
							
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
						}else{
							if (locationType.equals("全景扫描模式")) {
								pointDatas2.add(pointData);
							}else{
								pointDatas3.add(pointData);
							}
						}
					}else{
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("avg","±");//平均值
					}
				}
			}
			
			//比对两个list大小，用最小的list来循环
			int size = 0;
			
			//两个模式才进去
			if (item22.substring(0, 1).equals("1") && item22.substring(1, 2).equals("1")) {
				//判断某个list没值得情况
				if (pointDatas2.size() == 0) {
					for (int i = 0; i < pointDatas3.size(); i++) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(pointDatas3.get(i).getV1());
						pointData.setV2(pointDatas3.get(i).getV2());
						pointData.setV3("");//全景扫描报告值
						pointData.setV4(pointDatas3.get(i).getV3());//头颅摄影报告值
						pointDatas4.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas4.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (i == pointDatas3.size()-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
						}
					}
				}else if (pointDatas3.size() == 0) {
					for (int i = 0; i < pointDatas2.size(); i++) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(pointDatas2.get(i).getV1());
						pointData.setV2(pointDatas2.get(i).getV2());
						pointData.setV3(pointDatas2.get(i).getV3());//全景扫描报告值
						pointData.setV4("");//头颅摄影报告值
						pointDatas4.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas4.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (i == pointDatas2.size()-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
						}
					}
				}else{
					if (pointDatas2.size() > pointDatas3.size()) {
						size = pointDatas3.size();
					}else{
						size = pointDatas2.size();
					}
					
					for (int i = 0; i < size; i++) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(pointDatas2.get(i).getV1());
						pointData.setV2(pointDatas2.get(i).getV2());
						pointData.setV3(pointDatas2.get(i).getV3());//全景扫描报告值
						pointData.setV4(pointDatas3.get(i).getV3());//头颅摄影报告值
						pointDatas4.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas4.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (i == size-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas4);
							pointDatas.add(pointData);
						}
					}
				}
			}
			
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int az = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (az != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					az ++;
				}
			}
		    //判断结论
		    if (pass == 1) {
		    	dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外"+isNoName+"的辐射水平大于2.5μSv/h，不符合标准要求，其余所检位置辐射水平均不大于2.5μSv/h，符合标准要求。");//结论
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getPlace()+"”外的辐射水平均不大于2.5μSv/h，符合标准要求。");//结论
			}
			
//			pointData = new ROMS_SZ_POINTDATA();
//			pointData.setV1("");
//			pointData.setV2("");
//			pointData.setV3("");
//			pointData.setV4("");
//			pointDatas.add(pointData);
//			dataMap.put("range","~");//范围（最小值+最大值）
//			dataMap.put("avg","±");//平均值
//			dataMap.put("item1","");
//			dataMap.put("item2","");
//			dataMap.put("item3","");
//			dataMap.put("item4","");
		    dataMap.put("v1","");
		    dataMap.put("v2","");
		    dataMap.put("v3","");
			dataMap.put("pieces",pieces);//单位
			
			//判断是否有数据
			if (pointDatas.size() > 0) {
				System.out.println(pointDatas.get(pointDatas.size()-1).getPointDatas());
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("pointDatas",pointDatas);//数据1
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("pointDatas",pointDatas);//数据1
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 全景机报告封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_qjj_fh_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_qjj_fh_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","放射防护检测");//项目名称
		    dataMap.put("checkUnitName",task.getCheckUnitName());//委托单位
		    dataMap.put("monitorType","委托检测");//检测类别
		    dataMap.put("place",task.getPlace());//受检场所名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//场所内设备名称
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_qjj_fh_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 生成安检机报告接口
	 * @return
	 */
	public String report_fs_ajj_fh_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ajj_fh_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
		    SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日   
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("note","");//备注（关联报告编号）
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = task.getStandard();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
//			//补空值
//			if (str.length == 0) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard("");
//				standards.add(standard);
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
			//检测现场信息里的备注
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		    note.setNote("1.检测结果均包含本底值。");
		    notes.add(note);
		    
		    //获取最后一位替换成句号
		    notes.get(notes.size()-1).setNote(notes.get(notes.size()-1).getNote().replace("；", "。"));
		    dataMap.put("notes",notes);
			
		    //检测仪器
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    dataMap.put("deviceLower","");//检测仪器探测下限 
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			    dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
			    
			    if (task.getTestingProject().indexOf("X") != -1 && task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
			    	
			    	correctNum = new ROMS_SZ_DEVICEDATA();
			    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("X") != -1) {
			    	correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else{
					correctNum.setCorrectNum("");
			    	correctNums.add(correctNum);
				}
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    //设备用途
		    String item22 = task.getItem2();
		    String purpose = "";
		    if (item22.substring(0, 1).equals("1")) {
				purpose += "  X射线荧光分析仪";
			}
			if (item22.substring(1, 2).equals("1")) {
				purpose += "  X射线衍射仪";
			}
			if (item22.substring(2, 3).equals("1")) {
				purpose += "  安检机";
			}
			if (item22.substring(3, 4).equals("1")) {
				purpose += "  货物/车辆检查系统";
			}
			if (item22.substring(4, 5).equals("1")) {
				if (item22.substring(5, 6).equals("1") && item22.substring(6, 7).equals("0")) {
					purpose += "  X射线工业探伤（移动）";
				}else if (item22.substring(5, 6).equals("0") && item22.substring(6, 7).equals("1")) {
					purpose += "  X射线工业探伤（固定）";
				}else{
					purpose += "  X射线工业探伤（）";
				}
			}
			if (item22.substring(7, 8).equals("1")) {
				purpose += "  "+task.getItem3();
			}
		    dataMap.put("purpose",purpose);
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    String pieces = "";
		    String data = task.getData();
		    System.out.println("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);//测点编号
						pointData.setV2(item2);//测点地址
						pointData.setV3(item7);//报告值
						pointDatas1.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas1.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
							
							//把pointDatas1重新置空
							pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == objects.length-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
						}
					}else{
						dataMap.put("range",item6+"~"+item7+pieces);//范围（最小值+最大值）
						dataMap.put("avg",item8+"±"+item9+pieces);//平均值
					}
				}
				
				//防止没有测点而文档无法打开
				if (objects.length == 0) {
					if (type == 1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointDatas1.add(pointData);
						
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas1);
						pointDatas.add(pointData);
					}else{
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("avg","±");//平均值
					}
				}
			}
//		    dataMap.put("range","~");//范围（最小值+最大值）
//			dataMap.put("avg","±");//平均值
//			for (int i = 0; i < 38; i++) {
//				pointData = new ROMS_SZ_POINTDATA();
//				pointData.setV1("");
//				pointData.setV2("");
//				pointData.setV3("");
//				pointDatas.add(pointData);
//				
//				//规定pointDatas大小等于***就放入另外一个points
//				if (pointDatas.size() == 19) {
//					pointData = new ROMS_SZ_POINTDATA();
//					pointData.setPointDatas(pointDatas);
//					points.add(pointData);
//					
//					//把pointDatas重新置空
//					pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
//				}else if (i == 38-1) {
//					pointData = new ROMS_SZ_POINTDATA();
//					pointData.setPointDatas(pointDatas);
//					points.add(pointData);
//				}
//			}
			dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getCheckDeviceName()+"”外的辐射水平均不大于5μSv/h，符合标准要求。");//结论
			
			dataMap.put("standard","");
			dataMap.put("v1","");
			dataMap.put("v2","");
			dataMap.put("v3","");
			dataMap.put("pieces",pieces);//单位
			//判断是否有数据
			if (pointDatas.size() > 0) {
				System.out.println(pointDatas.get(pointDatas.size()-1).getPointDatas());
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("pointDatas",pointDatas);//数据1
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("pointDatas",pointDatas);//数据1
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'"; 
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_ajj_fh.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 安检机报告封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_ajj_fh_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ajj_fh_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'"; 
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","放射防护检测");//项目名称
		    dataMap.put("checkUnitName",task.getCheckUnitName());//委托单位
		    dataMap.put("monitorType","委托检测");//检测类别
		    dataMap.put("place",task.getPlace());//受检场所名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//场所内设备名称
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_ajj_fh_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 生成密封源仪表报告接口
	 * @return
	 */
	public String report_fs_mfyy_fh_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_mfyy_fh_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			//查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
			
		    SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			String nuclideTime = y_sdf.format(task.getNuclideTime())+"年"+
		    M_sdf.format(task.getNuclideTime())+"月"+
		    d_sdf.format(task.getNuclideTime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    dataMap.put("nuclideNum",task.getNuclideNum());//核素编码
		    dataMap.put("nuclideVender",task.getNuclideVender());//核素生产厂家
		    dataMap.put("currentActivity",task.getCurrentActivity());//当前装填活度
		    dataMap.put("nuclideTime",nuclideTime);//核素出厂日期
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("note","");//备注（关联报告编号）
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = task.getStandard();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
//			//补空值
//			if (str.length == 0) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard("");
//				standards.add(standard);
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
						
		    //检测仪器
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    String deviceName = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
		    		deviceName = device.getDeviceName();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    dataMap.put("deviceLower","");//检测仪器探测下限 
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			    dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
			    
			    if (task.getTestingProject().indexOf("X") != -1 && task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
			    	
			    	correctNum = new ROMS_SZ_DEVICEDATA();
			    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("X") != -1) {
			    	correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
			    	correctNums.add(correctNum);
				}else if (task.getTestingProject().indexOf("γ") != -1) {
					correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
			    	correctNums.add(correctNum);
				}else{
					correctNum.setCorrectNum("");
			    	correctNums.add(correctNum);
				}
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    //设备用途
		    String item22 = task.getItem2();
		    String purpose = "";
		    if (item22.substring(0, 1).equals("1")) {
		    	purpose += "  "+task.getItem3();
			}
		    
		    dataMap.put("purpose",purpose);
		    
		    String fx = "";
		    Double value5 = 0d;
		    Double value100 = 0d;
		    if (item22.substring(1, 2).equals("1")) {
		    	fx = "对人员的活动范围不限制";
		    	value5 = 2.5d;
		    	value100 = 0.25d;
			}
		    if (item22.substring(2, 3).equals("1")) {
		    	fx = "在距源容器外表面1m的区域内很少有人停留";
		    	value5 = 25d;
		    	value100 = 2.5d;
			}
		    if (item22.substring(3, 4).equals("1")) {
		    	fx = "在距源容器外表面3m的区域内不可能有人进入";
		    	value5 = 250d;
		    	value100 = 25d;
			}
		    if (item22.substring(4, 5).equals("1")) {
		    	fx = "放射工作场所设置了监督区";
		    	value5 = 250d;
		    	value100 = 25d;
			}
		    if (item22.substring(5, 6).equals("1")) {
		    	fx = "只能在特定的放射工作场所使用，并按控制区、监督区分区管理";
		    	value5 = 1000d;
		    	value100 = 100d;
			}
		    
		   
		    //检测现场信息里的备注
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		    note.setNote("1.检测结果均包含本底值；");
		    notes.add(note);
		    
		    note = new ROMS_SZ_POINTDATA();
		    note.setNote("2.仅用于"+fx+"；");
		    notes.add(note);
		    
		    if (!task.getOther().equals("")) {
		    	 note = new ROMS_SZ_POINTDATA();
				 note.setNote("3."+task.getOther()+"；");
				 notes.add(note);
			}
		   
		    //获取最后一位替换成句号
		    notes.get(notes.size()-1).setNote(notes.get(notes.size()-1).getNote().replace("；", "。"));
		    dataMap.put("notes",notes);

		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    ArrayList<ROMS_SZ_POINTDATA> points = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String pieces = "";
		    String[] isNo = new String[50];//不合格的项目
		    int isNoAx = 0;
		    
		    String data = task.getData();
		    System.out.println("任务测点json="+data);
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					
					
					//判断有单位才赋值
					if (pieces1 != null && !pieces1.equals("")) {
						pieces = pieces1;
					}
					
					if (type == 0) {
						dataMap.put("range",item6+"~"+item7+pieces);//范围（最小值+最大值）
						dataMap.put("avg",item8+"±"+item9+pieces);//平均值
					}else if (!item3.equals("") && !item7.equals("")) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);//测点编号
						pointData.setV2(item2);//测点地址
						pointData.setV3(item3);//源闸状态
						pointData.setV4(item7);//报告值
						
						//判断是否符合要求
						double parseDouble = Double.parseDouble(item7);
						if (pieces1.equals("nSv/h")) {
							parseDouble = parseDouble/1000;
						}
						if (item2.equals("5cm")) {
							if (parseDouble >= value5) {
								isNo[isNoAx] = item2;
								isNoAx++;
							}
						}else{
							if (parseDouble >= value100) {
								isNo[isNoAx] = item2;
								isNoAx++;
							}
						}
						
						//判断闸源开关
						if (item3.equals("开启")) {
							pointDatas1.add(pointData);
						}else if(item3.equals("关闭")){
							pointDatas2.add(pointData);
						}
					}
				}
				
				//防止没有测点而文档无法打开
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("avg","±");//平均值
					}
				}
			}
			//闸源开关分页循环
			for (int k = 0; k < pointDatas1.size(); k++) {
				pointDatas.add(pointDatas1.get(k));
				//规定pointDatas大小等于***就放入另外一个points
				if (pointDatas.size() == 15) {
					pointData = new ROMS_SZ_POINTDATA();
					pointData.setPointDatas(pointDatas);
					points.add(pointData);
				
					pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
				}else if (k == pointDatas1.size()-1) {
					pointData = new ROMS_SZ_POINTDATA();
					pointData.setPointDatas(pointDatas);
					points.add(pointData);
			}
		}
				pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
			for (int k = 0; k < pointDatas2.size(); k++) {
				pointDatas.add(pointDatas2.get(k));
				if (pointDatas.size() == 15) {
					pointData = new ROMS_SZ_POINTDATA();
					pointData.setPointDatas(pointDatas);
					points.add(pointData);
					
					//最后一次循环	
					pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
				}else if (k == pointDatas2.size()-1) {   
					pointData = new ROMS_SZ_POINTDATA();
					pointData.setPointDatas(pointDatas);
					points.add(pointData); 
			}
		}
//		    dataMap.put("range","~");//范围（最小值+最大值）
//			dataMap.put("avg","±");//平均值
//		    for (int i = 0; i < 20; i++) {
//		    	pointData = new ROMS_SZ_POINTDATA();
//				pointData.setV1("");//测点编号
//				pointData.setV2("");//测点地址
//				pointData.setV3("");//源闸状态
//				pointData.setV4("");//报告值
//				pointDatas.add(pointData);
//				
//				//规定pointDatas大小等于***就放入另外一个points
//				if (pointDatas.size() == 19) {
//					pointData = new ROMS_SZ_POINTDATA();
//					pointData.setPointDatas(pointDatas);
//					points.add(pointData);
//					
//					//把pointDatas重新置空
//					pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
//				}else if (i == 20-1) {
//					pointData = new ROMS_SZ_POINTDATA();
//					pointData.setPointDatas(pointDatas);
//					points.add(pointData);
//				}
//			}
			
			logger.info("不合格检测点位数量="+isNo.length);
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int as = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null  && isNoName.indexOf(isNo[i]) == -1) {
		    		if (as != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					as ++;
				}
			}
		    if (!isNoName.equals("")) {
		    	dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getCheckDeviceName()+"”的使用场所为“"+fx+"”，本次所检"+isNoName+"的辐射水平不小于2.5μSv/h，不符合标准要求，在距源容器外表面5cm的辐射水平小于"+value5+"μSv/h，距源容器外表面100cm的辐射水平小于"+value100+"μSv/h，符合要求。");//结论
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，本次所检“"+task.getCheckDeviceName()+"”的使用场所为“"+fx+"”，在距源容器外表面5cm的辐射水平小于"+value5+"μSv/h，距源容器外表面100cm的辐射水平小于"+value100+"μSv/h，均符合标准要求。");//结论
			}
			
			
			dataMap.put("standard","");
			dataMap.put("note","");
			dataMap.put("correctNum","");
			dataMap.put("v1","");
			dataMap.put("v2","");
			dataMap.put("v3","");
			dataMap.put("v4","");
			dataMap.put("pieces",pieces);//单位
			//判断是否有数据
			if (points.size() > 0) {
				System.out.println(points.get(points.size()-1).getPointDatas());
				dataMap.put("pointDatas2",points.get(points.size()-1).getPointDatas());//数据2
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				points.remove(points.size()-1);
				dataMap.put("pointDatas",points);//数据1
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("pointDatas",points);//数据1
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断是否有时间，因为签发人是事先确定的
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, "/fs_mfyy_fh.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 密封源仪表报告封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_mfyy_fh_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_mfyy_fh_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and taskId='"+task.getId()+"'"; 
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","放射防护检测");//项目名称
		    dataMap.put("checkUnitName",task.getCheckUnitName());//委托单位
		    dataMap.put("monitorType","委托检测");//检测类别
		    dataMap.put("place",task.getPlace());//受检场所名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//场所内设备名称
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_mfyy_fh_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	
	
	/**
	 * 生成牙科机性能报告
	 * @return
	 */
	@SuppressWarnings({ "static-access", "deprecation" })
	public String report_fs_ykj_xn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ykj_xn_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
//		int isKd = 0;//0是电压可调,1是电压固定
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
		    String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    String[] isNo = new String[10];//不合格的项目
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
//			SimpleDateFormat s_sdf=new SimpleDateFormat("dd");//秒
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
//			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
//					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
//							"task.createtime LIKE '%"+yMd+"%' AND " +
//							"deviceType.deviceMain='1'";
//			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    dataMap.put("testingProject","");//检测项目（下面有赋值）
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = "";
		    
		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
			System.out.println("检测长度="+str.length);
			for (int i = 0; i < str.length; i++) {
				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
				standard.setStandard(str[i]);
				
				standards.add(standard);
				
				//拼一个字符串用于结论
				if (i != 0) {
					standard1 += "和";
				}
				standard1 += str[i];
			}
			dataMap.put("standards",standards);//检测依据
			
			//取出设备用途判断
		    String item22 = task.getItem2();
		    String purpose = "";
		    if (item22.substring(0, 1).equals("1")) {
				purpose += "  口内牙片摄影";
			}
			if (item22.substring(1, 2).equals("1")) {
				purpose += "  头颅摄影";
			}
			if (item22.substring(2, 3).equals("1")) {
				purpose += "  全景扫描";
			}
			if (item22.substring(3, 4).equals("1")) {
				purpose += "  立位/站位口腔三维扫描";
			}
			if (item22.substring(4, 5).equals("1")) {
				purpose += "  卧位口腔三维扫描";
			}
		    dataMap.put("purpose",purpose);//设备用途
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    //仪器
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			   
			    correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
		    	correctNums.add(correctNum);
		    	
//		    	correctNum = new ROMS_SZ_DEVICEDATA();
//		    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
//		    	correctNums.add(correctNum);
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    ROMS_SZ_POINTDATA pointData = null;
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是管电压调节范围,1是管电压指示的偏离，2是曝光时间指示的偏离，3是辐射输出的重复性" +
						"4是有用线束半值层，5是过滤材料厚度，6是焦皮距，7是集光筒出口平面的最大几何尺寸（直径/对角线）="+type);
				
				//管电压调节范围
				if (type == 0) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("item9="+item9);
					String item10 = (String) morphDynaBean.get("item10");
					logger.info("item10="+item10);
					
					Double value = 0d;
					
					if (!item1.equals("")) {
						if (!item2.equals("")) {
							if (value < Double.parseDouble(item2)) {
								value = Double.parseDouble(item2);
							}
						}
						if (!item3.equals("")) {
							if (value < Double.parseDouble(item3)) {
								value = Double.parseDouble(item3);
							}
						}
						if (!item4.equals("")) {
							if (value < Double.parseDouble(item4)) {
								value = Double.parseDouble(item4);
							}
						}
						
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setNote((notes.size()+1)+".本设备管电压固定；");
						notes.add(pointData);
						dataMap.put("v13","≥60kV");//标准限值
					}else if (!item5.equals("")) {
						value = Double.parseDouble(item6);
						
						dataMap.put("vol","本设备管电压可调；");
						dataMap.put("v13","≥50kV");//标准限值
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setItem1("管电压");
						pointData.setItem2("相邻档管电压增量："+item7+"kV");
						pointData.setItem3("相邻档管电压增量不超过5 kV");
						if (!item7.equals("") && !item7.equals("/")) {
							if (Double.parseDouble(item7) <= 5) {
								pointData.setItem4("符合");
							}else{
								pointData.setItem4("不符合");
								pass = 1;
								isNo[i] = "管电压调节范围";
							}
						}else{
							pointData.setItem4("—");
						}
						
						pointDatas1.add(pointData);
					}else if (!item8.equals("")) {
						value = Double.parseDouble(item9);
						
						dataMap.put("vol","本设备管电压可调；");
						dataMap.put("v13","≥50kV");//标准限值
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setItem1("管电压");
						pointData.setItem2("相邻档管电压增量："+item10+"kV");
						pointData.setItem3("相邻档管电压增量不超过5 kV");
						if (!item10.equals("") && !item10.equals("/")) {
							if (Double.parseDouble(item10) <= 5) {
								pointData.setItem4("符合");
							}else{
								pointData.setItem4("不符合");
								pass = 1;
								isNo[i] = "管电压调节范围";
							}
						}else{
							pointData.setItem4("—");
						}
						
						pointDatas1.add(pointData);
					}else{
						dataMap.put("vol","");
					}
					
					//判断该任务不是牙片机任务的时候标准限值固定60kv
					if (!taskauth.getDeviceType().getName().equals("牙片机")) {
						dataMap.put("v13","≥60kV");//标准限值
					}
					
					dataMap.put("v11","管电压");//检测项目
					dataMap.put("v12",value+"kV");//检测结果
					if (Math.abs(value) >= 60) {
						dataMap.put("v14","符合");//单项结论
					}else{
						dataMap.put("v14","不符合");//单项结论
						pass = 1;
						isNo[i] = "管电压调节范围";
					}
					
					//1是管电压指示的偏离
				}else if (type == 1) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("预置值="+item1);
						String item8 = (String) morphDynaBean1.get("item8");
						logger.info("偏离度="+item8);
						
						double parseDouble = 0d;
						if (!item8.equals("") && !item8.equals("/")) {
							parseDouble = Double.parseDouble(item8);
						}
						if (j == 0) {
							dataMap.put("v21","管电压指示的偏离");//检测项目
							dataMap.put("v22",item1+"kV："+item8+"%");//检测结果
							dataMap.put("v23","±≤10%");//标准限值
							if (!item8.equals("") && !item8.equals("/")) {
								if (Math.abs(parseDouble) <= 10) {
									dataMap.put("v24","符合");//单项结论
								}else{
									dataMap.put("v24","不符合");//单项结论
									pass = 1;
									isNo[i] = "管电压指示的偏离";
								}
							}else{
								dataMap.put("v24","—");//单项结论
							}
							
						}else{
							if (!item1.equals("") && !item8.equals("") && !item1.equals("/") && !item8.equals("/")) {
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setItem1("管电压指示的偏离");
								pointData.setItem2(item1+"kV："+item8+"%");
								pointData.setItem3("±≤10%");
								if (Math.abs(parseDouble) <= 10) {
									pointData.setItem4("符合");
								}else{
									pointData.setItem4("不符合");
									pass = 1;
									isNo[i] = "管电压指示的偏离";
								}
								
								pointDatas2.add(pointData);
							}
						}
					}
					
					
					//2是曝光时间指示的偏离
				}else if (type == 2) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					String pieces = (String)morphDynaBean.get("pieces");
//					String pieces = "ms";
					logger.info("单位="+pieces);
					
					//判断检测项目是否打钩
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("value");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						
						for (int j = 0; j < objects.length; j++) {
							a = JSONObject.fromObject(objects[j]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean1.get("item1");
							logger.info("预置值"+item1);
							String item8 = (String) morphDynaBean1.get("item8");
							logger.info("偏离"+item8);
							
							double value = 0;
							double yzz = 0;
							double pl = 0;
							//判断是不是数字
							if (NumberUtils.isNumber(item1)) {
								yzz = Double.parseDouble(item1);
							}
							if (NumberUtils.isNumber(item8)) {
								pl = Double.parseDouble(item8);
							}
//							if (!item1.equals("") && !item8.equals("") && !item1.equals("/") && !item8.equals("/")) {
//								yzz = Double.parseDouble(item1);
//								pl = Double.parseDouble(item8);
//							}
							
							if (pieces.equals("s")) {
								value = yzz*1000;
								value = (0.1*value)+1;
							}else{
								value = (0.1*yzz)+1;
							}
							if (j == 0) {
								dataMap.put("v31","曝光时间指示的偏离");//检测项目
								dataMap.put("v32",item1+pieces+"："+item8+"ms");//检测结果
								dataMap.put("v33",item1+pieces+"：±"+value+"ms");//标准限值
								if (!item8.equals("") && !item8.equals("/")) {
									if (Math.abs(pl) <= value) {
										dataMap.put("v34","符合");//单项结论
									}else{
										dataMap.put("v34","不符合");//单项结论
										pass = 1;
										isNo[i] = "曝光时间指示的偏离";
									}
								}else{
									dataMap.put("v34","—");//单项结论
								}
								
							}else{
								if (!item1.equals("") && !item8.equals("") && !item1.equals("/") && !item8.equals("/")) {
									pointData = new ROMS_SZ_POINTDATA();
									pointData.setItem1("曝光时间指示的偏离");
									pointData.setItem2(item1+"ms："+item8+"ms");
									pointData.setItem3(item1+"ms：±"+value+"ms");
									if (Math.abs(pl) <= value) {
										pointData.setItem4("符合");
									}else{
										pointData.setItem4("不符合");
										pass = 1;
										isNo[i] = "曝光时间指示的偏离";
									}
									
									pointDatas3.add(pointData);
								}
							}
						}
					}else{
						dataMap.put("v31","曝光时间指示的偏离");//检测项目
						dataMap.put("v32",reason);//检测结果
						dataMap.put("v33","—");//标准限值
						dataMap.put("v34","—");//单项结论
					}
					
					//3是辐射输出的重复性
				}else if (type == 3) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("输出重复性="+item5);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p3","(×)");//检测项目
						dataMap.put("testingProject","防护性能检测");//检测项目
						
						dataMap.put("v71","辐射输出的重复性");//检测项目
						dataMap.put("v72",reason);//检测结果
						dataMap.put("v73","—");//标准限值
						dataMap.put("v74","—");//单项结论
					}else{
						dataMap.put("p3","(√)");//检测项目
						dataMap.put("testingProject","防护性能和成像性能检测");//检测项目
						
						dataMap.put("v71","辐射输出的重复性");//检测项目
						dataMap.put("v72",item5+"%");//检测结果
						dataMap.put("v73","≤5%");//标准限值
						
						//判断是不是数字
						double parseDouble = 0d;
						if (NumberUtils.isNumber(item5)) {
							parseDouble = Double.parseDouble(item5);
						}
						if (!item5.equals("") && !item5.equals("/")) {
							if (parseDouble <= 5) {
								dataMap.put("v74","符合");//单项结论
							}else{
								dataMap.put("v74","不符合");//单项结论
								pass = 1;
								isNo[i] = "辐射输出的重复性";
							}
						}else{
							dataMap.put("v74","—");//单项结论
						}
					}
					
					//4是有用线束半值层
				}else if (type == 4) {
					AlgorithmUtil util = new AlgorithmUtil();
					Double ypj = 0d;
					DecimalFormat df = new DecimalFormat("######0.00");
					Double nominalCapacity = Double.parseDouble(task.getNominalCapacity());
					
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("管电压1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("HVL1="+item2);
					if (!item1.equals("") && !item1.equals("/")) {
						if (purpose.indexOf("口内牙片摄影") != -1) {
							ypj = util.ypj(Double.parseDouble(item1), nominalCapacity);
						}else{
							ypj = util.OtherYk(Double.parseDouble(item1), nominalCapacity);
						}
					}
					dataMap.put("v41","半值层");//检测项目
					dataMap.put("v42",item1+"kV："+item2+"mmAl");//检测结果
					//判断是否为null
					if (ypj == null) {
						dataMap.put("v43","≥ mmAl");//标准限值
						dataMap.put("v44","不符合");//单项结论
						pass = 1;
						isNo[i] = "有用线束半值层";
					}else{
						dataMap.put("v43","≥"+df.format(ypj)+"mmAl");//标准限值
						
						//判断是不是数字
						double parseDouble = 0d;
						if (NumberUtils.isNumber(item2)) {
							parseDouble = Double.parseDouble(item2);
						}
						if (Math.abs(parseDouble) >= ypj) {
							dataMap.put("v44","符合");//单项结论
						}else{
							dataMap.put("v44","不符合");//单项结论
							pass = 1;
							isNo[i] = "有用线束半值层";
						}
					}
					
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("管电压2="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("HVL2="+item4);
					if (!item3.equals("") && !item4.equals("") && !item3.equals("/") && !item4.equals("/")) {
						if (purpose.indexOf("口内牙片摄影") != -1) {
							ypj = util.ypj(Double.parseDouble(item3), nominalCapacity);
						}else{
							ypj = util.OtherYk(Double.parseDouble(item3), nominalCapacity);
						}
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setItem1("半值层");
						pointData.setItem2(item3+"kV："+item4+"mmAl");
						
						//判断是否为null
						if (ypj == null) {
							pointData.setItem3("≥ mmAl");
							pointData.setItem4("不符合");
							pass = 1;
							isNo[i] = "有用线束半值层";
							pointDatas4.add(pointData);
						}else{
							pointData.setItem3("≥"+df.format(ypj)+"mmAl");
							
							//判断是不是数字
							double parseDouble1 = 0d;
							if (NumberUtils.isNumber(item4)) {
								parseDouble1 = Double.parseDouble(item4);
							}
							if (Math.abs(parseDouble1) >= ypj) {
								pointData.setItem4("符合");
							}else{
								pointData.setItem4("不符合");
								pass = 1;
								isNo[i] = "有用线束半值层";
							}
							pointDatas4.add(pointData);
						}
					}
					
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("管电压3="+item5);
					String item6 = (String) morphDynaBean.get("item6");
					logger.info("HVL3="+item6);
					if (!item5.equals("") && !item6.equals("") && !item5.equals("/") && !item6.equals("/")) {
						if (purpose.indexOf("口内牙片摄影") != -1) {
							ypj = util.ypj(Double.parseDouble(item5), nominalCapacity);
						}else{
							ypj = util.OtherYk(Double.parseDouble(item5), nominalCapacity);
						}
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setItem1("半值层");
						pointData.setItem2(item5+"kV："+item6+"mmAl");
						//判断是否为null
						if (ypj == null) {
							pointData.setItem3("≥ mmAl");
							pointData.setItem4("不符合");
							pass = 1;
							isNo[i] = "有用线束半值层";
							pointDatas4.add(pointData);
						}else{
							pointData.setItem3("≥"+df.format(ypj)+"mmAl");
							
							//判断是不是数字
							double parseDouble1 = 0d;
							if (NumberUtils.isNumber(item6)) {
								parseDouble1 = Double.parseDouble(item6);
							}
							if (Math.abs(parseDouble1) >= ypj) {
								pointData.setItem4("符合");
							}else{
								pointData.setItem4("不符合");
								pass = 1;
								isNo[i] = "有用线束半值层";
							}
							pointDatas4.add(pointData);
						}
					}
					
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("管电压4="+item7);
					String item8 = (String) morphDynaBean.get("item8");
					logger.info("HVL4="+item8);
					if (!item7.equals("") && !item8.equals("") && !item7.equals("/") && !item8.equals("/")) {
						if (purpose.indexOf("口内牙片摄影") != -1) {
							ypj = util.ypj(Double.parseDouble(item7), nominalCapacity);
						}else{
							ypj = util.OtherYk(Double.parseDouble(item7), nominalCapacity);
						}
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setItem1("半值层");
						pointData.setItem2(item7+"kV："+item8+"mmAl");
						
						//判断是否为null
						if (ypj == null) {
							pointData.setItem3("≥ mmAl");
							pointData.setItem4("不符合");
							pass = 1;
							isNo[i] = "有用线束半值层";
							pointDatas4.add(pointData);
						}else{
							pointData.setItem3("≥"+df.format(ypj)+"mmAl");
							
							//判断是不是数字
							double parseDouble1 = 0d;
							if (NumberUtils.isNumber(item8)) {
								parseDouble1 = Double.parseDouble(item8);
							}
							if (Math.abs(parseDouble1) >= ypj) {
								pointData.setItem4("符合");
							}else{
								pointData.setItem4("不符合");
								pass = 1;
								isNo[i] = "有用线束半值层";
							}
							pointDatas4.add(pointData);
						}
					}
					
					//5是过滤材料厚度
				}else if (type == 5) {
					
					//6是焦皮距
				}else if (type == 6) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("焦皮距="+item4);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("v51","焦皮距");//检测项目
						dataMap.put("v52",reason);//检测结果
						dataMap.put("v53","—");//标准限值
						dataMap.put("v54","—");//单项结论
					}else{
						//如果是牙片机就有
						if (item22.substring(0, 1).equals("1")) {
							if (task.getMonitorType().equals("状态检测")) {
								dataMap.put("v51","焦皮距");//检测项目
								dataMap.put("v52","状态检测无此项");//检测结果
								dataMap.put("v53","—");//标准限值
								dataMap.put("v54","—");//单项结论
							}else{
								dataMap.put("v51","焦皮距");//检测项目
								dataMap.put("v52",item4+"cm");//检测结果
								dataMap.put("v53","≥20cm");//标准限值
								
								//判断是不是数字
								double parseDouble1 = 0d;
								if (NumberUtils.isNumber(item4)) {
									parseDouble1 = Double.parseDouble(item4);
								}
								if (!item4.equals("") && !item4.equals("/")) {
									if (parseDouble1 >= 20) {
										dataMap.put("v54","符合");//单项结论
									}else{
										dataMap.put("v54","不符合");//单项结论
										pass = 1;
										isNo[i] = "焦皮距";
									}
								}else{
									dataMap.put("v54","—");//单项结论
								}
							}
						}else{
							dataMap.put("v51","焦皮距");//检测项目
							dataMap.put("v52","无此项");//检测结果
							dataMap.put("v53","—");//标准限值
							dataMap.put("v54","—");//单项结论
						}
					}
					
					//7是集光筒出口平面的最大几何尺寸（直径/对角线）
				}else if (type == 7) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("集光筒出口平面的最大几何尺寸（直径/对角线）="+item2);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("v61","集光筒出口平面的最大几何尺寸（直径/对角线）");//检测项目
						dataMap.put("v62",reason);//检测结果
						dataMap.put("v63","—");//标准限值
						dataMap.put("v64","—");//单项结论
					}else{
						//如果是牙片机就有
						if (item22.substring(0, 1).equals("1")) {
							if (task.getMonitorType().equals("状态检测")) {
								dataMap.put("v61","集光筒出口平面的最大几何尺寸（直径/对角线）");//检测项目
								dataMap.put("v62","状态检测无此项");//检测结果
								dataMap.put("v63","--");//标准限值
								dataMap.put("v64","--");//单项结论
							}else{
								dataMap.put("v61","集光筒出口平面的最大几何尺寸（直径/对角线）");//检测项目
								dataMap.put("v62",item2+"mm");//检测结果
								dataMap.put("v63","≤60mm");//标准限值
								
								//判断是不是数字
								double parseDouble1 = 0d;
								if (NumberUtils.isNumber(item2)) {
									parseDouble1 = Double.parseDouble(item2);
								}
								if (!item2.equals("") && !item2.equals("/")) {
									if (parseDouble1 <= 60) {
										dataMap.put("v64","符合");//单项结论
									}else{
										dataMap.put("v64","不符合");//单项结论
										pass = 1;
										isNo[i] = "集光筒出口平面的最大几何尺寸（直径/对角线）";
									}
								}else{
									dataMap.put("v64","—");//单项结论
								}
								
							}
						}else{
							dataMap.put("v61","集光筒出口平面的最大几何尺寸（直径/对角线）");//检测项目
							dataMap.put("v62","无此项");//检测结果
							dataMap.put("v63","—");//标准限值
							dataMap.put("v64","—");//单项结论
						}
					}
				}
			}
			
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int as = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (as != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					as ++;
				}
			}
		    
			//判断结论是否符合
			if (pass == 0) {
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，所检项目的检测结果均符合标准要求。");
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，"+isNoName+"的检测结果不符合标准要求，其余所检项目的检测结果符合标准要求。");
			}
			
			pointData = new ROMS_SZ_POINTDATA();
			pointData.setNote((notes.size()+1)+".曝光时间指示的偏离标准要求为：±[10%读数（检测条件）＋1ms]。");
			notes.add(pointData);
			
			dataMap.put("notes",notes);
		    dataMap.put("pointDatas1",pointDatas1);
		    dataMap.put("pointDatas2",pointDatas2);
		    dataMap.put("pointDatas3",pointDatas3);
		    dataMap.put("pointDatas4",pointDatas4);
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			String ftl = "/fs_ykj_xn1.ftl";

			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
		    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 医用放射牙科机性能封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_ykj_xn_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ykj_xn_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("monitorType","委托检测");//检测类别
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是管电压调节范围,1是管电压指示的偏离，2是曝光时间指示的偏离，3是辐射输出的重复性" +
						"4是有用线束半值层，5是过滤材料厚度，6是焦皮距，7是集光筒出口平面的最大几何尺寸（直径/对角线）="+type);
				
				//3是辐射输出的重复性
				if (type == 3) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("projectName","防护性能检测");//项目名称
					}else{
						dataMap.put("projectName","防护性能和成像性能 检测");//项目名称
					}
				}
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_ykj_xn_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	
	
	/**
	 * 生成牙科全景机性能报告
	 * @return
	 */
	@SuppressWarnings({ "static-access", "deprecation" })
	public String report_fs_ykqjj_xn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ykqjj_xn_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
//		int isKd = 0;//0是电压可调,1是电压固定
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
		    String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    String[] isNo = new String[10];//不合格的项目
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
//			SimpleDateFormat s_sdf=new SimpleDateFormat("dd");//秒
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
//			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
//					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
//							"task.createtime LIKE '%"+yMd+"%' AND " +
//							"deviceType.deviceMain='1'";
//			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("deviceType",task.getDeviceType());//设备类型
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    dataMap.put("note1","");//注
		    dataMap.put("testingProject","");//检测项目（下面有赋值）
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = "";
		    
		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
			System.out.println("检测长度="+str.length);
			for (int i = 0; i < str.length; i++) {
				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
				standard.setStandard(str[i]);
				
				standards.add(standard);
				
				//拼一个字符串用于结论
				if (i != 0) {
					standard1 += "和";
				}
				standard1 += str[i];
			}
			dataMap.put("standards",standards);//检测依据
			
			//取出设备用途判断
//		    String item22 = task.getItem2();
//		    String purpose = "";
//		    if (item22.substring(0, 1).equals("1")) {
//				purpose += "  口内牙片摄影";
//			}
//			if (item22.substring(1, 2).equals("1")) {
//				purpose += "  头颅摄影";
//			}
//			if (item22.substring(2, 3).equals("1")) {
//				purpose += "  全景扫描";
//			}
//			if (item22.substring(3, 4).equals("1")) {
//				purpose += "  立位/站位口腔三维扫描";
//			}
//			if (item22.substring(4, 5).equals("1")) {
//				purpose += "  卧位口腔三维扫描";
//			}
//		    dataMap.put("purpose",purpose);//设备用途
			dataMap.put("purpose","");//设备用途
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    //仪器
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
			    correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
		    	correctNums.add(correctNum);
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    ROMS_SZ_POINTDATA pointData = null;
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();//管电压指示的偏离
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();//加载时间的偏离
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();//有用线束半值层
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();//高对比分辨力
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas5 = new ArrayList<ROMS_SZ_POINTDATA>();//低对比分辨力
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				
				logger.info("0是管电压,1是管电压指示的偏离，4是加载时间偏离，5是有用线束半值层" +
						"7是高对比分辨力，8是低对比分辨力="+type);
				
				//1管电压
				if (type == 0) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("item9="+item9);
					double pareseDouble2 =0d;
					double pareseDouble4 =0d;
					double pareseDouble7 =0d;
					double pareseDouble9 =0d;
					//判断是否为数字
					if (NumberUtils.isNumber(item2)) {
						pareseDouble2 = Double.parseDouble(item2);
					}
					if (NumberUtils.isNumber(item4)) {
						pareseDouble4 = Double.parseDouble(item4);
					}
					if (NumberUtils.isNumber(item7)) {
						pareseDouble7 = Double.parseDouble(item7);
					}
					if (NumberUtils.isNumber(item9)) {
						pareseDouble9 = Double.parseDouble(item9);
					}
					
					//检测结果的判断
					if (item1.equals("1")) {
						dataMap.put("v10","1");
						dataMap.put("v11","管电压");  
						dataMap.put("v12",item2+"kV");
						dataMap.put("v13","≥60kV");
						if (Math.abs(pareseDouble2) >=60) {
							dataMap.put("v14","符合");
						}else {
							dataMap.put("v14","不符合");
						}
					}else if (item3.equals("1")) {
						dataMap.put("v12",item4+"kV");
						dataMap.put("v13","≥50kV");
						if (Math.abs(pareseDouble4) >=50) {
							dataMap.put("v14","符合");
						}else {
							dataMap.put("v14","不符合");
						}
					}else if (item6.equals("1")) {
						dataMap.put("v12",item4+"kV");
						dataMap.put("v13","≥50kV");
						if (Math.abs(pareseDouble7) >=50) {
							dataMap.put("v14","符合");
						}else {
							dataMap.put("v14","不符合");
						}
					}else if (item8.equals("1")) {
						dataMap.put("v12",item9+"kV");
						dataMap.put("v13","≥60kV");
						if (Math.abs(pareseDouble9) >=60) {
							dataMap.put("v14","符合");
						}else {
							dataMap.put("v14","不符合");
						}
					}else {
						dataMap.put("v12","");
						dataMap.put("v13","");
						dataMap.put("v14","-");
					}
					
					
					//1是管电压指示的偏离
				}else if (type == 1) {
					dataMap.put("v21","2");
					dataMap.put("v22","管电压指示的偏离");
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					int as = 0;
					for (int j = 0; j < objects.length; j++) {
						JSONObject a1 = JSONObject.fromObject(objects[j]);
						Object bean1 = JSONObject.toBean(a1);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean1;
						String tab1 = (String) morphDynaBean1.get("tab");
						logger.info("tab1="+tab1);
						String item = (String) morphDynaBean1.get("item1");
						logger.info("预设值="+item);
						String itemX = (String) morphDynaBean1.get("item6");
						logger.info("偏离度="+itemX);
						if (!tab1.equals("内机") && !item.equals("") && !item.equals("/") && !itemX.equals("") && !itemX.equals("/")) {
							Double pareseDouble = 0d;
							if (NumberUtils.isNumber(itemX)) {
								pareseDouble = Double.parseDouble(itemX);
							}
							
							//判断是否是第一次添加数据
							if(as == 0){
								dataMap.put("v23",tab1+""+item+"kV:"+itemX+"%");//检测结果
								dataMap.put("v24","±10%内");//标准限值
								
								if (Math.abs(pareseDouble) < 10) {
									dataMap.put("v25","符合");//结论
								}else{
									dataMap.put("v25","不符合");//结论
								}
							}else{
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setV1(tab1+""+item+"kV:"+itemX+"%");//检测结果
								pointData.setV2("±10%内");//标准限值
								
								if (Math.abs(pareseDouble) < 10) {
									pointData.setV3("符合");//结论
								}else{
									pointData.setV3("不符合");//结论
								}
								pointDatas1.add(pointData);
							}
							as++;
						}
					}
					
					//2是加载时间偏离
				}else if (type == 3) {
					dataMap.put("v31","3");
					dataMap.put("v32","加载时间偏离");
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					int as = 0;
					for (int j = 1; j < objects.length; j++) {
						JSONObject a1 = JSONObject.fromObject(objects[j]);
						Object bean1 = JSONObject.toBean(a1);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean1;
						String tab1 = (String) morphDynaBean1.get("tab");
						logger.info("tab1="+tab1);
						String item = (String) morphDynaBean1.get("item1");
						logger.info("预设值="+item);
						String itemA = (String) morphDynaBean1.get("item6");
						logger.info("偏离度="+itemA);
						String itemX = (String) morphDynaBean1.get("item7");
						logger.info("偏离="+itemX);
						if (!tab1.equals("内机") && !item.equals("") && !item.equals("/") && !itemX.equals("") && !itemX.equals("/")) {
							//判断有否有小数
							Double pareseDoubleX = 0d;
							Double pareseDoubleA = 0d;
							if (NumberUtils.isNumber(itemX)) {
								pareseDoubleX = Double.parseDouble(itemX);
							}
							if (NumberUtils.isNumber(itemA)) {
								pareseDoubleA = Double.parseDouble(itemA);
							}
							
						
								//判断是否是第一次添加数据
								if(as == 0){
									dataMap.put("v33",item+"ms:"+itemX+"ms");//检测结果
									dataMap.put("v34","±5%内或±20ms,取较大者");//标准限值
									
									if (Math.abs(pareseDoubleA) < 5 || Math.abs(pareseDoubleX) <20) {
										dataMap.put("v35","符合");//结论
									}else{
										dataMap.put("v35","不符合");//结论
									}
								}else{
									pointData = new ROMS_SZ_POINTDATA();
									pointData.setV1(item+"ms:"+itemX+"ms");//检测结果
									pointData.setV2("±5%内或±20ms,取较大者");//标准限值
									
									if (Math.abs(pareseDoubleA) < 5 || Math.abs(pareseDoubleX) <20) {
										pointData.setV3("符合");//结论
									}else{
										pointData.setV3("不符合");//结论
									}
									pointDatas2.add(pointData);
								}
								as++;
							
						}
						
						
					}
					//3是有用线束半值层
				}else if (type == 5) {
					dataMap.put("v41","4");
					dataMap.put("v42","有用线束半值层");
					AlgorithmUtil util = new AlgorithmUtil();
					Double kwj = 0d;
					DecimalFormat df = new DecimalFormat("######0.00");
					Double nominalCapacity = Double.parseDouble(task.getNominalCapacity());
					int as = 0;
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("设置1-3档设备常用管电压7="+item7);
					String item14 = (String) morphDynaBean.get("item14");
					logger.info("设置1-3档设备常用管电压14="+item14);
					String item21 = (String) morphDynaBean.get("item21");
					logger.info("设置1-3档设备常用管电压21="+item21);
					
					//选择口内机或者口外机全景摄影
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+(j*2-1));
						logger.info("管电压="+item);
						String itemX = (String) morphDynaBean.get("item"+(j*2));
						logger.info("HVL="+itemX);
						logger.info("value"+Double.parseDouble(itemX));
						logger.info("额定容量="+nominalCapacity);
						kwj = util.kwj(Double.parseDouble(itemX), nominalCapacity);
						logger.info("kwj="+kwj);
						if (!item.equals("") && !item.equals("/")) {
							if (item.equals("口外机全景摄影")) {
								//判断有否有小数
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {
									pareseDoubleX = Double.parseDouble(itemX);
								}
								
									//判断是否是第一次添加数据
									if(as == 0){
										dataMap.put("v43","全景摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										//判断是否为null
										if (kwj == null) {
											dataMap.put("v44","≥mmAl");//标准限值
											dataMap.put("v45","不符合");//结论
										}else{
											dataMap.put("v45","≥"+df.format(kwj)+"mmAl");//标准限值
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1("全景摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										} else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
											
										}
										pointDatas3.add(pointData);
									}
									as++;
							}
							
							
						}
						
					}
					//选择口外机头颅摄影
					for (int k = 1; k < 4; k++) {
						String item = (String) morphDynaBean.get("item"+(k*2+6));
						logger.info("管电压="+item);
						String itemX = (String) morphDynaBean.get("item"+(k*2+7));
						logger.info("HVL="+itemX);
						kwj = util.kwj(Double.parseDouble(itemX), nominalCapacity);
						if (!item.equals("") && !item.equals("/")) {
							if (item14.equals("口外机头颅摄影")) {
								logger.info("item14="+item14);
								//判断有否有小数
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {  
									pareseDoubleX = Double.parseDouble(itemX);
								}
									//判断是否是第一次添加数据
								logger.info("as="+as);
									if(as == 0){
										dataMap.put("v43","头颅摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											logger.info("kwj"+kwj);
											dataMap.put("v44","≥mmAl");//标准限值
											dataMap.put("v45","不符合");//结论
										}else {
											dataMap.put("v44","≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												dataMap.put("v45","符合");//结论
											}else{
												dataMap.put("v45","不符合");//结论
											}
										}
										logger.info(dataMap.get("v43")+"");
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1("头颅摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj ==  null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										}else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
										}
										pointDatas3.add(pointData);
									}
									as++;
							}
							
						}
					}
					//选择口腔CT或3D模式
					for (int k = 1; k <= 3; k++) {
						String item = (String) morphDynaBean.get("item"+(k*2+13));
						logger.info("管电压="+item);
						
						String itemX = (String) morphDynaBean.get("item"+(k*2+14));
						logger.info("HVL="+itemX);
						kwj = util.kwj(Double.parseDouble(itemX), nominalCapacity);
						if (!item.equals("") && !item.equals("/")) {
							if (item21.equals("口腔CT")) {
								//判断有否有小数
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {
									pareseDoubleX = Double.parseDouble(itemX);
								}
							
									//判断是否是第一次添加数据
									if(as == 0){
										dataMap.put("v43",item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											dataMap.put("v44","≥mmAl");//标准限值
											dataMap.put("v45","不符合");//结论
										}else {
											dataMap.put("v44","≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												dataMap.put("v45","符合");//结论
											}else{
												dataMap.put("v45","不符合");//结论
											}
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										}else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
										}
										pointDatas3.add(pointData);
									}
									as++;
							
							}else if (item21.equals("3D模式")) {
								//判断有否有小数 
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {
									pareseDoubleX = Double.parseDouble(itemX);
								}
								
									//判断是否是第一次添加数据
									if(as == 0){
										dataMap.put("v43",item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											dataMap.put("v44","≥mmAl");//标准限值
											dataMap.put("v45","不符合");//结论
										}else {
											dataMap.put("v44","≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												dataMap.put("v45","符合");//结论
											}else{
												dataMap.put("v45","不符合");//结论
											}
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										}else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
										}
										pointDatas3.add(pointData);
									}
									as++;
							}
						}
					}
					//5是高对比分辨力
				}else if (type == 7) {
					dataMap.put("v51","5");
					dataMap.put("v52","高对比分辨力");
					int as = 0;
					for (int j = 1; j < 3; j++) {
						String item = (String) morphDynaBean.get("item"+(j+5));
						logger.info("lp/mm="+item);
						String tab1 = "";
						if (j == 1) {
							tab1 = "口外机全景摄影";
						}else if (j == 2) {
							tab1 = "口外机头颅摄影";
						}
						logger.info("tab1="+tab1);
						if (!item.equals("") && !item.equals("/")) {
							Double pareseDouble = 0d;
							if (NumberUtils.isNumber(item)) {
								pareseDouble = Double.parseDouble(item);
							}
							
							//判断是否是第一次添加数据
							if(as == 0){
								dataMap.put("v53",tab1+"可分辨0.5mm厚铝板上:"+item+"mm");//检测结果
								dataMap.put("v54","可分辨0.5mm厚铝板上1mm直径孔");//标准限值
								
								if (Math.abs(pareseDouble) == 1) {
									dataMap.put("v55","符合");//结论
								}else{
									dataMap.put("v55","不符合");//结论
								}
							}else{
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setV1(tab1+"可分辨0.5mm厚铝板上:"+item+"mm");//检测结果
								pointData.setV2("可分辨0.5mm厚铝板上1mm直径孔");//标准限值
								
								if (Math.abs(pareseDouble) == 1) {
									pointData.setV3("符合");//结论
								}else{
									pointData.setV3("不符合");//结论
								}
								pointDatas4.add(pointData);
							}
							as++;
						}
					}
					//6是低对比分辨力
				}else if (type == 8) {
					dataMap.put("v61","6");
					dataMap.put("v62","低对比分辨力");
					int as = 0;
					for (int j = 1; j < 3; j++) {
						String item = (String) morphDynaBean.get("item"+(j+5));
						logger.info("lp/mm="+item);
						String tab1 = "";
						if (j == 1) {
							tab1 = "口外机全景摄影";
						}else if (j == 2) {
							tab1 = "口外机头颅摄影";
						}  
						logger.info("tab1="+tab1);
						if (!tab1.equals("内机") && !item.equals("") && !item.equals("/")) {
							Double pareseDouble = 0d;
							if (NumberUtils.isNumber(item)) {
								pareseDouble = Double.parseDouble(item);
							}
							
							//判断是否是第一次添加数据
							if(as == 0){
								dataMap.put("v63",tab1+":可分辨0.5mm厚铝板上"+item+"mm直径孔");//检测结果
								dataMap.put("v64","可分辨0.5mm厚铝板上1mm直径孔");//标准限值
								
								if (Math.abs(pareseDouble) == 1) {
									dataMap.put("v65","符合");//结论
								}else{
									dataMap.put("v65","不符合");//结论
								}
							}else{
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setV1(tab1+":可分辨0.5mm厚铝板上"+item+"mm直径孔");//检测结果
								pointData.setV2("可分辨0.5mm厚铝板上1mm直径孔");//标准限值
								
								if (Math.abs(pareseDouble) == 1) {
									pointData.setV3("符合");//结论
								}else{
									pointData.setV3("不符合");//结论
								}
								pointDatas5.add(pointData);  
							}
							as++;
						}
					}
				}
			}
			
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int as = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (as != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					as ++;
				}
			}
		    
			//判断结论是否符合
			if (pass == 0) {
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，所检项目的检测结果均符合标准要求。");
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，"+isNoName+"的检测结果不符合标准要求，其余所检项目的检测结果符合标准要求。");
			}
			
			pointData = new ROMS_SZ_POINTDATA();
			pointData.setNote((notes.size()+1)+".曝光时间指示的偏离标准要求为：±[10%读数（检测条件）＋1ms]。");
			notes.add(pointData);
			
			dataMap.put("notes",notes);
		    dataMap.put("pointDatas1",pointDatas1);
		    dataMap.put("pointDatas2",pointDatas2);
		    dataMap.put("pointDatas3",pointDatas3);
		    dataMap.put("pointDatas4",pointDatas4);
		    dataMap.put("pointDatas5",pointDatas5);
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			String ftl = "/fs_ykqjj_xn1.ftl";

			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
		    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	
	
	/**
	 * 生成口腔CT性能报告
	 * @return
	 */
	@SuppressWarnings({ "static-access", "deprecation" })
	public String report_fs_kqct_xn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_kqct_xn_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
//		int isKd = 0;//0是电压可调,1是电压固定
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
		    String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    String[] isNo = new String[10];//不合格的项目
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
//			SimpleDateFormat s_sdf=new SimpleDateFormat("dd");//秒
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
//			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
//					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
//							"task.createtime LIKE '%"+yMd+"%' AND " +
//							"deviceType.deviceMain='1'";
//			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("deviceType",task.getDeviceType());//设备类型
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    dataMap.put("note1","");//注
		    dataMap.put("testingProject","");//检测项目（下面有赋值）
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = "";
		    
		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
			System.out.println("检测长度="+str.length);
			for (int i = 0; i < str.length; i++) {
				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
				standard.setStandard(str[i]);
				
				standards.add(standard);
				
				//拼一个字符串用于结论
				if (i != 0) {
					standard1 += "和";
				}
				standard1 += str[i];
			}
			dataMap.put("standards",standards);//检测依据
			
			//取出设备用途判断
//		    String item22 = task.getItem2();
//		    String purpose = "";
//		    if (item22.substring(0, 1).equals("1")) {
//				purpose += "  口内牙片摄影";
//			}
//			if (item22.substring(1, 2).equals("1")) {
//				purpose += "  头颅摄影";
//			}
//			if (item22.substring(2, 3).equals("1")) {
//				purpose += "  全景扫描";
//			}
//			if (item22.substring(3, 4).equals("1")) {
//				purpose += "  立位/站位口腔三维扫描";
//			}
//			if (item22.substring(4, 5).equals("1")) {
//				purpose += "  卧位口腔三维扫描";
//			}
//		    dataMap.put("purpose",purpose);//设备用途
			dataMap.put("purpose","");//设备用途
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    //仪器
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
			    correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
		    	correctNums.add(correctNum);
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    ROMS_SZ_POINTDATA pointData = null;
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();//管电压指示的偏离
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();//加载时间的偏离
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();//半值层
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				
				logger.info("1是管电压，2是管电压指示的偏离，3是加载时间偏离，4是半值层" +type);
				
				//1管电压
				if (type == 0) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("item9="+item9);
					double pareseDouble2 =0d;
					double pareseDouble4 =0d;
					double pareseDouble7 =0d;
					double pareseDouble9 =0d;
					//判断是否为数字
					if (NumberUtils.isNumber(item2)) {
						pareseDouble2 = Double.parseDouble(item2);
					}
					if (NumberUtils.isNumber(item4)) {
						pareseDouble4 = Double.parseDouble(item4);
					}
					if (NumberUtils.isNumber(item7)) {
						pareseDouble7 = Double.parseDouble(item7);
					}
					if (NumberUtils.isNumber(item9)) {
						pareseDouble9 = Double.parseDouble(item9);
					}
					
					//检测结果的判断
					if (item1.equals("1")) {
						dataMap.put("v11","1");
						dataMap.put("v12","管电压");  
						dataMap.put("v13",item2+"kV");
						dataMap.put("v14","≥60kV");
						if (Math.abs(pareseDouble2) >=60) {
							dataMap.put("v15","符合");
						}else {
							dataMap.put("v15","不符合");
						}
					}else if (item3.equals("1")) {
						dataMap.put("v13",item4+"kV");
						dataMap.put("v14","≥50kV");
						if (Math.abs(pareseDouble4) >=50) {
							dataMap.put("v15","符合");
						}else {
							dataMap.put("v15","不符合");
						}
					}else if (item6.equals("1")) {
						dataMap.put("v13",item4+"kV");
						dataMap.put("v14","≥50kV");
						if (Math.abs(pareseDouble7) >=50) {
							dataMap.put("v15","符合");
						}else {
							dataMap.put("v15","不符合");
						}
					}else if (item8.equals("1")) {
						dataMap.put("v13",item9+"kV");
						dataMap.put("v14","≥60kV");
						if (Math.abs(pareseDouble9) >=60) {
							dataMap.put("v15","符合");
						}else {
							dataMap.put("v15","不符合");
						}
					}else {
						dataMap.put("v13","");
						dataMap.put("v14","");
						dataMap.put("v15","-");
					}
					
					
					//2是管电压指示的偏离
				}else if (type == 1) {
					dataMap.put("v21","2");
					dataMap.put("v22","管电压指示的偏离");
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					int as = 0;
					for (int j = 0; j < objects.length; j++) {
						JSONObject a1 = JSONObject.fromObject(objects[j]);
						Object bean1 = JSONObject.toBean(a1);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean1;
						String tab1 = (String) morphDynaBean1.get("tab");
						logger.info("tab1="+tab1);
						String item = (String) morphDynaBean1.get("item1");
						logger.info("预设值="+item);
						String itemX = (String) morphDynaBean1.get("item6");
						logger.info("偏离度="+itemX);
						if (!tab1.equals("内机") && !item.equals("") && !item.equals("/") && !itemX.equals("") && !itemX.equals("/")) {
							Double pareseDouble = 0d;
							if (NumberUtils.isNumber(itemX)) {
								pareseDouble = Double.parseDouble(itemX);
							}
							
							//判断是否是第一次添加数据
							if(as == 0){
								dataMap.put("v23",tab1+""+item+"kV:"+itemX+"%");//检测结果
								dataMap.put("v24","±10%内");//标准限值
								
								if (Math.abs(pareseDouble) < 10) {
									dataMap.put("v25","符合");//结论
								}else{
									dataMap.put("v25","不符合");//结论
								}
							}else{
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setV1(tab1+""+item+"kV:"+itemX+"%");//检测结果
								pointData.setV2("±10%内");//标准限值
								
								if (Math.abs(pareseDouble) < 10) {
									pointData.setV3("符合");//结论
								}else{
									pointData.setV3("不符合");//结论
								}
								pointDatas1.add(pointData);
							}
							as++;
						}
					}
					
					//3是曝光时间指示的偏离
				}else if (type == 4) {
					dataMap.put("v31","3");
					dataMap.put("v32","加载时间偏离");
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					int as = 0;
					for (int j = 0; j < objects.length; j++) {
						JSONObject a1 = JSONObject.fromObject(objects[j]);
						Object bean1 = JSONObject.toBean(a1);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean1;
						String tab1 = (String) morphDynaBean1.get("tab");
						logger.info("tab1="+tab1);
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("预设值="+item1);
						String item6 = (String) morphDynaBean1.get("item6");
						logger.info("偏离度="+item6);
						String item7 = (String) morphDynaBean1.get("item7");
						logger.info("偏离="+item7);
						//判断有否有小数
						Double pareseDouble1 = 0d;
						Double pareseDouble6 = 0d;
						Double pareseDouble7 = 0d;
						if (NumberUtils.isNumber(item1)) {
							pareseDouble1 = Double.parseDouble(item1);
						}
						if (NumberUtils.isNumber(item6)) {
							pareseDouble6 = Double.parseDouble(item6);
						}
						if (NumberUtils.isNumber(item7)) {
							pareseDouble7 = Double.parseDouble(item7);
						}
						if (!item1.equals("") && !item1.equals("/")) {
							if (tab1.equals("口腔CT")) {
								//判断是否是第一次添加数据
								if(as == 0){
									dataMap.put("v33",item1+"ms:"+item7+"ms");//检测结果
									dataMap.put("v34","±(10%读数+1ms)");//标准限值
									
									if (Math.abs(pareseDouble1) < 1 || Math.abs(pareseDouble6) <10) {
										dataMap.put("v35","符合");//结论
									}else{
										dataMap.put("v35","不符合");//结论
									}
								}else{
									pointData = new ROMS_SZ_POINTDATA();
									pointData.setV1(item1+"ms:"+item7+"ms");//检测结果
									pointData.setV2("±(10%读数+1ms)");//标准限值
									
									if (Math.abs(pareseDouble1) < 1 || Math.abs(pareseDouble7) <10) {
										pointData.setV3("符合");//结论
									}else{
										pointData.setV3("不符合");//结论
									}
									pointDatas2.add(pointData);
								}
								as++;
							}
						}
					}
					//4是半值层
				}else if (type == 5) {
					dataMap.put("v41","4");
					dataMap.put("v42","有用线束半值层");
					AlgorithmUtil util = new AlgorithmUtil();
					Double kwj = 0d;
					DecimalFormat df = new DecimalFormat("######0.00");
					Double nominalCapacity = Double.parseDouble(task.getNominalCapacity());
					int as = 0;
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("设置1-3档设备常用管电压7="+item7);
					String item14 = (String) morphDynaBean.get("item14");
					logger.info("设置1-3档设备常用管电压14="+item14);
					String item21 = (String) morphDynaBean.get("item21");
					logger.info("设置1-3档设备常用管电压21="+item21);
					
					//选择口内机或者口外机全景摄影
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+(j*2-1));
						logger.info("管电压="+item);
						String itemX = (String) morphDynaBean.get("item"+(j*2));
						logger.info("HVL="+itemX);
						logger.info("value"+Double.parseDouble(itemX));
						logger.info("额定容量="+nominalCapacity);
						kwj = util.kwj(Double.parseDouble(itemX), nominalCapacity);
						logger.info("kwj="+kwj);
						if (!item.equals("") && !item.equals("/")) {
							if (item.equals("口外机全景摄影")) {
								//判断有否有小数
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {
									pareseDoubleX = Double.parseDouble(itemX);
								}
								
									//判断是否是第一次添加数据
									if(as == 0){
										dataMap.put("v43","全景摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										//判断是否为null
										if (kwj == null) {
											dataMap.put("v44","≥mmAl");//标准限值
											dataMap.put("v45","不符合");//结论
										}else{
											dataMap.put("v45","≥"+df.format(kwj)+"mmAl");//标准限值
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1("全景摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										} else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
											
										}
										pointDatas3.add(pointData);
									}
									as++;
							}
							
							
						}
						
					}
					//选择口外机头颅摄影
					for (int k = 1; k < 4; k++) {
						String item = (String) morphDynaBean.get("item"+(k*2+6));
						logger.info("管电压="+item);
						String itemX = (String) morphDynaBean.get("item"+(k*2+7));
						logger.info("HVL="+itemX);
						kwj = util.kwj(Double.parseDouble(itemX), nominalCapacity);
						if (!item.equals("") && !item.equals("/")) {
							if (item14.equals("口外机头颅摄影")) {
								logger.info("item14="+item14);
								//判断有否有小数
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {  
									pareseDoubleX = Double.parseDouble(itemX);
								}
									//判断是否是第一次添加数据
								logger.info("as="+as);
									if(as == 0){
										dataMap.put("v43","头颅摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											logger.info("kwj"+kwj);
											dataMap.put("v44","≥mmAl");//标准限值
											dataMap.put("v45","不符合");//结论
										}else {
											dataMap.put("v44","≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												dataMap.put("v45","符合");//结论
											}else{
												dataMap.put("v45","不符合");//结论
											}
										}
										logger.info(dataMap.get("v43")+"");
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1("头颅摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj ==  null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										}else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
										}
										pointDatas3.add(pointData);
									}
									as++;
							}
							
						}
					}
					//选择口腔CT或3D模式
					for (int k = 1; k <= 3; k++) {
						String item = (String) morphDynaBean.get("item"+(k*2+13));
						logger.info("管电压="+item);
						
						String itemX = (String) morphDynaBean.get("item"+(k*2+14));
						logger.info("HVL="+itemX);
						kwj = util.kwj(Double.parseDouble(itemX), nominalCapacity);
						if (!item.equals("") && !item.equals("/")) {
							if (item21.equals("口腔CT")) {
								//判断有否有小数
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {
									pareseDoubleX = Double.parseDouble(itemX);
								}
							
									//判断是否是第一次添加数据
									if(as == 0){
										dataMap.put("v43",item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											dataMap.put("v44","≥mmAl");//标准限值
											dataMap.put("v45","不符合");//结论
										}else {
											dataMap.put("v44","≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												dataMap.put("v45","符合");//结论
											}else{
												dataMap.put("v45","不符合");//结论
											}
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										}else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
										}
										pointDatas3.add(pointData);
									}
									as++;
							
							}else if (item21.equals("3D模式")) {
								//判断有否有小数 
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {
									pareseDoubleX = Double.parseDouble(itemX);
								}
								
									//判断是否是第一次添加数据
									if(as == 0){
										dataMap.put("v43",item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											dataMap.put("v44","≥mmAl");//标准限值
											dataMap.put("v45","不符合");//结论
										}else {
											dataMap.put("v44","≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												dataMap.put("v45","符合");//结论
											}else{
												dataMap.put("v45","不符合");//结论
											}
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										}else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
										}
										pointDatas3.add(pointData);
									}
									as++;
							}
						}
					}
				}
			}
			
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int as = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (as != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					as ++;
				}
			}
		    
			//判断结论是否符合
			if (pass == 0) {
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，所检项目的检测结果均符合标准要求。");
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，"+isNoName+"的检测结果不符合标准要求，其余所检项目的检测结果符合标准要求。");
			}
			
			pointData = new ROMS_SZ_POINTDATA();
			pointData.setNote((notes.size()+1)+".曝光时间指示的偏离标准要求为：±[10%读数（检测条件）＋1ms]。");
			notes.add(pointData);
			
			dataMap.put("notes",notes);
		    dataMap.put("pointDatas1",pointDatas1);
		    dataMap.put("pointDatas2",pointDatas2);
		    dataMap.put("pointDatas3",pointDatas3);
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			String ftl = "/fs_kqct_xn.ftl";

			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
		    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	
	
	/**
	 * 生成口内牙片机性能报告
	 * @return
	 */
	@SuppressWarnings({ "static-access", "deprecation" })
	public String report_fs_knypj_xn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_knypj_xn_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
//		int isKd = 0;//0是电压可调,1是电压固定
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
		    String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    String[] isNo = new String[10];//不合格的项目
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
//			SimpleDateFormat s_sdf=new SimpleDateFormat("dd");//秒
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
//			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
//					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
//							"task.createtime LIKE '%"+yMd+"%' AND " +
//							"deviceType.deviceMain='1'";
//			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("deviceType",task.getDeviceType());//设备类型
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    dataMap.put("note1","");//注
		    dataMap.put("testingProject","");//检测项目（下面有赋值）
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    String standard1 = "";
		    
		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
			System.out.println("检测长度="+str.length);
			for (int i = 0; i < str.length; i++) {
				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
				standard.setStandard(str[i]);
				
				standards.add(standard);
				
				//拼一个字符串用于结论
				if (i != 0) {
					standard1 += "和";
				}
				standard1 += str[i];
			}
			dataMap.put("standards",standards);//检测依据
			
			//取出设备用途判断
//		    String item22 = task.getItem2();
//		    String purpose = "";
//		    if (item22.substring(0, 1).equals("1")) {
//				purpose += "  口内牙片摄影";
//			}
//			if (item22.substring(1, 2).equals("1")) {
//				purpose += "  头颅摄影";
//			}
//			if (item22.substring(2, 3).equals("1")) {
//				purpose += "  全景扫描";
//			}
//			if (item22.substring(3, 4).equals("1")) {
//				purpose += "  立位/站位口腔三维扫描";
//			}
//			if (item22.substring(4, 5).equals("1")) {
//				purpose += "  卧位口腔三维扫描";
//			}
//		    dataMap.put("purpose",purpose);//设备用途
			dataMap.put("purpose","");//设备用途
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    //仪器
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
			    correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
		    	correctNums.add(correctNum);
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    ROMS_SZ_POINTDATA pointData = null;
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();//管电压指示的偏离
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();//加载时间的偏离
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();//有用线束半值层
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();//高对比分辨力
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas5 = new ArrayList<ROMS_SZ_POINTDATA>();//低对比分辨力
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("1是管电压,2是管电压指示的偏离,3是辐射输出量的重复性,4是加载时间偏离,5是有用线束半值层" +
						"6是高对比分辨力,7是低对比分辨力=,8是焦皮距,9是集光筒出口平面的最大几何尺寸（直径/对角线）=" +type);
				
				//1管电压
				if (type == 0) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("item9="+item9);
					double pareseDouble2 =0d;
					double pareseDouble4 =0d;
					double pareseDouble7 =0d;
					double pareseDouble9 =0d;
					//判断是否为数字
					if (NumberUtils.isNumber(item2)) {
						pareseDouble2 = Double.parseDouble(item2);
					}
					if (NumberUtils.isNumber(item4)) {
						pareseDouble4 = Double.parseDouble(item4);
					}
					if (NumberUtils.isNumber(item7)) {
						pareseDouble7 = Double.parseDouble(item7);
					}
					if (NumberUtils.isNumber(item9)) {
						pareseDouble9 = Double.parseDouble(item9);
					}
					
					//检测结果的判断
					if (item1.equals("1")) {
						dataMap.put("v11","1");
						dataMap.put("v12","管电压");  
						dataMap.put("v13",item2+"kV");
						dataMap.put("v14","≥60kV");
						if (Math.abs(pareseDouble2) >=60) {
							dataMap.put("v15","符合");
						}else {
							dataMap.put("v15","不符合");
						}
					}else if (item3.equals("1")) {
						dataMap.put("v13",item4+"kV");
						dataMap.put("v14","≥50kV");
						if (Math.abs(pareseDouble4) >=50) {
							dataMap.put("v15","符合");
						}else {
							dataMap.put("v15","不符合");
						}
					}else if (item6.equals("1")) {
						dataMap.put("v13",item4+"kV");
						dataMap.put("v14","≥50kV");
						if (Math.abs(pareseDouble7) >=50) {
							dataMap.put("v15","符合");
						}else {
							dataMap.put("v15","不符合");
						}
					}else if (item8.equals("1")) {
						dataMap.put("v13",item9+"kV");
						dataMap.put("v14","≥60kV");
						if (Math.abs(pareseDouble9) >=60) {
							dataMap.put("v15","符合");
						}else {
							dataMap.put("v15","不符合");
						}
					}else {
						dataMap.put("v13","");
						dataMap.put("v14","");
						dataMap.put("v15","-");
					}
					
					
					//2是管电压指示的偏离
				}else if (type == 1) {
					dataMap.put("v21","2");
					dataMap.put("v22","管电压指示的偏离");
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					int as = 0;
					for (int j = 0; j < objects.length; j++) {
						JSONObject a1 = JSONObject.fromObject(objects[j]);
						Object bean1 = JSONObject.toBean(a1);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean1;
						String tab1 = (String) morphDynaBean1.get("tab");
						logger.info("tab1="+tab1);
						String item = (String) morphDynaBean1.get("item1");
						logger.info("预设值="+item);
						String itemX = (String) morphDynaBean1.get("item6");
						logger.info("偏离度="+itemX);
						if (!tab1.equals("内机") && !item.equals("") && !item.equals("/") && !itemX.equals("") && !itemX.equals("/")) {
							Double pareseDouble = 0d;
							if (NumberUtils.isNumber(itemX)) {
								pareseDouble = Double.parseDouble(itemX);
							}
							
							//判断是否是第一次添加数据
							if(as == 0){
								dataMap.put("v23",tab1+""+item+"kV:"+itemX+"%");//检测结果
								dataMap.put("v24","±10%内");//标准限值
								
								if (Math.abs(pareseDouble) < 10) {
									dataMap.put("v25","符合");//结论
								}else{
									dataMap.put("v25","不符合");//结论
								}
							}else{
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setV1(tab1+""+item+"kV:"+itemX+"%");//检测结果
								pointData.setV2("±10%内");//标准限值
								
								if (Math.abs(pareseDouble) < 10) {
									pointData.setV3("符合");//结论
								}else{
									pointData.setV3("不符合");//结论
								}
								pointDatas1.add(pointData);
							}
							as++;
						}
					}
					
					//2辐射输出量重复性（仅适用于口内机）
				}else if (type == 2) {
					dataMap.put("v31","3");
					dataMap.put("v32","辐射输出量重复性（仅适用于口内机）");
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("输出重复性（CV）="+item4);
					int as = 0;
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					if (!item4.equals("") && !item4.equals("/")) {
						Double pareseDouble4 = 0d;
						if (NumberUtils.isNumber(item4)) {
							pareseDouble4 = Double.parseDouble(item4);
						}
						//判断是否是第一次添加数据
						if(as == 0){
							dataMap.put("v33",item4+"%");//检测结果
							dataMap.put("v34","≤5%");//标准限值
							
							if (Math.abs(pareseDouble4) <= 5) {
								dataMap.put("v35","符合");//结论
							}else{
								dataMap.put("v35","不符合");//结论
							}
						}else{
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setV1(item4+"%");//检测结果
							pointData.setV2("≤5%");//标准限值
							
							if (Math.abs(pareseDouble4) <= 5 ) {
								pointData.setV3("符合");//结论
							}else{
								pointData.setV3("不符合");//结论
							}
							pointDatas2.add(pointData);
						}
						as++;
					}
					//4是加载时间偏离  
				}else if (type == 3) {
					dataMap.put("v41","4");
					dataMap.put("v42","加载时间偏离");
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					int as = 0;
					for (int j = 1; j < objects.length; j++) {
						JSONObject a1 = JSONObject.fromObject(objects[j]);
						Object bean1 = JSONObject.toBean(a1);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean1;
						String tab1 = (String) morphDynaBean1.get("tab");
						logger.info("tab1="+tab1);
						String item = (String) morphDynaBean1.get("item1");
						logger.info("预设值="+item);
						String itemA = (String) morphDynaBean1.get("item6");
						logger.info("偏离度="+itemA);
						String itemX = (String) morphDynaBean1.get("item7");
						logger.info("偏离="+itemX);
						if (!tab1.equals("内机") && !item.equals("") && !item.equals("/") && !itemX.equals("") && !itemX.equals("/")) {
							//判断有否有小数
							Double pareseDoubleX = 0d;
							Double pareseDoubleA = 0d;
							if (NumberUtils.isNumber(itemX)) {
								pareseDoubleX = Double.parseDouble(itemX);
							}
							if (NumberUtils.isNumber(itemA)) {
								pareseDoubleA = Double.parseDouble(itemA);
							}
							
						
								//判断是否是第一次添加数据
								if(as == 0){
									dataMap.put("v43",item+"ms:"+itemX+"ms");//检测结果
									dataMap.put("v44","±5%内或±20ms,取较大者");//标准限值
									
									if (Math.abs(pareseDoubleA) < 5 || Math.abs(pareseDoubleX) <20) {
										dataMap.put("v45","符合");//结论
									}else{
										dataMap.put("v45","不符合");//结论
									}
								}else{
									pointData = new ROMS_SZ_POINTDATA();
									pointData.setV1(item+"ms:"+itemX+"ms");//检测结果
									pointData.setV2("±5%内或±20ms,取较大者");//标准限值
									
									if (Math.abs(pareseDoubleA) < 5 || Math.abs(pareseDoubleX) <20) {
										pointData.setV3("符合");//结论
									}else{
										pointData.setV3("不符合");//结论
									}
									pointDatas2.add(pointData);
								}
								as++;
							
						}
						
						
					}
				
					//5是有用线束半值层
				}else if (type == 5) {
					dataMap.put("v51","5");
					dataMap.put("v52","有用线束半值层");
					AlgorithmUtil util = new AlgorithmUtil();
					Double kwj = 0d;
					DecimalFormat df = new DecimalFormat("######0.00");
					Double nominalCapacity = Double.parseDouble(task.getNominalCapacity());
					int as = 0;
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("设置1-3档设备常用管电压7="+item7);
					String item14 = (String) morphDynaBean.get("item14");
					logger.info("设置1-3档设备常用管电压14="+item14);
					String item21 = (String) morphDynaBean.get("item21");
					logger.info("设置1-3档设备常用管电压21="+item21);
					
					//选择口内机或者口外机全景摄影
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+(j*2-1));
						logger.info("管电压="+item);
						String itemX = (String) morphDynaBean.get("item"+(j*2));
						logger.info("HVL="+itemX);
						logger.info("value"+Double.parseDouble(itemX));
						logger.info("额定容量="+nominalCapacity);
						kwj = util.kwj(Double.parseDouble(itemX), nominalCapacity);
						logger.info("kwj="+kwj);
						if (!item.equals("") && !item.equals("/")) {
							if (item.equals("口外机全景摄影")) {
								//判断有否有小数
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {
									pareseDoubleX = Double.parseDouble(itemX);
								}
								
									//判断是否是第一次添加数据
									if(as == 0){
										dataMap.put("v53","全景摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										//判断是否为null
										if (kwj == null) {
											dataMap.put("v54","≥mmAl");//标准限值
											dataMap.put("v55","不符合");//结论
										}else{
											dataMap.put("v55","≥"+df.format(kwj)+"mmAl");//标准限值
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1("全景摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										} else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
											
										}
										pointDatas3.add(pointData);
									}
									as++;
							}
							
							
						}
						
					}
					//选择口外机头颅摄影
					for (int k = 1; k < 4; k++) {
						String item = (String) morphDynaBean.get("item"+(k*2+6));
						logger.info("管电压="+item);
						String itemX = (String) morphDynaBean.get("item"+(k*2+7));
						logger.info("HVL="+itemX);
						kwj = util.kwj(Double.parseDouble(itemX), nominalCapacity);
						if (!item.equals("") && !item.equals("/")) {
							if (item14.equals("口外机头颅摄影")) {
								logger.info("item14="+item14);
								//判断有否有小数
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {  
									pareseDoubleX = Double.parseDouble(itemX);
								}
									//判断是否是第一次添加数据
								logger.info("as="+as);
									if(as == 0){
										dataMap.put("v53","头颅摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											logger.info("kwj"+kwj);
											dataMap.put("v54","≥mmAl");//标准限值
											dataMap.put("v55","不符合");//结论
										}else {
											dataMap.put("v54","≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												dataMap.put("v55","符合");//结论
											}else{
												dataMap.put("v55","不符合");//结论
											}
										}
										logger.info(dataMap.get("v53")+"");
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1("头颅摄影"+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj ==  null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										}else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
										}
										pointDatas3.add(pointData);
									}
									as++;
							}
							
						}
					}
					//选择口腔CT或3D模式
					for (int k = 1; k <= 3; k++) {
						String item = (String) morphDynaBean.get("item"+(k*2+13));
						logger.info("管电压="+item);
						
						String itemX = (String) morphDynaBean.get("item"+(k*2+14));
						logger.info("HVL="+itemX);
						kwj = util.kwj(Double.parseDouble(itemX), nominalCapacity);
						if (!item.equals("") && !item.equals("/")) {
							if (item21.equals("口腔CT")) {
								//判断有否有小数
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {
									pareseDoubleX = Double.parseDouble(itemX);
								}
							
									//判断是否是第一次添加数据
									if(as == 0){
										dataMap.put("v53",item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											dataMap.put("v54","≥mmAl");//标准限值
											dataMap.put("v55","不符合");//结论
										}else {
											dataMap.put("v54","≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												dataMap.put("v55","符合");//结论
											}else{
												dataMap.put("v55","不符合");//结论
											}
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										}else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
										}
										pointDatas3.add(pointData);
									}
									as++;
							
							}else if (item21.equals("3D模式")) {
								//判断有否有小数 
								Double pareseDoubleX = 0d;
								if (NumberUtils.isNumber(itemX)) {
									pareseDoubleX = Double.parseDouble(itemX);
								}
								
									//判断是否是第一次添加数据
									if(as == 0){
										dataMap.put("v53",item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											dataMap.put("v54","≥mmAl");//标准限值
											dataMap.put("v55","不符合");//结论
										}else {
											dataMap.put("v54","≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												dataMap.put("v55","符合");//结论
											}else{
												dataMap.put("v55","不符合");//结论
											}
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item21+item+"kV:"+itemX+"mmAl");//检测结果
										if (kwj == null) {
											pointData.setV2("≥mmAl");//标准限值
											pointData.setV3("不符合");//结论
										}else {
											pointData.setV2("≥"+df.format(kwj)+"mmAl");//标准限值
											if (Math.abs(pareseDoubleX) >= kwj) {
												pointData.setV3("符合");//结论
											}else{
												pointData.setV3("不符合");//结论
											}
										}
										pointDatas3.add(pointData);
									}
									as++;
							}
						}
					}
					//6是高对比分辨力
				}else if (type == 7) {
					dataMap.put("v61","6");
					dataMap.put("v62","高对比分辨力");
					int as = 0;
					for (int j = 1; j < 3; j++) {
						String item = (String) morphDynaBean.get("item"+(j+5));
						logger.info("lp/mm="+item);
						String tab1 = "";
						if (j == 1) {
							tab1 = "口外机全景摄影";
						}else if (j == 2) {
							tab1 = "口外机头颅摄影";
						}
						logger.info("tab1="+tab1);
						if (!item.equals("") && !item.equals("/")) {
							Double pareseDouble = 0d;
							if (NumberUtils.isNumber(item)) {
								pareseDouble = Double.parseDouble(item);
							}
							
							//判断是否是第一次添加数据
							if(as == 0){
								dataMap.put("v63",tab1+"可分辨0.5mm厚铝板上:"+item+"mm");//检测结果
								dataMap.put("v64","可分辨0.5mm厚铝板上1mm直径孔");//标准限值
								
								if (Math.abs(pareseDouble) == 1) {
									dataMap.put("v65","符合");//结论
								}else{
									dataMap.put("v65","不符合");//结论
								}
							}else{
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setV1(tab1+"可分辨0.5mm厚铝板上:"+item+"mm");//检测结果
								pointData.setV2("可分辨0.5mm厚铝板上1mm直径孔");//标准限值
								
								if (Math.abs(pareseDouble) == 1) {
									pointData.setV3("符合");//结论
								}else{
									pointData.setV3("不符合");//结论
								}
								pointDatas4.add(pointData);
							}
							as++;
						}
					}
					//7是低对比分辨力
				}else if (type == 8) {
					dataMap.put("v71","6");
					dataMap.put("v72","低对比分辨力");
					int as = 0;
					for (int j = 1; j < 3; j++) {
						String item = (String) morphDynaBean.get("item"+(j+5));
						logger.info("lp/mm="+item);
						String tab1 = "";
						if (j == 1) {
							tab1 = "口外机全景摄影";
						}else if (j == 2) {
							tab1 = "口外机头颅摄影";
						}  
						logger.info("tab1="+tab1);
						if (!tab1.equals("内机") && !item.equals("") && !item.equals("/")) {
							Double pareseDouble = 0d;
							if (NumberUtils.isNumber(item)) {
								pareseDouble = Double.parseDouble(item);
							}
							
							//判断是否是第一次添加数据
							if(as == 0){
								dataMap.put("v73",tab1+":可分辨0.5mm厚铝板上"+item+"mm直径孔");//检测结果
								dataMap.put("v74","可分辨0.5mm厚铝板上1mm直径孔");//标准限值
								
								if (Math.abs(pareseDouble) == 1) {
									dataMap.put("v75","符合");//结论
								}else{
									dataMap.put("v75","不符合");//结论
								}
							}else{
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setV1(tab1+":可分辨0.5mm厚铝板上"+item+"mm直径孔");//检测结果
								pointData.setV2("可分辨0.5mm厚铝板上1mm直径孔");//标准限值
								
								if (Math.abs(pareseDouble) == 1) {
									pointData.setV3("符合");//结论
								}else{
									pointData.setV3("不符合");//结论
								}
								pointDatas5.add(pointData);  
							}
							as++;
						}
					}
					//8焦皮距
				}else if (type == 11) {
					dataMap.put("v81","8");
					dataMap.put("v82","焦皮距");
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("焦皮距="+item4);
				}
			}
			
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int as = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (as != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					as ++;
				}
			}
		    
			//判断结论是否符合
			if (pass == 0) {
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，所检项目的检测结果均符合标准要求。");
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，"+isNoName+"的检测结果不符合标准要求，其余所检项目的检测结果符合标准要求。");
			}
			
			pointData = new ROMS_SZ_POINTDATA();
			pointData.setNote((notes.size()+1)+".曝光时间指示的偏离标准要求为：±[10%读数（检测条件）＋1ms]。");
			notes.add(pointData);
			
			dataMap.put("notes",notes);
		    dataMap.put("pointDatas1",pointDatas1);
		    dataMap.put("pointDatas2",pointDatas2);
		    dataMap.put("pointDatas3",pointDatas3);
		    dataMap.put("pointDatas4",pointDatas4);
		    dataMap.put("pointDatas5",pointDatas5);
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			String ftl = "/fs_ykqjj_xn1.ftl";

			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
		    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	
	/**
	 * 生成DR摄影性能报告
	 * @return
	 */
	@SuppressWarnings("deprecation")
	public String report_fs_dr_xn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_dr_xn_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
		    String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    String[] isNo = new String[30];//不合格的项目
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
//			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
//					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
//							"task.createtime LIKE '%"+yMd+"%' AND " +
//							"deviceType.deviceMain='1'";
//			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";  
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject","详见表4");//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("conditions","");//检测条件
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    dataMap.put("purpose","DR摄影 ");//设备用途
		    
		    String monitorType = task.getMonitorType();
		    String standard1 = task.getStandard();
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    //仪器
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			   
			    correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
		    	correctNums.add(correctNum);
		    	
//		    	correctNum = new ROMS_SZ_DEVICEDATA();
//		    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
//		    	correctNums.add(correctNum);
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    ROMS_SZ_POINTDATA pointData = null;
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();//管电压指示的偏离 (大焦点)
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();//管电压指示的偏离 (小焦点)
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();//曝光时间指示的偏离
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是曝光参数选择,1是管电压指示的偏离 ，2是输出量重复，3是有用线束半值层" +
						"4是曝光时间指示的偏离，5是有用线束垂直度偏离，6是光野与照射野四边的偏离，7是暗噪声，" +
						"8是探测器剂量指示，9是信号传递特性（STP），10是响应均匀性，11是测距误差，12是残影，13是伪影，" +
						"14是极限空间分辨力，15是低对比度细节检测，16是AEC灵敏度，17是AEC电离室之间一致性，18是AEC管电压变化一致性="+type);
				
				//0是曝光参数选择
				if (type == 0) {
					
					
					//1是管电压指示的偏离 
				}else if (type == 1) {
//					//表示有几个焦点
//					int jd = 0;
					
					dataMap.put("v11","1");
					dataMap.put("v12","管电压指示的偏离");
					dataMap.put("v13","±5.0%或±5.0kV内，以较大者控制");
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item11 = (String) morphDynaBean1.get("item1");
						logger.info("v1"+j+"1="+item11);
						int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v1"+j+"2="+item22);
						
						dataMap.put("v1"+j+"1",item11);
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean11.get("item1");
							logger.info("标称值 （kV）="+item1);
							String item6 = (String) morphDynaBean11.get("item6");
							logger.info("偏差（kV）="+item6);
							String item7 = (String) morphDynaBean11.get("item7");
							logger.info("相对偏差（%）="+item7);
							
							//判断是不是数字
							double parseDouble6 = 0d;
							double parseDouble7 = 0d;
							if (NumberUtils.isNumber(item6)) {
								parseDouble6 = Double.parseDouble(item6);
							}
							if (NumberUtils.isNumber(item7)) {
								parseDouble7 = Double.parseDouble(item7);
							}
							
							//第一次循环的数据单独赋值
							if (k == 1) {
								//判断是不是有数据
								if ((item6.equals("") && item7.equals("")) && (item6.equals("/") && item7.equals("/"))) {
									dataMap.put("v1"+j+"2","—");
									dataMap.put("v1"+j+"3","—");
									dataMap.put("v1"+j+"4","—");
								}else{
									dataMap.put("v1"+j+"2",item1+"kV");
									dataMap.put("v1"+j+"3",item6+"kV,"+item7+"%");
									if (Math.abs(parseDouble6) < 5) {
										dataMap.put("v1"+j+"4","符合");
									}else if (Math.abs(parseDouble7) == 5) {
										dataMap.put("v1"+j+"4","符合");
									}else{
										dataMap.put("v1"+j+"4","不符合");
										pass = 1;
										isNo[i] = "管电压指示的偏离 ";
										
									}
								}
							}else{
								//判断是不是有数据
								if ((!item6.equals("") && !item7.equals("")) && (!item6.equals("/") && !item7.equals("/"))) {
									pointData = new ROMS_SZ_POINTDATA();
									pointData.setV1(item1+"kV");
									pointData.setV2(item6+"kV,"+item7+"%");
									if (Math.abs(parseDouble6) < 5) {
										pointData.setV3("符合");
									}else if (Math.abs(parseDouble7) == 5) {
										pointData.setV3("符合");
									}else{
										pointData.setV3("不符合");
										pass = 1;
										isNo[i] = "管电压指示的偏离 ";
									}
									//判断不同的焦点往不同的list插数据（因为模板里面是不同的循环）
									if (item11.equals("大焦点")) {
										pointDatas1.add(pointData);
									}else{
										pointDatas2.add(pointData);
									}
								}else{
									pointData = new ROMS_SZ_POINTDATA();
									pointData.setV1("—");
									pointData.setV2("—");
									pointData.setV3("—");
									
									//判断不同的焦点往不同的list插数据（因为模板里面是不同的循环）
									if (item11.equals("大焦点")) {
										pointDatas1.add(pointData);
									}else{
										pointDatas2.add(pointData);
									}
								}
							}
						}
					}
//					//判断如果是一个焦点的话
//					if (jd < 2) {
//						//判断如果小焦点有值，大焦点没值得情况，就把小焦点的值赋给大焦点
//						if (pointDatas1.size() < pointDatas2.size()) {
//							pointDatas1 = pointDatas2;
//							dataMap.put("v111",dataMap.get("v121"));
//							dataMap.put("v112",dataMap.get("v122"));
//							dataMap.put("v113",dataMap.get("v123"));
//							dataMap.put("v114",dataMap.get("v124"));
//						}
//					}
//					dataMap.put("jd",jd);
					
					//2是输出量重复
				}else if (type == 2) {
					String item6 = (String) morphDynaBean.get("item6");
					logger.info("item6="+item6);
					
					dataMap.put("v21","2");
					dataMap.put("v22","输出量重复性");
					dataMap.put("v23","测量5次");
					dataMap.put("v24",item6+"%");
					dataMap.put("v25","≤10.0%");
					
					double parseDouble = 0d;
					if (NumberUtils.isNumber(item6)) {
						parseDouble = Double.parseDouble(item6);
					}
					if (!item6.equals("") && !item6.equals("/")) {
						if (parseDouble <= 10) {
							dataMap.put("v26","符合");
						}else{
							dataMap.put("v26","不符合");
							pass = 1;
							isNo[i] = "输出量重复性 ";
							logger.info("输入量 重复性="+isNo[i]);
						}
					}else{
						dataMap.put("v26","—");
					}
					
					
					//3是有用线束半值层
				}else if (type == 3) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("item2="+item2);
					
					dataMap.put("v31","3");
					dataMap.put("v32","有用线束半值层");
					dataMap.put("v33",item1+"kV");
					dataMap.put("v34",item2+"mmAl");
					dataMap.put("v35","≥2.3mmAl");
					double parseDouble = 0d;
					if (NumberUtils.isNumber(item2)) {
						parseDouble = Double.parseDouble(item2);
					}
					if (!item2.equals("") && !item2.equals("/")) {
						if (parseDouble >= 2.3) {
							dataMap.put("v36","符合");
						}else{
							dataMap.put("v36","不符合");
							pass = 1;
							isNo[i] = "有用线束半值层 ";
						}
					}else{
						dataMap.put("v36","—");
					}
					
					
					//4是曝光时间指示的偏离
				}else if (type == 4) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("v41","4");
					dataMap.put("v42","曝光时间指示的偏离");
					
					//判断项目是否打钩
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("valueList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 =(String) morphDynaBean1.get("item1");
							logger.info("标称值 （ms）="+item1);
							String item7 =(String) morphDynaBean1.get("item7");
							logger.info("相对偏差（%）="+item7);
							
							double parseDouble1 = 0d;
							double parseDouble7 = 0d;
							//判断是否为数字
							if (NumberUtils.isNumber(item1)) {
								parseDouble1 = Double.parseDouble(item1);
							}
							if (NumberUtils.isNumber(item7)) {
								parseDouble7 = Double.parseDouble(item7);
							}
							//判断是验收还是状态
							if (monitorType.equals("验收检测")) {
								//判断第一次循环单独赋值
								if (j == 1) {
									//判断是否有数据
									if (item1.equals("") && item1.equals("/")) {
										dataMap.put("v43","—");
										dataMap.put("v44","—");
										dataMap.put("v45","—");
										dataMap.put("v46","—");
										dataMap.put("v47","—");
									}else{
										dataMap.put("v44",item1+"ms");
										dataMap.put("v45",item7+"%");
										//判断结果是否符合标准
										if (parseDouble1 >= 100) {
											dataMap.put("v43","t≥100ms");
											dataMap.put("v46","±10.0%内");
											if (Math.abs(parseDouble7) < 10) {
												dataMap.put("v47","符合");
											}else{
												dataMap.put("v47","不符合");
												pass = 1;
												isNo[i] = "曝光时间指示的偏离 ";
											}
										}else{
											dataMap.put("v43","t＜100ms");
											dataMap.put("v46","±2ms内或±15.0%");
											if (Math.abs(parseDouble1) < 2 || Math.abs(parseDouble7) <= 15) {
												dataMap.put("v47","符合");
											}else{
												dataMap.put("v47","不符合");
												pass = 1;
												isNo[i] = "曝光时间指示的偏离 ";
											}
										}
									}
								}else{
									//判断是否有数据
									if (!item1.equals("") && !item1.equals("/")) {
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV2(item1+"ms");
										pointData.setV3(item7+"%");
										
										//判断结果是否符合标准
										if (parseDouble1 >= 100) {
											pointData.setV1("t≥100ms");
											pointData.setV4("±10.0%内");
											if (Math.abs(parseDouble7) < 10) {
												pointData.setV5("符合");
											}else{
												pointData.setV5("不符合");
												pass = 1;
												isNo[i] = "曝光时间指示的偏离 ";
											}
										}else{
											pointData.setV1("t＜100ms");
											pointData.setV4("±2ms内或±15.0%");
											if (Math.abs(parseDouble1) < 2 || Math.abs(parseDouble7) <= 15) {
												pointData.setV5("符合");
											}else{
												pointData.setV5("不符合");
												pass = 1;
												isNo[i] = "曝光时间指示的偏离 ";
											}
										}
										pointDatas3.add(pointData);
									}
								}
							}else{
								dataMap.put("v43","—");
								dataMap.put("v44","—");
								dataMap.put("v45","状态检测无此项");
								dataMap.put("v46","—");
								dataMap.put("v47","—");
//								pointData = new ROMS_SZ_POINTDATA();
//								pointData.setV1("/");
//								pointData.setV2("/");
//								pointData.setV3("状态检测无此项");
//								pointData.setV4("/");
//								pointData.setV5("/");
//								pointDatas3.add(pointData);
							}
						}
					}else{
						dataMap.put("v43","—");
						dataMap.put("v44","—");
						dataMap.put("v45",reason);
						dataMap.put("v46","—");
						dataMap.put("v47","—");
					}
					
					
					//5是有用线束垂直度偏离
				}else if (type == 5) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					
					dataMap.put("v51","5");
					dataMap.put("v52","有用线束垂直度偏离");
					
					//判断项目是否打钩
					if (project == 1) {
						dataMap.put("v53","检测筒和检测板");
						//注意这里的item3符号要输入法里的，不是的话进行转换
						if (item3.indexOf("<") != -1) {
							item3 = "＜";
						}else if (item3.indexOf(">") != -1) {
							item3 = "＞";
						}
						dataMap.put("v54",item3+"3°");
						dataMap.put("v55","≤3°");
						if (!item3.equals("") && !item3.equals("/")) {
							if (item3.equals("＜") || item3.equals("≤")) {
								dataMap.put("v56","符合");
							}else{
								dataMap.put("v56","不符合");
								pass = 1;
								isNo[i] = "有用线束垂直度偏离";
							}
						}else{
							dataMap.put("v56","—");
						}
					}else{
						dataMap.put("v53","—");//检测条件
						dataMap.put("v54",reason);//结果
						dataMap.put("v55","—");//标准限值
						dataMap.put("v56","—");//结论
					}
					
					//6是光野与照射野四边的偏离
				}else if (type == 6) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("左边="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("右边="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("上边="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("下边="+item4);
					
					dataMap.put("v61","6");
					dataMap.put("v62","光野与照射野四边的偏离/cm");
					
					//判断项目是否打钩
					if (project == 1) {
						double parseDouble1 = 0d;
						double parseDouble2 = 0d;
						double parseDouble3 = 0d;
						double parseDouble4 = 0d;
						//判断是否输入的是数字
						if (NumberUtils.isNumber(item1)) {
							parseDouble1 = Double.parseDouble(item1);
						}
						if (NumberUtils.isNumber(item2)) {
							parseDouble2 = Double.parseDouble(item2);
						}
						if (NumberUtils.isNumber(item3)) {
							parseDouble3 = Double.parseDouble(item3);
						}
						if (NumberUtils.isNumber(item4)) {
							parseDouble4 = Double.parseDouble(item4);
						}
						
						dataMap.put("v63","1mSID");
						dataMap.put("v64","左边a₁："+item1+"cm");
						dataMap.put("v65","右边a₂："+item2+"cm");
						dataMap.put("v66","上边b₁："+item3+"cm");
						dataMap.put("v67","下边b₂："+item4+"cm");
						dataMap.put("v68","任一边±1.0内");
						if ((!item1.equals("") && !item1.equals("/")) && (!item2.equals("") && !item2.equals("/")) && (!item3.equals("") && !item3.equals("/")) && (!item4.equals("") && !item4.equals("/"))) {
							if (Math.abs(parseDouble1) < 1 && Math.abs(parseDouble2) < 1 && Math.abs(parseDouble3) < 1 && Math.abs(parseDouble4) < 1) {
								dataMap.put("v69","符合");
							}else{
								dataMap.put("v69","不符合");
								pass = 1;
								isNo[i] = "光野与照射野四边的偏离";
							}
						}else{
							dataMap.put("v69","—");
						}
					}else{
						dataMap.put("v63","—");
						dataMap.put("v64",reason);
						dataMap.put("v65",reason);
						dataMap.put("v66",reason);
						dataMap.put("v67",reason);
						dataMap.put("v68","—");
						dataMap.put("v69","—");
					}
					
					
					//7是暗噪声
				}else if (type == 7) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					
					dataMap.put("v71","1");
					if (monitorType.equals("验收检测")) {
						dataMap.put("v72","像素值或DDI在规定值内或建立基线值，影像均匀无伪影 ");
					}else{
						dataMap.put("v72","像素值或DDI在规定值内或基线值±50.0%，影像均匀无伪影");
					}
					dataMap.put("v711","暗噪声       （卧位探测器） ");
					dataMap.put("v712","—");
					dataMap.put("v721","暗噪声       （立位探测器） ");
					dataMap.put("v722","—");
					
					//判断项目是否打钩
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item11 = (String) morphDynaBean1.get("item1");
							logger.info("item11="+item11);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item11.indexOf("立位") != -1) {
									isW = 1;
								}
							}
							
							//判断是验收还是状态
							if (monitorType.equals("验收检测")) {    
								if (item11.indexOf("验收检测") != -1) {
									String item10 = (String) morphDynaBean1.get("item10");
									logger.info("影像均匀无伪影 ="+item10);
									
									//获取数据
									JSONArray jsonArray1 = a.getJSONArray("valueList");
									Object[] objects1 = jsonArray1.toArray();
									logger.info("sub数据数量="+objects1.length);
									for (int k = 1; k <= objects1.length; k++) {
										a = JSONObject.fromObject(objects1[k-1]);
										bean = JSONObject.toBean(a);
										MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
										String item1 = (String) morphDynaBean11.get("item2");
										logger.info("单位="+item1);
										String item5 = (String) morphDynaBean11.get("item6");
										logger.info("平均值="+item5);
										String item6 = (String) morphDynaBean11.get("item7");
										logger.info("厂家规定值="+item6);
										
										//判断是否输入的是数字
										double parseDouble1 = 0d;
										double parseDouble2 = 0d;
										if (NumberUtils.isNumber(item5)) {
											parseDouble1 = Double.parseDouble(item5);
										}
										if (NumberUtils.isNumber(item6)) {
											parseDouble2 = Double.parseDouble(item6);
										}
										
										//判断立位还是卧位
										if (item11.indexOf("卧位") != -1) {
											dataMap.put("v713",item5+item1);
											//判断是否有伪影
											if (item10.equals("否")) {
												dataMap.put("v714","有伪影");
											}else if (item10.equals("是")) {
												dataMap.put("v714","影像均匀无伪影");
											}else{
												dataMap.put("v714","—");
											}
											//判断是否符合标准
											//判断是否有厂家规定值
											if (parseDouble2 == 0) {
												//判断是否有伪影
												if (item10.equals("否")) {
													dataMap.put("v715","不符合");
													pass = 1;
													isNo[i] = "暗噪声";
												}else if (item10.equals("是")) {
													dataMap.put("v715","符合");
												}else{
													dataMap.put("v715","—");
												}
											}else{
												//判断像素值或DDI在规定值内
												if (parseDouble1 < parseDouble2) {
													//判断是否有伪影
													if (item10.equals("否")) {
														dataMap.put("v715","不符合");
														pass = 1;
														isNo[i] = "暗噪声";
													}else if (item10.equals("是")) {
														dataMap.put("v715","符合");
													}else{
														dataMap.put("v715","—");
													}
												}else{
													dataMap.put("v715","不符合");
													pass = 1;
													isNo[i] = "暗噪声";
												}
											}
										}else{
											dataMap.put("v723",item5+item1);
											//判断是否有伪影
											if (item10.equals("否")) {
												dataMap.put("v724","有伪影");
											}else if (item10.equals("是")) {
												dataMap.put("v724","影像均匀无伪影");
											}else{
												dataMap.put("v724","—");
											}
											//判断是否符合标准
											//判断是否有厂家规定值
											if (parseDouble2 == 0) {
												//判断是否有伪影
												if (item10.equals("否")) {
													dataMap.put("v725","不符合");
													pass = 1;
													isNo[i] = "暗噪声";
												}else if (item10.equals("是")) {
													dataMap.put("v725","符合");
												}else{
													dataMap.put("v725","—");
												}
											}else{
												//判断像素值或DDI在规定值内
												if (parseDouble1 < parseDouble2) {
													//判断是否有伪影
													if (item10.equals("否")) {
														dataMap.put("v725","不符合");
														pass = 1;
														isNo[i] = "暗噪声";
													}else if (item10.equals("是")) {
														dataMap.put("v725","符合");
													}else{
														dataMap.put("v725","—");
													}
												}else{
													dataMap.put("v725","不符合");
													pass = 1;
													isNo[i] = "暗噪声";
												}
											}
										}
									}
								}
							}else{
								if (item11.indexOf("状态检测") != -1) {
									String item8 = (String) morphDynaBean1.get("item8");
									logger.info("生产厂家规定值 ="+item8);
									String item111 = (String) morphDynaBean1.get("item11");
									logger.info("影像均匀无伪影 ="+item111);
									
									//获取数据
									JSONArray jsonArray1 = a.getJSONArray("valueList");
									Object[] objects1 = jsonArray1.toArray();
									logger.info("sub数据数量="+objects1.length);
									for (int k = 1; k <= objects1.length; k++) {
										a = JSONObject.fromObject(objects1[k-1]);
										bean = JSONObject.toBean(a);
										MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
										String item1 = (String) morphDynaBean11.get("item2");
										logger.info("单位="+item1);
										String item6 = (String) morphDynaBean11.get("item7");
										logger.info("相对偏差（%）="+item6);
										
										//判断是否输入的是数字
										double parseDouble1 = 0d;
										if (NumberUtils.isNumber(item6)) {
											parseDouble1 = Double.parseDouble(item6);
										}
										
										//判断立位还是卧位
										if (item11.indexOf("卧位") != -1) {
											dataMap.put("v713",item6+"%");
											
											//判断是否有伪影
											if (item111.equals("否")) {
												dataMap.put("v714","有伪影");
											}else if (item111.equals("是")) {
												dataMap.put("v714","影像均匀无伪影");
											}else{
												dataMap.put("v714","—");
											}
											//判断是否符合标准
											if (NumberUtils.isNumber(item8)) {
												//判断像素值或DDI在规定值内
												if (parseDouble1 < Double.parseDouble(item8)) {
													//判断是否有伪影
													if (item111.equals("否")) {
														dataMap.put("v715","不符合");
														pass = 1;
														isNo[i] = "暗噪声";
													}else if (item111.equals("是")) {
														dataMap.put("v715","符合");
													}else{
														dataMap.put("v715","—");
													}
												}else{
													dataMap.put("v715","不符合");
													pass = 1;
													isNo[i] = "暗噪声";
												}
											}else{
												//判断基线值±50.0%
												if (Math.abs(parseDouble1) == 50) {
													//判断是否有伪影
													if (item111.equals("否")) {
														dataMap.put("v715","不符合");
														pass = 1;
														isNo[i] = "暗噪声";
														logger.info("double1暗噪音else2="+isNo[i]);
													}else if (item111.equals("是")) {
														dataMap.put("v715","符合");
													}else{
														dataMap.put("v715","—");
													}
												}else{
													dataMap.put("v715","不符合");
													pass = 1;
													isNo[i] = "暗噪声";
												}
											}
										}else{
											dataMap.put("v723",item6+"%");
											
											//判断是否有伪影
											if (item111.equals("否")) {
												dataMap.put("v724","有伪影");
											}else if (item111.equals("是")) {
												dataMap.put("v724","影像均匀无伪影");
											}else{
												dataMap.put("v724","—");
											}
											//判断是否符合标准
											if (NumberUtils.isNumber(item8)) {
												//判断像素值或DDI在规定值内
												if (parseDouble1 < Double.parseDouble(item8)) {
													//判断是否有伪影
													if (item111.equals("否")) {
														dataMap.put("v725","不符合");
														pass = 1;
														isNo[i] = "暗噪声";
													}else if (item111.equals("是")) {
														dataMap.put("v725","符合");
													}else{
														dataMap.put("v725","—");
													}
												}else{
													dataMap.put("v725","不符合");
													pass = 1;
													isNo[i] = "暗噪声";
												}
											}else{
												//判断基线值±50.0%
												if (Math.abs(parseDouble1) == 50) {
													//判断是否有伪影
													if (item111.equals("否")) {
														dataMap.put("v725","不符合");
														pass = 1;
														isNo[i] = "暗噪声";
														logger.info("double1暗噪音else5="+isNo[i]);
													}else if (item111.equals("是")) {
														dataMap.put("v725","符合");
													}else{
														dataMap.put("v725","—");
													}
												}else{
													dataMap.put("v725","不符合");
													pass = 1;
													isNo[i] = "暗噪声";
												}
											}
										}
									}
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("v711",dataMap.get("v721"));
								dataMap.put("v712",dataMap.get("v722"));
								dataMap.put("v713",dataMap.get("v723"));
								dataMap.put("v714",dataMap.get("v724"));
								dataMap.put("v715",dataMap.get("v725"));
							}
						}
					}else{
						dataMap.put("v72","—");
//						dataMap.put("v711","—");
						dataMap.put("v712","—");
						dataMap.put("v713",reason);
						dataMap.put("v714","—");
						dataMap.put("v715","—");
						
						dataMap.put("v722","—");
						dataMap.put("v723",reason);
						dataMap.put("v724","—");
						dataMap.put("v725","—");
					}
					dataMap.put("tcq7",tcq);//用于模板判断
					
					//8是探测器剂量指示
				}else if (type == 8) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					
					dataMap.put("v81","2");
					if (monitorType.equals("验收检测")) {
						dataMap.put("v82","DDI（10μGy）计算值与测量值±20.0%，DDI或平均像素值建立基线值");
					}else{
						dataMap.put("v82","基线值±20.0%");
					}
					dataMap.put("v811","探测器剂量指示        （卧位探测器） ");
					dataMap.put("v821","探测器剂量指示        （立位探测器） ");
					
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item11 = (String) morphDynaBean1.get("item1");
							logger.info("item11="+item11);
							String item3 = (String) morphDynaBean1.get("item3");
							logger.info("管电压="+item3);
							String item4 = (String) morphDynaBean1.get("item4");
							logger.info("It="+item4);
							int item55 = Integer.parseInt((String) morphDynaBean1.get("item6"));
							logger.info("是否有入射空气比释动能与DDI计算公式="+item55);
							int item8 = Integer.parseInt((String) morphDynaBean1.get("item9"));
							logger.info("DDI值="+item8);
							int item9 = Integer.parseInt((String) morphDynaBean1.get("item10"));
							logger.info("平均像素值="+item9);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item11.indexOf("立位") != -1) {
									isW = 1;
								}
							}
							
							double parseDouble1 = 0d;
							double parseDouble2 = 0d;
							String item1 = "";
							String item5 = "";
							String item7 = "";
							
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							for (int k = 1; k <= objects1.length; k++) {
								a = JSONObject.fromObject(objects1[k-1]);
								bean = JSONObject.toBean(a);
								MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
								item1 = (String) morphDynaBean11.get("item2");
								logger.info("单位="+item1);
								item5 = (String) morphDynaBean11.get("item6");
								logger.info("平均值="+item5);
								item7 = (String) morphDynaBean11.get("item8");
								logger.info("相对偏差（%）="+item7);
								
								//判断是否输入的是数字
								if (NumberUtils.isNumber(item5)) {
									parseDouble1 = Double.parseDouble(item5);
								}
								if (NumberUtils.isNumber(item7)) {
									parseDouble2 = Double.parseDouble(item7);
								}
							}
							
							//区分是验收检测还是状态检测
							if (monitorType.equals("验收检测")) {
								//判断是验收检测的数据
								if (item11.indexOf("验收检测") != -1) {
									//判断是卧位还是立位
									if (item11.indexOf("卧位") != -1) {
										dataMap.put("v812",item3+"kV，"+item4+"mAs ");//卧位检测条件
										//判断测量值是DDI值还是平均像素值
										if (item8 == 1) {
											//判断是否有计算公式
											if (item55 == 1) {
												dataMap.put("v813",parseDouble2+item1);//卧位检测结果
												if (!item7.equals("") && !item7.equals("/")) {
													//判断结论
													if (Math.abs(parseDouble2) <= 20) {
														dataMap.put("v814","符合");//卧位检测结论
													}else{
														dataMap.put("v814","不符合");//卧位检测结论
														pass = 1;
														isNo[i] = "探测器剂量指示";
													}
												}else{
													dataMap.put("v814","—");//卧位检测结论
												}
												
											}else{
												dataMap.put("v813",parseDouble1+item1);//卧位检测结果
												if (!item5.equals("") && !item5.equals("/")) {
													dataMap.put("v814","符合");//卧位检测结论
												}else{
													dataMap.put("v814","—");//卧位检测结论
												}
											}
										}else if (item9 == 1) {
											dataMap.put("v813",parseDouble1+item1);//卧位检测结果
											if (!item5.equals("") && !item5.equals("/")) {
												dataMap.put("v814","符合");//卧位检测结论
											}else{
												dataMap.put("v814","—");//卧位检测结论
											}
											
										}else{
											dataMap.put("v813","—");//卧位检测结果
											dataMap.put("v814","—");//卧位检测结论
										}
									}else{
										dataMap.put("v822",item3+"kV，"+item4+"mAs ");//立位检测条件
										//判断测量值是DDI值还是平均像素值
										if (item8 == 1) {
											//判断是否有计算公式
											if (item55 == 1) {
												dataMap.put("v823",parseDouble2+item1);//立位检测结果
												if (!item7.equals("") && !item7.equals("/")) {
													//判断结论
													if (Math.abs(parseDouble2) <= 20) {
														dataMap.put("v824","符合");//立位检测结论
													}else{
														dataMap.put("v824","不符合");//立位检测结论
														pass = 1;
														isNo[i] = "探测器剂量指示";
													}
												}else{
													dataMap.put("v824","—");//立位检测结论
												}
												
											}else{
												dataMap.put("v823",parseDouble1+item1);//立位检测结果
												if (!item5.equals("") && !item5.equals("/")) {
													dataMap.put("v824","符合");//立位检测结论
												}else{
													dataMap.put("v824","—");//立位检测结论
												}
												
											}
										}else if (item9 == 1) {
											dataMap.put("v823",parseDouble1+item1);//立位检测结果
											if (!item5.equals("") && !item5.equals("/")) {
												dataMap.put("v824","符合");//立位检测结论
											}else{
												dataMap.put("v824","—");//立位检测结论
											}
											
										}else{
											dataMap.put("v823","—");//立位检测结果
											dataMap.put("v824","—");//立位检测结论
										}
									}
								}
							}else{
								//判断是状态检测的数据
								if (item11.indexOf("状态检测") != -1) {
									//判断是卧位还是立位
									if (item11.indexOf("卧位") != -1) {
										dataMap.put("v812",item3+"kV，"+item4+"mAs ");//卧位检测条件
										dataMap.put("v813",parseDouble2+"%");//卧位检测结果
										if (!item7.equals("") && !item7.equals("/")) {
											//判断结论
											if (Math.abs(parseDouble2) <= 20) {
												dataMap.put("v814","符合");//卧位检测结论
											}else{
												dataMap.put("v814","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "探测器剂量指示";
											}
										}else{
											dataMap.put("v814","—");//卧位检测结论
										}
										
									}else{
										dataMap.put("v822",item3+"kV，"+item4+"mAs ");//立位检测条件
										dataMap.put("v823",parseDouble2+"%");//立位检测结果
										if (!item7.equals("") && !item7.equals("/")) {
											//判断结论
											if (Math.abs(parseDouble2) == 20) {
												dataMap.put("v824","符合");//立位检测结论
											}else{
												dataMap.put("v824","不符合");//立位检测结论
												pass = 1;
											}
										}else{
											dataMap.put("v824","—");//立位检测结论
										}
										
									}
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("v811",dataMap.get("v821"));
								dataMap.put("v812",dataMap.get("v822"));
								dataMap.put("v813",dataMap.get("v823"));
								dataMap.put("v814",dataMap.get("v824"));
							}
						}
					}else{
						dataMap.put("v82","—");
						dataMap.put("v812","—");
						dataMap.put("v813",reason);
						dataMap.put("v814","—");
						
						dataMap.put("v822","—");
						dataMap.put("v823",reason);
						dataMap.put("v824","—");
					}
					dataMap.put("tcq8",tcq);//用于模板判断
					
					//9是信号传递特性（STP）
				}else if (type == 9) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					
					double pd = 0d;
					double parseDouble = 0d;
					
					dataMap.put("v91","3");
					if (monitorType.equals("验收检测")) {
						dataMap.put("v92","R²≥0.98");
						pd = 0.98;
					}else{
						dataMap.put("v92","R²≥0.95");
						pd = 0.95;
					}
					dataMap.put("v911","信号传递特性 （卧位探测器） ");
					dataMap.put("v912","—");
					dataMap.put("v921","信号传递特性 （立位探测器） ");
					dataMap.put("v922","—");
					
					//判断项目是否打钩
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean1.get("item1");
							logger.info("item1="+item1);
							String item6 = (String) morphDynaBean1.get("item7");
							logger.info("R2="+item6);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item1.indexOf("立位") != -1) {
									isW = 1;
								}
							}
							
							//判断是否输入的是数字
							if (NumberUtils.isNumber(item6)) {
								parseDouble = Double.parseDouble(item6);
							}
							
							//判断是卧位还是立位
							if (item1.indexOf("卧位") != -1) {
								dataMap.put("v913",item6);//卧位检测结果
								if (!item6.equals("") && !item6.equals("/")) {
									if (parseDouble >= pd) {
										dataMap.put("v914","符合");
									}else{
										dataMap.put("v914","不符合");
										pass = 1;
										isNo[i] = "信号传递特性（STP） ";
									}
								}else{
									dataMap.put("v914","—");
								}
								
							}else{
								dataMap.put("v923",item6);//立位检测结果
								if (!item6.equals("") && !item6.equals("/")) {
									if (parseDouble >= pd) {
										dataMap.put("v924","符合");
									}else{
										dataMap.put("v924","不符合");
										pass = 1;
										isNo[i] = "信号传递特性（STP） ";
									}
								}else{
									dataMap.put("v924","—");
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("v911",dataMap.get("v921"));
								dataMap.put("v912",dataMap.get("v922"));
								dataMap.put("v913",dataMap.get("v923"));
								dataMap.put("v914",dataMap.get("v924"));
							}
						}
					}else{
						dataMap.put("v92","—");
//						dataMap.put("v911","—");
						dataMap.put("v912","—");
						dataMap.put("v913",reason);
						dataMap.put("v914","—");
						
//						dataMap.put("v921","—");
						dataMap.put("v922","—");
						dataMap.put("v913",reason);
						dataMap.put("v924","—");
					}
					dataMap.put("tcq9",tcq);//用于模板判断
					
					//10是响应均匀性
				}else if (type == 10) {
					for (int j = 0; j < isNo.length; j++) {
						System.out.println(isNo[j]);
					}
					
					
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					
					double parseDouble = 0d;
					
					dataMap.put("s101","4");
					dataMap.put("s102","CV≤5.0%");
					dataMap.put("s1011","响应均匀性   （卧位探测器） ");
					dataMap.put("s1021","响应均匀性   （立位探测器） ");
					
					//判断项目是否打钩
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean1.get("item1");
							logger.info("item1="+item1);
							String item3 = (String) morphDynaBean1.get("item3");
							logger.info("管电压="+item3);
							String item4 = (String) morphDynaBean1.get("item4");
							logger.info("It="+item4);
							String item5 = (String) morphDynaBean1.get("item6");
							logger.info("cv="+item5);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item1.indexOf("立位") != -1) {
									isW = 1;
								}
							}
							
							//判断是否输入的是数字
							if (NumberUtils.isNumber(item5)) {
								parseDouble = Double.parseDouble(item5);
							}
							
							//判断是卧位还是立位
							if (item1.indexOf("卧位") != -1) {
								dataMap.put("s1012",item3+"kV，"+item4+"mAs ");//卧位检测条件
								dataMap.put("s1013",item5+"%");//卧位检测结果
								if (!item5.equals("") && !item5.equals("/")) {
									//判断结果是否符合
									if (parseDouble <= 5) {
										dataMap.put("s1014","符合");//卧位检测结论
									}else{
										dataMap.put("s1014","不符合");//卧位检测结论
										pass = 1;
										isNo[i] = "响应均匀性 ";
									}
								}else{
									dataMap.put("s1014","—");//卧位检测结论
								}
							}else{
								dataMap.put("s1022",item3+"kV，"+item4+"mAs ");//立位检测条件
								dataMap.put("s1023",item5+"%");//立位检测结果
								if (!item5.equals("") && !item5.equals("/")) {
									//判断结果是否符合
									if (parseDouble <= 5) {
										dataMap.put("s1024","符合");//卧位检测结论
									}else{
										dataMap.put("s1024","不符合");//卧位检测结论
										pass = 1;
										isNo[i] = "响应均匀性 ";
									}
								}else{
									dataMap.put("s1024","—");//卧位检测结论
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("s1011",dataMap.get("s1021"));
								dataMap.put("s1012",dataMap.get("s1022"));
								dataMap.put("s1013",dataMap.get("s1023"));
								dataMap.put("s1014",dataMap.get("s1024"));
							}
						}
					}else{
						dataMap.put("s102","—");
//						dataMap.put("s1011","—");
						dataMap.put("s1012","—");
						dataMap.put("s1013",reason);
						dataMap.put("s1014","—");
						
//						dataMap.put("s1021","—");
						dataMap.put("s1022","—");
						dataMap.put("s1023",reason);
						dataMap.put("s1024","—");
					}
					dataMap.put("tcq10",tcq);//用于模板判断
					
					//11是测距误差
				}else if (type == 11) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					
					dataMap.put("s111","5");
					dataMap.put("s112","±2.0%内");
					dataMap.put("s1111","测距误差     （卧位探测器） ");
					dataMap.put("s11111","水平方向");
					dataMap.put("s11121","竖直方向");
					dataMap.put("s1121","测距误差     （立位探测器） ");
					dataMap.put("s11211","水平方向");
					dataMap.put("s11221","竖直方向");
					
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item11 = (String) morphDynaBean1.get("item1");
							logger.info("item11="+item11);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item11.indexOf("立位") != -1) {
									isW = 1;
								}
							}
							
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							for (int k = 1; k <= objects1.length; k++) {
								a = JSONObject.fromObject(objects1[k-1]);
								bean = JSONObject.toBean(a);
								MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
								String item1 = (String) morphDynaBean11.get("item1");
								logger.info("区分水平和竖直="+item1);
								String item7 = (String) morphDynaBean11.get("item7");
								logger.info("相对偏差(%)="+item7);
								
								double parseDouble = 0d;
								//判断是否输入的是数字
								if (NumberUtils.isNumber(item7)) {
									parseDouble = Double.parseDouble(item7);
								}
								
								//判断是卧位还是立位
								if (item11.indexOf("卧位") != -1) {
									//判断方向
									if (item1.equals("水平方向")) {
										dataMap.put("s11112",item7+"%");//卧位检测结果
										if (!item7.equals("") && !item7.equals("/")) {
											//判断结果是否符合标准
											if (Math.abs(parseDouble) < 2) {
												dataMap.put("s11113","符合");//卧位检测结论
											}else{
												dataMap.put("s11113","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "测距误差";
											}
										}else{
											dataMap.put("s11113","—");//卧位检测结论
										}
									}else{
										dataMap.put("s11122",item7+"%");//卧位检测结果
										if (!item7.equals("") && !item7.equals("/")) {
											//判断结果是否符合标准
											if (Math.abs(parseDouble) < 2) {
												dataMap.put("s11123","符合");//卧位检测结论
											}else{
												dataMap.put("s11123","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "测距误差";
											}
										}else{
											dataMap.put("s11123","—");//卧位检测结论
										}
									}
								}else{
									//判断方向
									if (item1.equals("水平方向")) {
										dataMap.put("s11212",item7+"%");//卧位检测结果
										if (!item7.equals("") && !item7.equals("/")) {
											//判断结果是否符合标准
											if (Math.abs(parseDouble) < 2) {
												dataMap.put("s11213","符合");//卧位检测结论
											}else{
												dataMap.put("s11213","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "测距误差";
											}
										}else{
											dataMap.put("s11213","—");//卧位检测结论
										}
										
									}else{
										dataMap.put("s11222",item7+"%");//卧位检测结果
										if (!item7.equals("") && !item7.equals("/")) {
											//判断结果是否符合标准
											if (Math.abs(parseDouble) < 2) {
												dataMap.put("s11223","符合");//卧位检测结论
											}else{
												dataMap.put("s11223","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "测距误差";
											}
										}else{
											dataMap.put("s11223","—");//卧位检测结论
										}
										
									}
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("s1111",dataMap.get("s1121"));
								dataMap.put("s11111",dataMap.get("s11211"));
								dataMap.put("s11112",dataMap.get("s11212"));
								dataMap.put("s11113",dataMap.get("s11213"));
								dataMap.put("s11121",dataMap.get("s11221"));
								dataMap.put("s11122",dataMap.get("s11222"));
								dataMap.put("s11123",dataMap.get("s11223"));
							}
						}
					}else{
						dataMap.put("s112","—");
						
//						dataMap.put("s1111","—");
						dataMap.put("s11111","—");
						dataMap.put("s11112",reason);
						dataMap.put("s11113","—");
						
						dataMap.put("s11121","—");
						dataMap.put("s11122",reason);
						dataMap.put("s11123","—");
						
//						dataMap.put("s1121","—");
						dataMap.put("s11211","—");
						dataMap.put("s11212",reason);
						dataMap.put("s11213","—");
						
						dataMap.put("s11221","—");
						dataMap.put("s11222",reason);
						dataMap.put("s11223","—");
					}
					dataMap.put("tcq11",tcq);//用于模板判断
					
					//12是残影
				}else if (type == 12) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					
					dataMap.put("s121","6");
					if (monitorType.equals("验收检测")) {
						dataMap.put("s122","不存在残影 或有残影而像素值误差≤5.0%");
					}else{
						dataMap.put("s122","—");
					}
					dataMap.put("s1211","残影         （卧位探测器） ");
					dataMap.put("s1212","—");
					dataMap.put("s1221","残影         （立位探测器） ");
					dataMap.put("s1222","—");
					
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean1.get("item1");
							logger.info("item1="+item1);
							String item3 = (String) morphDynaBean1.get("item3");
							logger.info("是否存在残影="+item3);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item1.indexOf("立位") != -1) {
									isW = 1;
								}
							}
							
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							for (int k = 1; k <= objects1.length; k++) {
								a = JSONObject.fromObject(objects1[k-1]);
								bean = JSONObject.toBean(a);
								MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
								String item4 = (String) morphDynaBean11.get("item3");
								logger.info("相对偏差(%)="+item4);
								
								double parseDouble = 0d;
								//判断是否输入的是数字
								if (NumberUtils.isNumber(item4)) {
									parseDouble = Double.parseDouble(item4);
								}
								
								if (monitorType.equals("验收检测")) {
									//判断是卧位还是立位
									if (item1.indexOf("卧位") != -1) {
										//判断是否存在残影
										if (item3.equals("是")) {
											dataMap.put("s1213","存在残影");//卧位检测结果
											if (!item4.equals("") && !item4.equals("/")) {
												//判断偏差
												if (parseDouble <= 5) {
													dataMap.put("s1214","符合");//卧位检测结论
												}else{
													dataMap.put("s1214","不符合");//卧位检测结论
													pass = 1;
													isNo[i] = "残影";
												}
											}else{
												dataMap.put("s1214","—");//卧位检测结论
											}
										}else if (item3.equals("否")) {
											dataMap.put("s1213","不存在残影");//卧位检测结果
											dataMap.put("s1214","符合");//卧位检测结论
										}else{
											dataMap.put("s1213","—");//卧位检测结果
											dataMap.put("s1214","—");//卧位检测结论
										}
									}else{
										//判断是否存在残影
										if (item3.equals("是")) {
											dataMap.put("s1223","存在残影");//立位检测结果
											if (!item4.equals("") && !item4.equals("/")) {
												//判断偏差
												if (parseDouble <= 5) {
													dataMap.put("s1224","符合");//立位检测结论
												}else{
													dataMap.put("s1224","不符合");//立位检测结论
													pass = 1;
													isNo[i] = "残影";
												}
											}else{
												dataMap.put("s1224","—");//立位检测结论
											}
											
										}else if (item3.equals("否")) {
											dataMap.put("s1223","不存在残影");//立位检测结果
											if (!item4.equals("") && !item4.equals("/")) {
												dataMap.put("s1224","符合");//立位检测结论
											}else{
												dataMap.put("s1224","—");//立位检测结论
											}
										}else{
											dataMap.put("s1223","—");//立位检测结果
											dataMap.put("s1224","—");//立位检测结论
										}
									}
								}else{
									dataMap.put("s1213","状态检测无此项");//卧位检测结果
									dataMap.put("s1214","—");//卧位检测结论
									dataMap.put("s1223","状态检测无此项");//立位检测结果
									dataMap.put("s1224","—");//立位检测结论
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("s1211",dataMap.get("s1221"));
								dataMap.put("s1212",dataMap.get("s1222"));
								dataMap.put("s1213",dataMap.get("s1223"));
								dataMap.put("s1214",dataMap.get("s1224"));
							}
						}
					}else{
						dataMap.put("s122","—");
//						dataMap.put("s1211","—");
						dataMap.put("s1212","—");
						dataMap.put("s1213",reason);
						dataMap.put("s1214","—");
						
//						dataMap.put("s1221","—");
						dataMap.put("s1222","—");
						dataMap.put("s1223",reason);
						dataMap.put("s1224","—");
					}
					dataMap.put("tcq12",tcq);//用于模板判断
					
					//13是伪影
				}else if (type == 13) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					
					dataMap.put("s131","7");
					dataMap.put("s132","无伪影");
					dataMap.put("s1311","伪影         （卧位探测器） ");
					dataMap.put("s1312","—");
					dataMap.put("s1321","伪影         （立位探测器） ");
					dataMap.put("s1322","—");
					
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean1.get("item1");
							logger.info("item1="+item1);
							String item3 = (String) morphDynaBean1.get("item3");
							logger.info("是否存在伪影="+item3);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item1.indexOf("立位") != -1) {
									isW = 1;
								}
							}
							
							//判断是卧位还是立位
							if (item1.indexOf("卧位") != -1) {
								//判断是否存在伪影
								if (item3.equals("是")) {
									dataMap.put("s1313","有伪影");//卧位检测结果
									dataMap.put("s1314","不符合");//卧位检测结论
									pass = 1;
									isNo[i] = "伪影";
								}else if (item3.equals("否")) {
									dataMap.put("s1313","无伪影");//卧位检测结果
									dataMap.put("s1314","符合");//卧位检测结论
								}else{
									dataMap.put("s1313","—");//卧位检测结果
									dataMap.put("s1314","—");//卧位检测结论
								}
							}else{
								//判断是否存在伪影
								if (item3.equals("是")) {
									dataMap.put("s1323","有伪影");//立位检测结果
									dataMap.put("s1324","不符合");//立位检测结论
									pass = 1;
									isNo[i] = "伪影";
								}else if (item3.equals("否")) {
									dataMap.put("s1323","无伪影");//立位检测结果
									dataMap.put("s1324","符合");//立位检测结论
								}else{
									dataMap.put("s1323","—");//立位检测结果
									dataMap.put("s1324","—");//立位检测结论
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("s1311",dataMap.get("s1321"));
								dataMap.put("s1312",dataMap.get("s1322"));
								dataMap.put("s1313",dataMap.get("s1323"));
								dataMap.put("s1314",dataMap.get("s1324"));
							}
						}
					}else{
						dataMap.put("s132","—");
//						dataMap.put("s1311","—");
						dataMap.put("s1312","—");
						dataMap.put("s1313",reason);
						dataMap.put("s1314","—");
						
//						dataMap.put("s1321","—");
						dataMap.put("s1322","—");
						dataMap.put("s1323",reason);
						dataMap.put("s1324","—");
					}
					dataMap.put("tcq13",tcq);//用于模板判断
					
					//14是极限空间分辨力
				}else if (type == 14) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					
					double pd = 0d;
					
					dataMap.put("s141","8");
					dataMap.put("s1411","极限空间分辨力         （卧位探测器） ");
					dataMap.put("s1412","—");
					dataMap.put("s14111","水平方向");
					dataMap.put("s14121","竖直方向");
					dataMap.put("s1421","极限空间分辨力         （立位探测器） ");
					dataMap.put("s1422","—");
					dataMap.put("s14211","水平方向");
					dataMap.put("s14221","竖直方向");
					
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item11 = (String) morphDynaBean1.get("item1");
							logger.info("item11="+item11);
							String item7 = (String) morphDynaBean1.get("item7");
							logger.info("厂家规定值="+item7);
							String item8 = (String) morphDynaBean1.get("item8");
							logger.info("像素尺寸a="+item8);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item11.indexOf("立位") != -1) {
									isW = 1;
								}
							}
							
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							for (int k = 1; k <= objects1.length; k++) {
								a = JSONObject.fromObject(objects1[k-1]);
								bean = JSONObject.toBean(a);
								MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
								String item1 = (String) morphDynaBean11.get("item1");
								logger.info("item1="+item1);
								String item2 = (String) morphDynaBean11.get("item2");
								logger.info("测量值="+item2);
								String item3 = (String) morphDynaBean11.get("item3");
								logger.info("90%厂家规定值="+item3);
								String item4 = (String) morphDynaBean11.get("item4");
								logger.info("80%fNyquist="+item4);
								String item6 = (String) morphDynaBean11.get("item6");
								logger.info("相对偏差(%)="+item6);
								
								double parseDouble1 = 0d;
								double parseDouble2 = 0d;
								double parseDouble3 = 0d;
								double parseDouble4 = 0d;
								//判断是否输入的是数字
								if (NumberUtils.isNumber(item2)) {
									parseDouble1 = Double.parseDouble(item2);
								}
								if (NumberUtils.isNumber(item3)) {
									parseDouble2 = Double.parseDouble(item3);
								}
								if (NumberUtils.isNumber(item4)) {
									parseDouble3 = Double.parseDouble(item4);
								}
								if (NumberUtils.isNumber(item6)) {
									parseDouble4 = Double.parseDouble(item6);
								}
								
								//判断是验收检测还在状态检测
								if (monitorType.equals("验收检测")) {
									//判断得出测量值判断标准
									if (!item7.equals("") || !item7.equals("/") && !item8.equals("") || !item8.equals("/")) {
										//判断90%和80%哪个大，哪个是标准
										if (parseDouble2 > parseDouble3) {
											pd = parseDouble2;
										}else{
											pd = parseDouble3;
										}
									}else if (!item7.equals("") || !item7.equals("/") && item8.equals("") || item8.equals("/")) {
										pd = parseDouble2;
									}else if (item7.equals("") || item7.equals("/") && !item8.equals("") || !item8.equals("/")) {
										pd = parseDouble3;
									}
									
									//判断是卧位还是立位
									if (item11.indexOf("卧位") != -1) {
										dataMap.put("s1412","≥"+pd+"  lp/mm，建立基线值");
										//判断水平还是竖直
										if (item1.indexOf("水平方向") != -1) {
											dataMap.put("s14112",item2+"lp/mm");
											if (!item2.equals("") && !item2.equals("/")) {
												//判断标准得出结论
												if (parseDouble1 >= pd) {
													dataMap.put("s14113","符合");
												}else{
													dataMap.put("s14113","不符合");
													pass = 1;
													isNo[i] = "极限空间分辨力";
												}
											}else{
												dataMap.put("s14113","—");
											}
											
										}else{
											dataMap.put("s14122",item2+"lp/mm");
											if (!item2.equals("") && !item2.equals("/")) {
												//判断标准得出结论
												if (parseDouble1 >= pd) {
													dataMap.put("s14123","符合");
												}else{
													dataMap.put("s14123","不符合");
													pass = 1;
													isNo[i] = "极限空间分辨力";
												}
											}else{
												dataMap.put("s14123","—");
											}
										}
									}else{
										dataMap.put("s1422","≥"+pd+"  lp/mm，建立基线值");
										//判断水平还是竖直
										if (item1.indexOf("水平方向") != -1) {
											dataMap.put("s14212",item2+"lp/mm");
											if (!item2.equals("") && !item2.equals("/")) {
												//判断标准得出结论
												if (parseDouble1 >= pd) {
													dataMap.put("s14213","符合");
												}else{
													dataMap.put("s14213","不符合");
													pass = 1;
													isNo[i] = "极限空间分辨力";
												}
											}else{
												dataMap.put("s14213","—");
											}
										}else{
											dataMap.put("s14222",item2+"lp/mm");
											if (!item2.equals("") && !item2.equals("/")) {
												//判断标准得出结论
												if (parseDouble1 >= pd) {
													dataMap.put("s14223","符合");
												}else{
													dataMap.put("s14223","不符合");
													pass = 1;
													isNo[i] = "极限空间分辨力";
												}
											}else{
												dataMap.put("s14223","—");
											}
										}
									}
								}else{
//									pd = parseDouble2;
									
									//判断是卧位还是立位
									if (item11.indexOf("卧位") != -1) {
										dataMap.put("s1412","≥90  lp/mm，建立基线值");
										//判断水平还是竖直
										if (item1.indexOf("水平方向") != -1) {
											dataMap.put("s14112",item6+"%");
											if (!item6.equals("") && !item6.equals("/")) {
												//判断标准得出结论
												if (parseDouble4 >= 90) {
													dataMap.put("s14113","符合");
												}else{
													dataMap.put("s14113","不符合");
													pass = 1;
													isNo[i] = "极限空间分辨力";
												}
											}else{
												dataMap.put("s14113","—");
											}
										}else{
											dataMap.put("s14122",item6+"%");
											if (!item6.equals("") && !item6.equals("/")) {
												//判断标准得出结论
												if (parseDouble4 >= 90) {
													dataMap.put("s14123","符合");
												}else{
													dataMap.put("s14123","不符合");
													pass = 1;
													isNo[i] = "极限空间分辨力";
												}
											}else{
												dataMap.put("s14123","—");
											}
										}
									}else{
										dataMap.put("s1422","≥90  lp/mm，建立基线值");
										//判断水平还是竖直
										if (item1.indexOf("水平方向") != -1) {
											dataMap.put("s14212",item6+"%");
											if (!item6.equals("") && !item6.equals("/")) {
												//判断标准得出结论
												if (parseDouble4 >= 90) {
													dataMap.put("s14213","符合");
												}else{
													dataMap.put("s14213","不符合");
													pass = 1;
													isNo[i] = "极限空间分辨力";
												}
											}else{
												dataMap.put("s14213","—");
											}
										}else{
											dataMap.put("s14222",item6+"%");
											if (!item6.equals("") && !item6.equals("/")) {
												//判断标准得出结论
												if (parseDouble4 >= 90) {
													dataMap.put("s14223","符合");
												}else{
													dataMap.put("s14223","不符合");
													pass = 1;
													isNo[i] = "极限空间分辨力";
												}
											}else{
												dataMap.put("s14223","—");
											}
										}
									}
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("s1411",dataMap.get("s1421"));
								dataMap.put("s1412",dataMap.get("s1422"));
								dataMap.put("s14111",dataMap.get("s14211"));
								dataMap.put("s14112",dataMap.get("s14212"));
								dataMap.put("s14113",dataMap.get("s14213"));
								dataMap.put("s14121",dataMap.get("s14221"));
								dataMap.put("s14122",dataMap.get("s14222"));
								dataMap.put("s14123",dataMap.get("s14223"));
							}
						}
					}else{
//						dataMap.put("s1411","—");
						dataMap.put("s1412","—");
						dataMap.put("s14111","—");
						dataMap.put("s14112",reason);
						dataMap.put("s14113","—");
						
						dataMap.put("s14121","—");
						dataMap.put("s14122",reason);
						dataMap.put("s14123","—");
						
//						dataMap.put("s1421","—");
						dataMap.put("s1422","—");
						dataMap.put("s14211","—");
						dataMap.put("s14212",reason);
						dataMap.put("s14213","—");
						
						dataMap.put("s14221","—");
						dataMap.put("s14222",reason);
						dataMap.put("s14223","—");
					}
					dataMap.put("tcq14",tcq);//用于模板判断
					
					//15是低对比度细节检测
				}else if (type == 15) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					
					dataMap.put("s151","9");
					if (monitorType.equals("验收检测")) {
						dataMap.put("s152","建立基线值");
					}else{
						dataMap.put("s152","与基线值比较不超过2个细节变化");
					}
					dataMap.put("s1511","低对比度细节检测           （卧位探测器） ");
					dataMap.put("s1521","低对比度细节检测           （立位探测器） ");
					
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item11 = (String) morphDynaBean1.get("item1");
							logger.info("item11="+item11);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item11.indexOf("立位") != -1) {
									isW = 1;
								}
							}
							
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							for (int k = 1; k <= objects1.length; k++) {
								a = JSONObject.fromObject(objects1[k-1]);
								bean = JSONObject.toBean(a);
								MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
								String item1 = (String) morphDynaBean11.get("item1");
								logger.info("名称="+item1);
								String item2 = (String) morphDynaBean11.get("item2");
								logger.info("值1="+item2);
								String item3 = (String) morphDynaBean11.get("item3");
								logger.info("值2="+item3);
								String item4 = (String) morphDynaBean11.get("item4");
								logger.info("值3="+item4);
								
								//判断是验收检测还在状态检测
								if (monitorType.equals("验收检测")) {
									//判断是卧位还是立位
									if (item11.indexOf("卧位") != -1) {
										//判断名称来插值
										if (item1.equals("入射空气比释动能")) {
											dataMap.put("s15111",item2);//卧位检测条件
											dataMap.put("s15121",item3);//卧位检测条件
											dataMap.put("s15131",item4);//卧位检测条件
										}else if (item1.equals("检测结果（%）")) {
											dataMap.put("s15112",item2);//卧位检测结果
											dataMap.put("s15122",item3);//卧位检测结果
											dataMap.put("s15132",item4);//卧位检测结果
										}
										dataMap.put("s15113","符合");//卧位检测结论
										dataMap.put("s15123","符合");//卧位检测结论
										dataMap.put("s15133","符合");//卧位检测结论
									}else{
										//判断名称来插值
										if (item1.equals("入射空气比释动能")) {
											dataMap.put("s15211",item2);//卧位检测条件
											dataMap.put("s15221",item3);//卧位检测条件
											dataMap.put("s15231",item4);//卧位检测条件
										}else if (item1.equals("检测结果（%）")) {
											dataMap.put("s15212",item2);//卧位检测结果
											dataMap.put("s15222",item3);//卧位检测结果
											dataMap.put("s15232",item4);//卧位检测结果
										}
										dataMap.put("s15213","符合");//卧位检测结论
										dataMap.put("s15223","符合");//卧位检测结论
										dataMap.put("s15233","符合");//卧位检测结论
									}
								}else{
									//判断是卧位还是立位
									if (item11.indexOf("卧位") != -1) {
										//判断名称来插值
										if (item1.equals("入射空气比释动能")) {
											dataMap.put("s15111",item2);//卧位检测条件
											dataMap.put("s15121",item3);//卧位检测条件
											dataMap.put("s15131",item4);//卧位检测条件
										}else if (item1.equals("是否超2个细节变化")) {
											//判断是否超过
											if (item2.equals("是")) {
												dataMap.put("s15112","与基线值比较超过2个细节变化");//卧位检测结果
												dataMap.put("s15113","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "低对比度细节检测";
											}else if (item2.equals("否")) {
												dataMap.put("s15112","与基线值比较不超过2个细节变化");//卧位检测结果
												dataMap.put("s15113","符合");//卧位检测结论
											}else{
												dataMap.put("s15112","—");//卧位检测结果
												dataMap.put("s15113","—");//卧位检测结论
											}
											if (item3.equals("是")) {
												dataMap.put("s15122","与基线值比较超过2个细节变化");//卧位检测结果
												dataMap.put("s15123","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "低对比度细节检测";
											}else if (item3.equals("否")) {
												dataMap.put("s15122","与基线值比较不超过2个细节变化");//卧位检测结果
												dataMap.put("s15123","符合");//卧位检测结论
											}else{
												dataMap.put("s15122","—");//卧位检测结果
												dataMap.put("s15123","—");//卧位检测结论
											}
											if (item4.equals("是")) {
												dataMap.put("s15132","与基线值比较超过2个细节变化");//卧位检测结果
												dataMap.put("s15133","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "低对比度细节检测";
											}else if (item4.equals("否")) {
												dataMap.put("s15132","与基线值比较不超过2个细节变化");//卧位检测结果
												dataMap.put("s15133","符合");//卧位检测结论
											}else{
												dataMap.put("s15132","—");//卧位检测结果
												dataMap.put("s15133","—");//卧位检测结论
											}
										}
									}else{
										//判断名称来插值
										if (item1.equals("入射空气比释动能")) {
											dataMap.put("s15211",item2);//卧位检测条件
											dataMap.put("s15221",item3);//卧位检测条件
											dataMap.put("s15231",item4);//卧位检测条件
										}else if (item1.equals("是否超2个细节变化")) {
											//判断是否超过
											if (item2.equals("是")) {
												dataMap.put("s15212","与基线值比较超过2个细节变化");//卧位检测结果
												dataMap.put("s15213","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "低对比度细节检测";
											}else if (item2.equals("否")) {
												dataMap.put("s15212","与基线值比较不超过2个细节变化");//卧位检测结果
												dataMap.put("s15213","符合");//卧位检测结论
											}else{
												dataMap.put("s15212","—");//卧位检测结果
												dataMap.put("s15213","—");//卧位检测结论
											}
											if (item3.equals("是")) {
												dataMap.put("s15222","与基线值比较超过2个细节变化");//卧位检测结果
												dataMap.put("s15223","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "低对比度细节检测";
											}else if (item3.equals("否")) {
												dataMap.put("s15222","与基线值比较不超过2个细节变化");//卧位检测结果
												dataMap.put("s15223","符合");//卧位检测结论
											}else{
												dataMap.put("s15222","—");//卧位检测结果
												dataMap.put("s15223","—");//卧位检测结论
											}
											if (item4.equals("是")) {
												dataMap.put("s15232","与基线值比较超过2个细节变化");//卧位检测结果
												dataMap.put("s15233","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "低对比度细节检测";
											}else if (item4.equals("否")) {
												dataMap.put("s15232","与基线值比较不超过2个细节变化");//卧位检测结果
												dataMap.put("s15233","符合");//卧位检测结论
											}else{
												dataMap.put("s15232","—");//卧位检测结果
												dataMap.put("s15233","—");//卧位检测结论
											}
										}
									}
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("s1511",dataMap.get("s1521"));
//								dataMap.put("s1512",dataMap.get("s1522"));
								dataMap.put("s15111",dataMap.get("s15211"));
								dataMap.put("s15112",dataMap.get("s15212"));
								dataMap.put("s15113",dataMap.get("s15213"));
								dataMap.put("s15121",dataMap.get("s15221"));
								dataMap.put("s15122",dataMap.get("s15222"));
								dataMap.put("s15123",dataMap.get("s15223"));
								dataMap.put("s15131",dataMap.get("s15231"));
								dataMap.put("s15132",dataMap.get("s15232"));
								dataMap.put("s15133",dataMap.get("s15233"));
							}
						}
					}else{
						dataMap.put("s152","—");
//						dataMap.put("s1511","—");
						dataMap.put("s15111","—");
						dataMap.put("s15112",reason);
						dataMap.put("s15113","—");
						
						dataMap.put("s15121","—");
						dataMap.put("s15122",reason);
						dataMap.put("s15123","—");
						
						dataMap.put("s15131","—");
						dataMap.put("s15132",reason);
						dataMap.put("s15133","—");
						
//						dataMap.put("s1521","—");
						dataMap.put("s15211","—");
						dataMap.put("s15212",reason);
						dataMap.put("s15213","—");
						
						dataMap.put("s15221","—");
						dataMap.put("s15222",reason);
						dataMap.put("s15223","—");
						
						dataMap.put("s15231","—");
						dataMap.put("s15232",reason);
						dataMap.put("s15233","—");
					}
					dataMap.put("tcq15",tcq);//用于模板判断
					
					//16是AEC灵敏度
				}else if (type == 16) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					
					dataMap.put("s161","10");
					if (monitorType.equals("验收检测")) {
						dataMap.put("s162","建立基线值");
					}else{
						dataMap.put("s162","基线值±25.0%内");
					}
					dataMap.put("s1611","AEC灵敏度   （卧位探测器） ");
					dataMap.put("s1621","AEC灵敏度   （立位探测器） ");
					
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean1.get("item1");
							logger.info("item1="+item1);
							int item4 = Integer.parseInt((String) morphDynaBean1.get("item4"));
							logger.info("mAs="+item4);
							int item55 = Integer.parseInt((String) morphDynaBean1.get("item5"));
							logger.info("DDI值="+item55);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item1.indexOf("立位") != -1) {
									isW = 1;
								}
							}
							
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							for (int k = 1; k <= objects1.length; k++) {
								a = JSONObject.fromObject(objects1[k-1]);
								bean = JSONObject.toBean(a);
								MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
								String pieces = (String) morphDynaBean11.get("item1");
								logger.info("单位="+pieces);
								String item5 = (String) morphDynaBean11.get("item5");
								logger.info("平均值="+item5);
								String item7 = (String) morphDynaBean11.get("item7");
								logger.info("相对偏差(%)="+item7);
								
								double parseDouble = 0d;
								//判断是否输入的是数字
								if (NumberUtils.isNumber(item7)) {
									parseDouble = Double.parseDouble(item7);
								}
								
								//判断是验收检测还在状态检测
								if (monitorType.equals("验收检测")) {
									//判断是卧位还是立位
									if (item1.indexOf("卧位") != -1) {
										//判断是DDI值还是mAs
										if (item4 == 1) {
											dataMap.put("s1612","记录mAs");//卧位检测条件
										}else{
											dataMap.put("s1612","记录DDI值");//卧位检测条件
										}
										dataMap.put("s1613",item5+pieces);//卧位检测结果
										if (!item5.equals("") && !item5.equals("/")) {
											dataMap.put("s1614","符合");//卧位检测结论
										}else{
											dataMap.put("s1614","—");//卧位检测结论
										}
									}else{
										//判断是DDI值还是mAs
										if (item4 == 1) {
											dataMap.put("s1622","记录mAs");//卧位检测条件
										}else{
											dataMap.put("s1622","记录DDI值");//卧位检测条件
										}
										dataMap.put("s1623",item5+pieces);//卧位检测结果
										if (!item5.equals("") && !item5.equals("/")) {
											dataMap.put("s1624","符合");//卧位检测结论
										}else{
											dataMap.put("s1624","—");//卧位检测结论
										}
									}
								}else{
									//判断是卧位还是立位
									if (item1.indexOf("卧位") != -1) {
										dataMap.put("s1613",item7+"%");//卧位检测结果
										//判断是DDI值还是mAs
										if (item4 == 1) {
											dataMap.put("s1612","记录mAs");//卧位检测条件
										}else{
											dataMap.put("s1612","记录DDI值");//卧位检测条件
										}
										if (!item7.equals("") && !item7.equals("/")) {
											//判断结果是否符合标准
											if (Math.abs(parseDouble) < 25) {
												dataMap.put("s1614","符合");//卧位检测结论
											}else{
												dataMap.put("s1614","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "AEC灵敏度";
											}
										}else{
											dataMap.put("s1614","—");//卧位检测结论
										}
									}else{
										dataMap.put("s1623",item7+"%");//卧位检测结果
										//判断是DDI值还是mAs
										if (item4 == 1) {
											dataMap.put("s1622","记录mAs");//卧位检测条件
										}else{
											dataMap.put("s1622","记录DDI值");//卧位检测条件
										}
										if (!item7.equals("") && !item7.equals("/")) {
											//判断结果是否符合标准
											if (Math.abs(parseDouble) < 25) {
												dataMap.put("s1624","符合");//卧位检测结论
											}else{
												dataMap.put("s1624","不符合");//卧位检测结论
												pass = 1;
												isNo[i] = "AEC灵敏度";
											}
										}else{
											dataMap.put("s1624","—");//卧位检测结论
										}
									}
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("s1611",dataMap.get("s1621"));
								dataMap.put("s1612",dataMap.get("s1622"));
								dataMap.put("s1613",dataMap.get("s1623"));
								dataMap.put("s1614",dataMap.get("s1624"));
							}
						}
					}else{
						dataMap.put("s162","—");
//						dataMap.put("s1611","—");
						dataMap.put("s1612","—");
						dataMap.put("s1613",reason);
						dataMap.put("s1614","—");
						
//						dataMap.put("s1621","—");
						dataMap.put("s1622","—");
						dataMap.put("s1623",reason);
						dataMap.put("s1624","—");
					}
					dataMap.put("tcq16",tcq);//用于模板判断
					
					//17是AEC电离室之间一致性
				}else if (type == 17) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					double pd = 0d;
					
					dataMap.put("s171","11");
					if (monitorType.equals("验收检测")) {
						dataMap.put("s172","±10.0%内");
						pd = 10;
					}else{
						dataMap.put("s172","±15.0%内");
						pd = 15;
					}
					dataMap.put("s1711","AEC电离室之间一致性       （卧位探测器） ");
					dataMap.put("s1721","AEC电离室之间一致性       （立位探测器） ");
					
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean1.get("item1");
							logger.info("item1="+item1);
							int item4 = Integer.parseInt((String) morphDynaBean1.get("item4"));
							logger.info("mAs="+item4);
							int item55 = Integer.parseInt((String) morphDynaBean1.get("item5"));
							logger.info("DDI值="+item55);
							String item8 = (String) morphDynaBean1.get("item8");
							logger.info("最大偏差="+item8);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item1.indexOf("立位") != -1) {  
									isW = 1;     
								}   
							}
							
							double parseDouble = 0d;
							//判断是否输入的是数字
							if (NumberUtils.isNumber(item8)) {
								parseDouble = Double.parseDouble(item8);
							}
							
							String pieces = "";
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							for (int k = 1; k <= objects1.length; k++) {
								a = JSONObject.fromObject(objects1[k-1]);
								bean = JSONObject.toBean(a);
								MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
								pieces = (String) morphDynaBean11.get("item1");
								logger.info("单位="+pieces);
							}
							
							//判断是卧位还是立位
							if (item1.indexOf("卧位") != -1) {
								dataMap.put("s1713",item8+pieces);//卧位检测结果
								//判断是DDI值还是mAs
								if (item4 == 1) {
									dataMap.put("s1712","记录mAs");//卧位检测条件
								}else{
									dataMap.put("s1712","记录DDI值");//卧位检测条件
								}
								if (!item8.equals("") && !item8.equals("/")) {
									//判断结果是否符合标准
									if (Math.abs(parseDouble) < pd) {
										dataMap.put("s1714","符合");//卧位检测结论
									}else{
										dataMap.put("s1714","不符合");//卧位检测结论
										pass = 1;
										isNo[i] = "AEC电离室之间一致性";
									}
								}else{
									dataMap.put("s1714","—");//卧位检测结论
								}
							}else{
								dataMap.put("s1723",item8+pieces);//立位检测结果
								//判断是DDI值还是mAs
								if (item4 == 1) {
									dataMap.put("s1722","记录mAs");//立位检测条件
								}else{
									dataMap.put("s1722","记录DDI值");//立位检测条件
								}
								if (!item8.equals("") && !item8.equals("/")) {
									//判断结果是否符合标准
									if (Math.abs(parseDouble) < pd) {
										dataMap.put("s1724","符合");//立位检测结论
									}else{
										dataMap.put("s1724","不符合");//立位检测结论
										pass = 1;
										isNo[i] = "AEC电离室之间一致性";
									}
								}else{
									dataMap.put("s1724","—");//立位检测结论
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("s1711",dataMap.get("s1721"));
								dataMap.put("s1712",dataMap.get("s1722"));
								dataMap.put("s1713",dataMap.get("s1723"));
								dataMap.put("s1714",dataMap.get("s1724"));
							}
						}
					}else{
						dataMap.put("s172","—");
//						dataMap.put("s1711","—");
						dataMap.put("s1712","—");
						dataMap.put("s1713",reason);
						dataMap.put("s1714","—");
						
//						dataMap.put("s1721","—");
						dataMap.put("s1722","—");
						dataMap.put("s1723",reason);
						dataMap.put("s1724","—");
					}
					dataMap.put("tcq17",tcq);//用于模板判断
					
					//18是AEC管电压变化一致性
				}else if (type == 18) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断探测器数量
					int tcq = 0;
					int isW = 0;
					
					dataMap.put("s181","12");
					if (monitorType.equals("验收检测")) {
						dataMap.put("s182","建立基线值");
					}else{
						dataMap.put("s182","±25.0%内");
					}
					dataMap.put("s1811","AEC管电压变化一致性       （卧位探测器） ");
					dataMap.put("s1821","AEC管电压变化一致性       （立位探测器） ");
					
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean1.get("item1");
							logger.info("item1="+item1);
							int item3 = Integer.parseInt((String) morphDynaBean1.get("item3"));
							logger.info("剂量值="+item3);
							int item4 = Integer.parseInt((String) morphDynaBean1.get("item4"));
							logger.info("DDI值="+item4);
							int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
							logger.info("0是没有,1是打钩="+item22);
							
							if (item22 == 1) {
								tcq += 1;
								if (item1.indexOf("立位") != -1) {
									isW = 1;
								}
							}
							
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							for (int k = 1; k <= objects1.length; k++) {
								a = JSONObject.fromObject(objects1[k-1]);
								bean = JSONObject.toBean(a);
								MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
								String pieces = (String) morphDynaBean11.get("item1");
								logger.info("单位="+pieces);
								String item6 = (String) morphDynaBean11.get("item6");
								logger.info("平均值="+item6);
								String item8 = (String) morphDynaBean11.get("item8");
								logger.info("相对偏差(%)="+item8);
								
								double parseDouble = 0d;
								//判断是否输入的是数字
								if (NumberUtils.isNumber(item8)) {
									parseDouble = Double.parseDouble(item8);
								}
								
								//判断验收还是状态
								if (monitorType.equals("验收检测")) {
									//判断是卧位还是立位
									if (item1.indexOf("卧位") != -1) {
										//判断是DDI值还是mAs
										if (item3 == 1) {
											dataMap.put("s1812","记录剂量值");//卧位检测条件
										}else{
											dataMap.put("s1812","记录DDI值");//卧位检测条件
										}
										dataMap.put("s1813",item6+pieces);//卧位检测结果
										if (!item6.equals("") && !item6.equals("/")) {
											dataMap.put("s1814","符合");//卧位检测结果
										}else{
											dataMap.put("s1814","—");//卧位检测结果
										}
									}else{
										//判断是DDI值还是mAs
										if (item3 == 1) {
											dataMap.put("s1822","记录剂量值");//立位检测条件
										}else{
											dataMap.put("s1822","记录DDI值");//立位检测条件
										}
										dataMap.put("s1823",item6+pieces);//立位检测结果
										if (!item6.equals("") && !item6.equals("/")) {
											dataMap.put("s1824","符合");//立位检测结果
										}else{
											dataMap.put("s1824","—");//立位检测结果
										}
									}
								}else{
									//判断是卧位还是立位
									if (item1.indexOf("卧位") != -1) {
										//判断是DDI值还是mAs
										if (item3 == 1) {
											dataMap.put("s1812","记录剂量值");//卧位检测条件
										}else{
											dataMap.put("s1812","记录DDI值");//卧位检测条件
										}
										dataMap.put("s1813",item8+pieces);//卧位检测结果
										if (!item8.equals("") && !item8.equals("/")) {
											//判断结果是否符合标准
											if (Math.abs(parseDouble) < 25) {
												dataMap.put("s1814","符合");//卧位检测结果
											}else{
												dataMap.put("s1814","不符合");//卧位检测结果
												pass = 1;
												isNo[i] = "AEC管电压变化一致性";
											}
										}else{
											dataMap.put("s1814","—");//卧位检测结果
										}
									}else{
										//判断是DDI值还是mAs
										if (item3 == 1) {
											dataMap.put("s1822","记录剂量值");//立位检测条件
										}else{
											dataMap.put("s1822","记录DDI值");//立位检测条件
										}
										dataMap.put("s1823",item8+pieces);//立位检测结果
										if (!item8.equals("") && !item8.equals("/")) {
											//判断结果是否符合标准
											if (Math.abs(parseDouble) < 25) {
												dataMap.put("s1824","符合");//立位检测结果
											}else{
												dataMap.put("s1824","不符合");//立位检测结果
												pass = 1;
												isNo[i] = "AEC管电压变化一致性";
											}
										}else{
											dataMap.put("s1824","—");//立位检测结果
										}
									}
								}
							}
						}
						
						//判断一个探测器的情况下数据处理
						if (tcq < 2) {
							//判断是否需要把立位数据赋给卧位
							if (isW == 1) {
								dataMap.put("s1811",dataMap.get("s1821"));
								dataMap.put("s1812",dataMap.get("s1822"));
								dataMap.put("s1813",dataMap.get("s1823"));
								dataMap.put("s1814",dataMap.get("s1824"));
							}
						}
					}else{
						dataMap.put("s182","—");
//						dataMap.put("s1811","—");
						dataMap.put("s1812","—");
						dataMap.put("s1813",reason);
						dataMap.put("s1814","—");
						
//						dataMap.put("s1821","—");
						dataMap.put("s1822","—");
						dataMap.put("s1823",reason);
						dataMap.put("s1824","—");
					}
					dataMap.put("tcq18",tcq);//用于模板判断
				}
			}
			
			//模拟数据测试
		    dataMap.put("v1","");
		    dataMap.put("v2","");
		    dataMap.put("v3","");
		    dataMap.put("v4","");
		    dataMap.put("v5","");
		    dataMap.put("standard","");
		    dataMap.put("correctNum","");
		    
		    //循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int as = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (as != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					as ++;
				}
			}
		    
			//判断结论是否符合
			if (pass == 0) {
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，所检项目的检测结果均符合标准要求。");
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，"+isNoName+"的检测结果不符合标准要求，其余所检项目的检测结果符合标准要求。");
			}
		    dataMap.put("pointDatas1",pointDatas1);
		    dataMap.put("pointDatas2",pointDatas2);
		    dataMap.put("pointDatas3",pointDatas3);
		    
		    dataMap.put("notes",notes);
		    dataMap.put("tcpNote",notes.size());//用于判断是否有备注
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			String ftl = "/fs_dr_xn.ftl";

			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
		    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * DR报告封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_dr_xn_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_dr_xn_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","质量控制检测");//项目名称
		    dataMap.put("checkUnitName",task.getCheckUnitName());//委托单位
		    dataMap.put("monitorType","委托检测");//检测类别
		    dataMap.put("place",task.getPlace());//受检场所名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//场所内设备名称
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_dr_xn_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	
	/**
	 * 生成屏片摄影性能报告
	 * @return
	 */
	@SuppressWarnings({ "static-access", "deprecation" })
	public String report_fs_pp_xn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_pp_xn_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
		    String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    String[] isNo = new String[20];//不合格的项目
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat yMd_sdf =new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
//			SimpleDateFormat s_sdf=new SimpleDateFormat("dd");//秒
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
							"task.createtime LIKE '%"+yMd+"%' AND " +
							"deviceType.deviceMain='1'";
			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject","详见表6");//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    dataMap.put("purpose","屏片摄影 ");//设备用途
		    
		    String monitorType = task.getMonitorType();//检测类别
		    String timeDeixis = task.getTimeDeixis();//有无时间指示
		    String exposureControl = task.getExposureControl();//自照曝光控制
		    String standard1 = task.getStandard();
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    //仪器
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			   
			    correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
		    	correctNums.add(correctNum);
		    	
//		    	correctNum = new ROMS_SZ_DEVICEDATA();
//		    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
//		    	correctNums.add(correctNum);
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    ROMS_SZ_POINTDATA pointData = null;
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是管电压指示的偏离,1是输出量重复性CV输出量线性L ，2是有用线束半值层，3是曝光时间指示的偏离" +
						"4是自动曝光控制响应，5是自动曝光控制重复性，6是有用线束垂直度偏离，7是光野与照射野四边的偏离，" +
						"8是光野与照射野中心的偏离，9是聚焦滤线栅与有用线束中心对准="+type);
				
				//0是管电压指示的偏离
				if (type == 0) {
					//表示有几个焦点
					int jd = 0;
					
					dataMap.put("v01","1");
					dataMap.put("v02","管电压指示的偏离");
					dataMap.put("v03","±5.0%或±5.0kV内，以较大者控制");
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item11 = (String) morphDynaBean1.get("item1");
						logger.info("v0"+j+"1="+item11);
						int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v0"+j+"2="+item22);
						
						dataMap.put("v0"+j+"1",item11);
						
						//判断是否勾选
						if (item22 == 1) {
							jd += 1;
							
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							for (int k = 1; k <= objects1.length; k++) {
								a = JSONObject.fromObject(objects1[k-1]);
								bean = JSONObject.toBean(a);
								MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
								String item1 = (String) morphDynaBean11.get("item1");
								logger.info("标称值 （kV）="+item1);
								String item6 = (String) morphDynaBean11.get("item6");
								logger.info("偏差（kV）="+item6);
								String item7 = (String) morphDynaBean11.get("item7");
								logger.info("相对偏差（%）="+item7);
								
								//判断是不是数字
								double parseDouble6 = 0d;
								double parseDouble7 = 0d;
								if (NumberUtils.isNumber(item6)) {
									parseDouble6 = Double.parseDouble(item6);
								}
								if (NumberUtils.isNumber(item7)) {
									parseDouble7 = Double.parseDouble(item7);
								}
								
								//第一次循环的数据单独赋值
								if (k == 1) {
									//判断是不是有数据
									if ((item6.equals("") && item7.equals("")) && (item6.equals("/") && item7.equals("/"))) {
										dataMap.put("v0"+j+"2","—");
										dataMap.put("v0"+j+"3","—");
										dataMap.put("v0"+j+"4","—");
									}else{
										dataMap.put("v0"+j+"2",item1+"kV");
										dataMap.put("v0"+j+"3",item6+"kV，"+item7+"%");
										if (Math.abs(parseDouble6) < 5) {
											dataMap.put("v0"+j+"4","符合");
										}else if (Math.abs(parseDouble7) == 5) {
											dataMap.put("v0"+j+"4","符合");
										}else{
											dataMap.put("v0"+j+"4","不符合");
											pass = 1;
											isNo[i] = "管电压指示的偏离 ";
										}
									}
								}else{
									//判断是不是有数据
									if ((!item6.equals("") && !item7.equals("")) && (!item6.equals("/") && !item7.equals("/"))) {
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item1+"kV");
										pointData.setV2(item6+"kV，"+item7+"%");
										if (Math.abs(parseDouble6) < 5) {
											pointData.setV3("符合");
										}else if (Math.abs(parseDouble7) == 5) {
											pointData.setV3("符合");
										}else{
											pointData.setV3("不符合");
											pass = 1;
											isNo[i] = "管电压指示的偏离 ";
										}
										//判断不同的焦点往不同的list插数据（因为模板里面是不同的循环）
										if (item11.equals("大焦点")) {
											pointDatas1.add(pointData);
										}else{
											pointDatas2.add(pointData);
										}
									}
								}
							}
						}else{
							dataMap.put("v0"+j+"2","—");
							dataMap.put("v0"+j+"3","—");
							dataMap.put("v0"+j+"4","—");
						}
					}
					dataMap.put("jd",jd);
					//判断如果是一个焦点的话
					if (jd < 2) {
						//判断如果小焦点有值，大焦点没值得情况，就把小焦点的值赋给大焦点
						if (pointDatas1.size() < pointDatas2.size()) {
							pointDatas1 = pointDatas2;
							dataMap.put("v011",dataMap.get("v021"));
							dataMap.put("v012",dataMap.get("v022"));
							dataMap.put("v013",dataMap.get("v023"));
							dataMap.put("v014",dataMap.get("v024"));
						}
					}
					
					//1是输出量重复性CV
					//输出量线性L 
				}else if (type == 1) {
					dataMap.put("v11","2");//编号
					dataMap.put("v12","输出量重复性");//检测项目
					dataMap.put("v13","测量5次");//检测条件
					dataMap.put("v15","≤10.0%");//标准限值
					dataMap.put("v21","3");//编号
					dataMap.put("v22","输出量线性");//检测项目
					dataMap.put("v23","相邻两档间");//检测条件
					dataMap.put("v25","±10.0%内");//标准限值
					
					String item2 = (String) morphDynaBean.get("item1");
					logger.info("cv="+item2);
					String item3 = (String) morphDynaBean.get("item2");
					logger.info("L12="+item3);
					
					dataMap.put("v14",item2+"%");//检测结果
					dataMap.put("v24",item3+"%");//检测结果
					
					//判断是不是数字
					double parseDouble1 = 0d;
					double parseDouble2 = 0d;
					if (NumberUtils.isNumber(item2)) {
						parseDouble1 = Double.parseDouble(item2);
					}
					if (NumberUtils.isNumber(item3)) {
						parseDouble2 = Double.parseDouble(item3);
					}
					
					if (!item2.equals("") && !item2.equals("/")) {
						//判断结果是否符合标准
						if (parseDouble1 <= 10) {
							dataMap.put("v16","符合");//单项结论
						}else{
							dataMap.put("v16","不符合");//单项结论
							pass = 1;
							isNo[i] = "输出量重复性CV ";
						}
					}else{
						dataMap.put("v16","—");//单项结论
					}
					
					if (!item3.equals("") && !item3.equals("/")) {
						if (Math.abs(parseDouble2) < 10) {
							dataMap.put("v26","符合");//单项结论
						}else{
							dataMap.put("v26","不符合");//单项结论
							pass = 1;
							isNo[i] = "输出量线性L";
						}
					}else{
						dataMap.put("v26","—");//单项结论
					}
					
					//2是有用线束半值层
				}else if (type == 2) {
					dataMap.put("v31","4");//编号
					dataMap.put("v32","有用线束半值层");//检测项目
					dataMap.put("v35","≥2.3");//标准限值
					
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("管电压="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("HVL="+item2);
					
					dataMap.put("v33",item1+"kV");//检测条件
					dataMap.put("v34",item2);//检测结果
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item2)) {
						parseDouble1 = Double.parseDouble(item2);
					}
					
					if (!item2.equals("") && !item2.equals("/")) {
						//判断结果是否符合标准
						if (parseDouble1 >= 2.3) {
							dataMap.put("v36","符合");//单项结论
						}else{
							dataMap.put("v36","不符合");//单项结论
							pass = 1;
							isNo[i] = "有用线束半值层";
						}
					}else{
						dataMap.put("v36","—");//单项结论
					}
					
					//3是曝光时间指示的偏离
				}else if (type == 3) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("v41","5");//编号
					dataMap.put("v42","曝光时间指示的偏离");//检测项目
					
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("valueList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 =(String) morphDynaBean1.get("item1");
							logger.info("标称值 （ms）="+item1);
							String item6 =(String) morphDynaBean1.get("item6");
							logger.info("偏差（ms）="+item6);
							String item7 =(String) morphDynaBean1.get("item7");
							logger.info("相对偏差（%）="+item7);
							
							double parseDouble1 = 0d;
							double parseDouble6 = 0d;
							double parseDouble7 = 0d;
							//判断是否为数字
							if (NumberUtils.isNumber(item1)) {
								parseDouble1 = Double.parseDouble(item1);
							}
							if (NumberUtils.isNumber(item6)) {
								parseDouble6 = Double.parseDouble(item6);
							}
							if (NumberUtils.isNumber(item7)) {
								parseDouble7 = Double.parseDouble(item7);
							}
							//判断是验收还是状态
							if (monitorType.equals("验收检测")) {
								//判断第一次循环单独赋值
								if (j == 1) {
									//判断是否有数据
									if (item1.equals("") && item1.equals("/")) {
										dataMap.put("v43","—");
										dataMap.put("v44","—");
										dataMap.put("v45","—");
										dataMap.put("v46","—");
										dataMap.put("v47","—");
									}else{
										dataMap.put("v44",item1);
										//根据曝光时间指示来显示结果
										if (timeDeixis.equals("有")) {
											dataMap.put("v45",item7+"%");
										}else{
											dataMap.put("v45","不满足标准检测条件");
										}
										
										//判断结果是否符合标准
										if (parseDouble1 >= 100) {
											dataMap.put("v43","t≥100ms");
											dataMap.put("v46","±10.0%内");
											if (!item7.equals("") && !item7.equals("/")) {
												if (Math.abs(parseDouble7) < 10) {
													dataMap.put("v47","符合");
												}else{
													dataMap.put("v47","不符合");
													pass = 1;
													isNo[i] = "曝光时间指示的偏离 ";
												}
											}else{
												dataMap.put("v47","—");
											}
										}else{
											dataMap.put("v43","t＜100ms");
											dataMap.put("v46","±2ms内或±15.0%内");
											if (Math.abs(parseDouble7) <= 15) {
												dataMap.put("v47","符合");
											}else{
												dataMap.put("v47","不符合");
												pass = 1;
												isNo[i] = "曝光时间指示的偏离 ";
											}
										}
									}
								}else{
									//判断是否有数据
									if (!item1.equals("") && !item1.equals("/")) {
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV2(item1);
										//根据曝光时间指示来显示结果
										if (timeDeixis.equals("有")) {
											pointData.setV3(item7+"%");
										}else{
											pointData.setV3("不满足标准检测条件");
										}
										
										//判断结果是否符合标准
										if (parseDouble1 >= 100) {
											pointData.setV1("t≥100ms");
											pointData.setV4("±10.0%内");
											if (!item7.equals("") && !item7.equals("/")) {
												if (Math.abs(parseDouble7) < 10) {
													pointData.setV5("符合");
												}else{
													pointData.setV5("不符合");
													pass = 1;
													isNo[i] = "曝光时间指示的偏离 ";
												}
											}else{
												pointData.setV5("—");
											}
										}else{
											pointData.setV1("t＜100ms");
											pointData.setV4("±2ms内或±15.0%内");
											if (Math.abs(parseDouble7) <= 15) {
												pointData.setV5("符合");
											}else{
												pointData.setV5("不符合");
												pass = 1;
												isNo[i] = "曝光时间指示的偏离 ";
											}
										}
										pointDatas3.add(pointData);
									}
								}
							}else{
								dataMap.put("v43","—");
								dataMap.put("v44","—");
								dataMap.put("v45","状态检测无此项");
								dataMap.put("v46","—");
								dataMap.put("v47","—");
							}
						}
					}else{
						dataMap.put("v43","—");
						dataMap.put("v44","—");
						dataMap.put("v45",reason);
						dataMap.put("v46","—");
						dataMap.put("v47","—");
					}
					
					
					//4是自动曝光控制响应
				}else if (type == 4) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					int item2 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("空气比释动能法="+item2);
					int item4 = Integer.parseInt((String) morphDynaBean.get("item3"));
					logger.info("光密度法="+item4);
					String item11 = (String) morphDynaBean.get("item10");
					logger.info("变化率="+item11);
					String item12 = (String) morphDynaBean.get("item11");
					logger.info("与平均值最大偏差="+item12);
					
					dataMap.put("v51","6");//编号
					dataMap.put("v52","自动曝光控制响应");//检测项目
					
					if (project == 1) {
						double parseDouble1 = 0d;
						double parseDouble2 = 0d;
						//判断是否为数字
						if (NumberUtils.isNumber(item11)) {
							parseDouble1 = Double.parseDouble(item11);
						}
						if (NumberUtils.isNumber(item12)) {
							parseDouble2 = Double.parseDouble(item12);
						}
						
						//判断检测条件
						if (item2 == 1) {
							dataMap.put("v53","空气比释动能");//检测条件
							dataMap.put("v55","平均值±20%内");//标准限值
							if (!item11.equals("") && !item11.equals("/")) {
								//判断结果是否符合条件
								if (Math.abs(parseDouble1) < 20) {
									dataMap.put("v56","符合");//结论
								}else{
									dataMap.put("v56","不符合");//结论
									pass = 1;
									isNo[i] = "自动曝光控制响应";
								}
							}else{
								dataMap.put("v56","—");//结论
							}
						}else if (item4 == 1) {
							dataMap.put("v53","影像光密度");//检测条件
							dataMap.put("v55","平均值±0.3OD内");//标准限值
							if (!item11.equals("") && !item11.equals("/")) {
								//判断结果是否符合条件
								if (Math.abs(parseDouble2) < 0.3) {
									dataMap.put("v56","符合");//结论
								}else{
									dataMap.put("v56","不符合");//结论
									pass = 1;
									isNo[i] = "自动曝光控制响应";
								}
							}else{
								dataMap.put("v56","—");//结论
							}
						}else{
							dataMap.put("v53","—");//检测条件
							dataMap.put("v55","—");//标准限值
							dataMap.put("v56","—");//结论
						}
						
						//根据自照曝光控制来显示结果
						if (exposureControl.equals("有")) {
							dataMap.put("v54",item11+"%");//检测结果
						}else{
							dataMap.put("v54","不满足标准检测条件");//检测结果
						}
					}else{
						dataMap.put("v53","—");//检测条件
						dataMap.put("v54",reason);//检测结果
						dataMap.put("v55","—");//标准限值
						dataMap.put("v56","—");//结论
					}
					
					
					//5是自动曝光控制重复性
				}else if (type == 5) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("v61","7");//编号
					dataMap.put("v62","自动曝光控制重复性");//检测项目
					
					String pieces = "";
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean1.get("item1");
							logger.info("item1"+item1);
							String item3 = (String) morphDynaBean1.get("item3");
							logger.info("值"+item3);
							
							double parseDouble1 = 0d;
							//判断是否为数字
							if (NumberUtils.isNumber(item3)) {
								parseDouble1 = Double.parseDouble(item3);
							}
							
							//判断是管电流时间积法还是光密度法
							if (item1.equals("管电流时间积法")) {
								dataMap.put("v63","曝光后管电流时间积读数");//检测条件
								dataMap.put("v65","≤10%");//标准限值
								pieces = "%";
								
								if (!item3.equals("") && !item3.equals("/")) {
									//判断结果是否符合
									if (parseDouble1 <= 10) {
										dataMap.put("v66","符合");//结论
									}else{
										dataMap.put("v66","不符合");//结论
										pass = 1;
										isNo[i] = "自动曝光控制重复性";
									}
								}else{
									dataMap.put("v66","—");//结论
								}
							}else{
								dataMap.put("v63","影像光密度");//检测条件
								dataMap.put("v65","平均值±0.2OD内");//标准限值
								pieces = "OD";
								
								if (!item3.equals("") && !item3.equals("/")) {
									//判断结果是否符合
									if (Math.abs(parseDouble1) < 0.2) {
										dataMap.put("v66","符合");//结论
									}else{
										dataMap.put("v66","不符合");//结论
										pass = 1;
										isNo[i] = "自动曝光控制重复性";
									}
								}else{
									dataMap.put("v66","—");//结论
								}
							}
							
							//根据自照曝光控制来显示结果
							if (exposureControl.equals("有")) {
								dataMap.put("v64",item3+pieces);//检测结果
							}else{
								dataMap.put("v64","不满足标准检测条件");//检测结果
							}
						}
					}else{
						dataMap.put("v63","—");//检测条件
						dataMap.put("v64",reason);//检测结果
						dataMap.put("v65","—");//标准限值
						dataMap.put("v66","—");//结论
					}
					
					
					
					//6是有用线束垂直度偏离
				}else if (type == 6) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("钢珠影像落在大圆内="+item2);
					int item3 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("钢珠影像落在大圆外="+item3);
					String item4 = (String) morphDynaBean.get("item3");
					logger.info("3°="+item4);
					
					dataMap.put("v71","8");//编号
					dataMap.put("v72","用线束垂直度偏离");//检测项目
					
					if (project == 1) {
						dataMap.put("v73","检测筒和检测板");//检测条件
						dataMap.put("v75","≤3°");//标准限值
						
						if (item4.indexOf("<") != -1) {
							item4 = "＜";
						}else if (item4.indexOf(">") != -1) {
							item4 = "＞";
						}
						dataMap.put("v74",item4+"3°");//检测结果
						
						if (!item4.equals("") && !item4.equals("/")) {
							//判断结果是否符合
							if (item4.equals("＜") || item4.equals("≤")) {
								dataMap.put("v76","符合");//结论
							}else{
								dataMap.put("v76","不符合");//结论
								pass = 1;
								isNo[i] = "有用线束垂直度偏离";
							}
						}else{
							dataMap.put("v76","—");//结论
						}
					}else{
						dataMap.put("v73","—");//检测条件
						dataMap.put("v74",reason);//检测结果
						dataMap.put("v75","—");//标准限值
						dataMap.put("v76","—");//结论
					}
					
					
					//7是光野与照射野四边的偏离
				}else if (type == 7) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("左边a1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("右边a2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("上边b1="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("下边b2="+item4);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("v81","9");//编号
					dataMap.put("v82","光野与照射野四边的偏离");//检测项目
					if (project == 1) {
						double parseDouble1 = 0d;
						double parseDouble2 = 0d;
						double parseDouble3 = 0d;
						double parseDouble4 = 0d;
						//判断是否输入的是数字
						if (NumberUtils.isNumber(item1)) {
							parseDouble1 = Double.parseDouble(item1);
						}
						if (NumberUtils.isNumber(item2)) {
							parseDouble2 = Double.parseDouble(item2);
						}
						if (NumberUtils.isNumber(item3)) {
							parseDouble3 = Double.parseDouble(item3);
						}
						if (NumberUtils.isNumber(item4)) {
							parseDouble4 = Double.parseDouble(item4);
						}
						
						dataMap.put("v83","1mSID");//检测条件
						dataMap.put("v84","左边a₁："+item1+"cm");
						dataMap.put("v85","右边a₂："+item2+"cm");
						dataMap.put("v86","上边b₁："+item3+"cm");
						dataMap.put("v87","下边b₂："+item4+"cm");
						dataMap.put("v88","任一边±1.0cm内");//标准限值
						if ((!item1.equals("") && !item1.equals("/")) && (!item2.equals("") && !item2.equals("/")) && (!item3.equals("") && !item3.equals("/")) && (!item4.equals("") && !item4.equals("/"))) {
							if (Math.abs(parseDouble1) < 1 && Math.abs(parseDouble2) < 1 && Math.abs(parseDouble3) < 1 && Math.abs(parseDouble4) < 1) {
								dataMap.put("v89","符合");
							}else{
								dataMap.put("v89","不符合");
								pass = 1;
								isNo[i] = "光野与照射野四边的偏离";
							}
						}else{
							dataMap.put("v89","—");
						}
					}else{
						dataMap.put("v83","—");//检测条件
						dataMap.put("v84",reason);
						dataMap.put("v85",reason);
						dataMap.put("v86",reason);
						dataMap.put("v87",reason);
						dataMap.put("v88","—");//标准限值
						dataMap.put("v89","—");
					}
					
					
					//8是光野与照射野中心的偏离
				}else if (type == 8) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("光野中心与照射野中心的偏离="+item1);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					double parseDouble1 = 0d;
					//判断是否输入的是数字
					if (NumberUtils.isNumber(item1)) {
						parseDouble1 = Double.parseDouble(item1);
					}
					
					dataMap.put("v91","10");//编号
					dataMap.put("v92","光野与照射野中心的偏离");//检测项目
					
					if (project == 1) {
						dataMap.put("v93","1mSID");//检测条件
						dataMap.put("v94",item1+"cm");//检测结果
						dataMap.put("v95","±1.0cm内");//标准限值
						
						if (!item1.equals("") && item1.equals("/")) {
							//判断结果是否符合
							if (Math.abs(parseDouble1) < 1) {
								dataMap.put("v96","符合");//结论
							}else{
								dataMap.put("v96","不符合");//结论
								pass = 1;
								isNo[i] = "光野与照射野中心的偏离";
							}
						}else{
							dataMap.put("v96","—");//结论
						}
					}else{
						dataMap.put("v93","—");//检测条件
						dataMap.put("v94",reason);//检测结果
						dataMap.put("v95","—");//标准限值
						dataMap.put("v96","—");//结论
					}
					
					
					//9是聚焦滤线栅与有用线束中心对准
				}else if (type == 9) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("v101","11");//编号
					dataMap.put("v102","聚焦滤线栅与有用线束中心对准");//检测项目
					
					if (project == 1) {
						//判断是验收还是状态检测
						if (monitorType.equals("验收检测")) {
							String item1 = (String) morphDynaBean.get("item1");
							logger.info("是否有聚焦滤线栅="+item1);
							String item2 = (String) morphDynaBean.get("item2");
							logger.info("是否为聚焦滤线栅="+item2);
							String item3 = (String) morphDynaBean.get("item3");
							logger.info("球管是否可以在垂直于床中心线的方向前后移动="+item3);
							String item9 = (String) morphDynaBean.get("item9");
							logger.info("是否中心点密度最高="+item9);
							String item10 = (String) morphDynaBean.get("item10");
							logger.info("是否各孔光密度对称="+item10);
							
							dataMap.put("v103","SID与会聚滤线栅的聚焦距离一致");//检测条件
							dataMap.put("v105","中心点密度最高，两边密度对称");//标准限值
							
							//判断是否满足检测条件
							if (item1.equals("否") || item2.equals("否") || item3.equals("否")) {
								dataMap.put("v104","不满足标准检测条件");//检测结果
								dataMap.put("v106","—");//结论
							}else{
								String result = "";
								if (item9.equals("是")) {
									result += "中心点密度最高,";
								}else if (item9.equals("否")) {
									result += "中心点密度不最高,";
								}
								if (item10.equals("是")) {
									result += "两边密度对称";
								}else if (item9.equals("否")) {
									result += "两边密度不对称";
								}
								dataMap.put("v104",result);//检测结果
								//判断结果是否符合
								if (item9.equals("是") && item10.equals("是")) {
									dataMap.put("v106","符合");//结论
								}else{
									dataMap.put("v106","不符合");//结论
									pass = 1;
									isNo[i] = "聚焦滤线栅与有用线束中心对准";
								}
							}
						}else{
							dataMap.put("v101","11");//编号
							dataMap.put("v102","聚焦滤线栅与有用线束中心对准");//检测项目
							dataMap.put("v103","—");//检测条件
							dataMap.put("v104","—");//检测结果
							dataMap.put("v105","状态检测无此项");//标准限值
							dataMap.put("v106","—");//结论
						}
					}else{
						dataMap.put("v103","—");//检测条件
						dataMap.put("v104",reason);//检测结果
						dataMap.put("v105","—");//标准限值
						dataMap.put("v106","—");//结论
					}
				}
			}
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int as = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (as != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					as ++;
				}
			}
		    
			//判断结论是否符合
			if (pass == 0) {
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，所检项目的检测结果均符合标准要求。");
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，"+isNoName+"的检测结果不符合标准要求，其余所检项目的检测结果符合标准要求。");
			}
		    dataMap.put("pointDatas1",pointDatas1);
		    dataMap.put("pointDatas2",pointDatas2);
		    dataMap.put("pointDatas3",pointDatas3);
		    dataMap.put("notes",notes);//备注
		    
		    //模拟数据测试
		    dataMap.put("v1","");
		    dataMap.put("v2","");
		    dataMap.put("v3","");
		    dataMap.put("v4","");
		    dataMap.put("v5","");
		    dataMap.put("standard","");
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			String ftl = "/fs_pp_xn.ftl";

			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
		    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 屏片摄影性能报告封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_pp_xn_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_pp_xn_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","质量控制检测");//项目名称
		    dataMap.put("checkUnitName",task.getCheckUnitName());//委托单位
		    dataMap.put("monitorType","委托检测");//检测类别
		    dataMap.put("place",task.getPlace());//受检场所名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//场所内设备名称
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_pp_xn_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 生成透视性能报告
	 * @return
	 */
	@SuppressWarnings({ "static-access", "deprecation" })
	public String report_fs_ts_xn_docx_old(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ts_xn_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
		    String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    String[] isNo = new String[20];//不合格的项目
		    
		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
		    logger.info("检测人员="+photoUrl);
		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
			logger.info("检测人数量="+recordUrl.length);
			for (int i = 0; i < recordUrl.length; i++) {
				where1 = " and photoUrl='"+recordUrl[i]+"'";
				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
				if (staffs.size() == 0) {
					continue;
				}else{
					if (ass != 0) {
						staffName += "，";
					}
					staffName += staffs.get(0).getStaffName();
					ass++;
				}
				
			}
			
			SimpleDateFormat yMd_sdf=new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
							"task.createtime LIKE '%"+yMd+"%' AND " +
							"deviceType.deviceMain='1'";
			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区工业路第五工业区南一巷9号");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject","详见表6");//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("conditions","");//检测条件
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    dataMap.put("purpose",task.getItem2());//设备用途
		    
		    String monitorType = task.getMonitorType();//检测类别
		    String standard1 = task.getStandard();
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    //仪器
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			   
//			    correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
//		    	correctNums.add(correctNum);
		    	
		    	correctNum = new ROMS_SZ_DEVICEDATA();
		    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
		    	correctNums.add(correctNum);
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    ROMS_SZ_POINTDATA pointData = null;
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是透视受检者入射体表空气比释动能率典型值，1是透视受检者入射体表空气比释动能率最大值，2是透视荧光屏的灵敏度" +
						"3是空间分辨力，4是低对比分辨力，5是影像接收器入射屏前空气比释动能率，6是自动亮度控制，" +
						"7是照射野与影像接收器中心偏差，8是最大照射野与普通荧光屏尺寸相同时的台屏距="+type);
				
				//0是透视受检者入射体表空气比释动能率典型值
				if (type == 0) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("kV="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("mA="+item4);
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("校准平均值="+item9);
					int item10 = Integer.parseInt((String) morphDynaBean.get("item10"));
					logger.info("透视荧光屏="+item10);
					int item11 = Integer.parseInt((String) morphDynaBean.get("item11"));
					logger.info("非透视荧光屏="+item11);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item9)) {
						parseDouble1 = Double.parseDouble(item9);
					}
					
					dataMap.put("v11","1");//编号
					dataMap.put("v12","透视受检者入射体表空气比释动能率典型值/(mGy/min)");//检测项目
					
					//检测项目是否打钩
					if (project == 1) {
						dataMap.put("v13",item3+"kV，"+item4+"mA ");//检测条件
						dataMap.put("v14",item9);//检测结果
						if (item10 == 1) {
							dataMap.put("v15","≤50");//标准限值
							//判断是否符合
							if (parseDouble1 <= 50) {
								dataMap.put("v16","符合");//结论
							}else{
								dataMap.put("v16","不符合");//结论
								pass = 1;
								isNo[i] = "透视受检者入射体表空气比释动能率典型值";
							}
						}else if (item11 == 1) {
							dataMap.put("v15","≤25");//标准限值
							//判断是否符合
							if (parseDouble1 <= 25) {
								dataMap.put("v16","符合");//结论
							}else{
								dataMap.put("v16","不符合");//结论
								pass = 1;
								isNo[i] = "透视受检者入射体表空气比释动能率典型值";
							}
						}else{
							dataMap.put("v15","—");//标准限值
							dataMap.put("v16","—");//结论
						}
					}else{
						dataMap.put("v13","—");//检测条件
						dataMap.put("v14",reason);//检测结果
						dataMap.put("v15","—");//标准限值
						dataMap.put("v16","—");//结论
					}
					
					
					//1是透视受检者入射体表空气比释动能率最大值
				}else if (type == 1) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("kV="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("mA="+item4);
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("校准平均值="+item9);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item9)) {
						parseDouble1 = Double.parseDouble(item9);
					}
					
					dataMap.put("v21","2");//编号
					dataMap.put("v22","透视受检者入射体表空气比释动能率最大值/(mGy/min)");//检测项目
					if (project == 1) {
						//判断验收还是状态
						if (monitorType.equals("验收检测")) {
							dataMap.put("v23",item3+"kV，"+item4+"mA ");//检测条件
							dataMap.put("v24",item9);//检测结果
							dataMap.put("v25","≤100");//标准限值
							//判断是否符合
							if (parseDouble1 <= 100) {
								dataMap.put("v26","符合");//结论
							}else{
								dataMap.put("v26","不符合");//结论
								pass = 1;
								isNo[i] = "透视受检者入射体表空气比释动能率最大值";
							}
						}else{
							dataMap.put("v23","—");//检测条件
							dataMap.put("v24","状态检测无此项");//检测结果
							dataMap.put("v25","—");//标准限值
							dataMap.put("v26","—");//结论
						}
					}else{
						dataMap.put("v23","—");//检测条件
						dataMap.put("v24",reason);//检测结果
						dataMap.put("v25","—");//标准限值
						dataMap.put("v26","—");//结论
					}
					
					
					//2是透视荧光屏的灵敏度
				}else if (type == 2) {
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("结果="+item5);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item5)) {
						parseDouble1 = Double.parseDouble(item5);
					}
					
					dataMap.put("v31","3");//编号
					dataMap.put("v32","透视荧光屏的灵敏度");//检测项目
					
					if (project == 1) {
						dataMap.put("v33","透视荧光屏");//检测条件
						//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
						if (task.getItem2().equals("直接透视")) {
							dataMap.put("v34",item5);//检测结果
							//判断验收还是状态
							if (monitorType.equals("验收检测")) {
								dataMap.put("v35","≥0.11");//标准限值
								//判断是否符合
								if (parseDouble1 >= 0.11) {
									dataMap.put("v36","符合");//结论
								}else{
									dataMap.put("v36","不符合");//结论
									pass = 1;
									isNo[i] = "透视荧光屏的灵敏度";
								}
							}else{
								dataMap.put("v35","≥0.08");//标准限值
								//判断是否符合
								if (parseDouble1 >= 0.08) {
									dataMap.put("v36","符合");//结论
								}else{
									dataMap.put("v36","不符合");//结论
									pass = 1;
									isNo[i] = "透视荧光屏的灵敏度";
								}
							}
						}else{
							dataMap.put("v34","不满足标准检测条件");//检测结果
							dataMap.put("v35","—");//标准限值
							dataMap.put("v36","—");//结论
						}
					}else{
						dataMap.put("v33","—");//检测条件
						dataMap.put("v34",reason);//检测结果
						dataMap.put("v35","—");//标准限值
						dataMap.put("v36","—");//结论
					}
					
					
					//3是空间分辨力
				}else if (type == 3) {
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					
					int pass1 = 0;
					
					dataMap.put("v41","4");//编号
					dataMap.put("v42","空间分辨力");//检测项目
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean11.get("item1");
						logger.info("I.I尺寸="+item1);
						String item4 = (String) morphDynaBean11.get("item4");
						logger.info("检测值="+item4);
						
						//不等于空才进去，排除没有数据的记录
						if (!item4.equals("") && !item4.equals("/")) {
							double parseDouble1 = 0d;
							double parseDouble2 = 0d;
							
							//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
							if (task.getItem2().equals("直接透视")) {
								dataMap.put("v43","透视荧光屏");//检测条件
								//透视荧光屏只显示第一条数据
								if (k == 1) {
									//判断是不是数字
									if (NumberUtils.isNumber(item4)) {
										parseDouble1 = Double.parseDouble(item4);
									}
									
									dataMap.put("v44",item4);//检测结果
								}else{
									dataMap.put("v44","");//检测结果
								}
								
								//判断验收还是状态
								if (monitorType.equals("验收检测")) {
									dataMap.put("v45","≥0.8");//标准限值
									//判断是否符合
									if (parseDouble1 >= 0.8) {
										dataMap.put("v46","符合");//结论
									}else{
										dataMap.put("v46","不符合");//结论
										pass = 1;
										isNo[i] = "空间分辨力";
									}
								}else{
									dataMap.put("v45","≥0.6");//标准限值
									//判断是否符合
									if (parseDouble1 >= 0.6) {
										dataMap.put("v46","符合");//结论
									}else{
										dataMap.put("v46","不符合");//结论
										pass = 1;
										isNo[i] = "空间分辨力";
									}
								}
							}else if (task.getItem2().equals("间接透视")) {
								dataMap.put("v43","影像增强器入射屏 直径");//检测条件
								
								//判断是不是数字
								if (NumberUtils.isNumber(item4)) {
									parseDouble1 = Double.parseDouble(item4);
								}
								if (NumberUtils.isNumber(item1)) {
									parseDouble2 = Double.parseDouble(item1);
								}
								
								//判断验收还是状态
								if (monitorType.equals("验收检测")) {
									double pd = 0d;
									
									//判断I.I尺寸对应的标准限值
									if (parseDouble2 < 190) {
										pd = 1.4;
									}else if (parseDouble2 >= 190 && parseDouble2 < 270) {
										pd = 1.2;
									}else if (parseDouble2 >= 270 && parseDouble2 < 330) {
										pd = 1;
									}else{
										pd = 0.8;
									}
									
									//取出第一条单独插入
									if (k == 1) {
										dataMap.put("v44",item1+pieces);//I.I尺寸
										dataMap.put("v45",item4);//检测结果
										dataMap.put("v46","≥"+pd);//标准限值
										//判断一个不满足就不符合
										if (parseDouble1 < pd) {
											pass1 = 1;
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item1+pieces);
										pointData.setV2(item4);
										pointData.setV3("≥"+pd);
										pointDatas1.add(pointData);
										
										//判断一个不满足就不符合
										if (parseDouble1 < pd) {
											pass1 = 1;
										}
									}
								}else{
									//取出第一条单独插入
									if (k == 1) {
										dataMap.put("v44",item1+pieces);//I.I尺寸
										dataMap.put("v45",item4);//检测结果
										dataMap.put("v46","≥0.6");//标准限值
										//判断一个不满足就不符合
										if (parseDouble1 < 0.6) {
											pass1 = 1;
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item1+pieces);
										pointData.setV2(item4);
										pointData.setV3("≥0.6");//标准限值
										pointDatas1.add(pointData);
										
										//判断一个不满足就不符合
										if (parseDouble1 < 0.6) {
											pass1 = 1;
										}
									}
								}
							}else{
								dataMap.put("v43","—");
								dataMap.put("v44","—");
								dataMap.put("v45","—");
								dataMap.put("v46","—");
								dataMap.put("v47","—");
							}
						}else{
							//判断如果有数据就不用填-值
							if (k == 1) {
								dataMap.put("v43","—");
								dataMap.put("v44","—");
								dataMap.put("v45","—");
								dataMap.put("v46","—");
								dataMap.put("v47","—");
							}
						}
					}
					
					if (pass1 == 1) {
						dataMap.put("v47","不符合");//结论
						pass = 1;
						isNo[i] = "空间分辨力";
					}else{
						dataMap.put("v47","符合");//结论
					}
					
					//4是低对比分辨力
				}else if (type == 4) {
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("kV="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("mA="+item4);
					String item6 = (String) morphDynaBean.get("item6");
					logger.info("%="+item6);
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("mm="+item7);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					double parseDouble2 = 0d;
					if (NumberUtils.isNumber(item6)) {
						parseDouble1 = Double.parseDouble(item6);
					}
					if (NumberUtils.isNumber(item7)) {
						parseDouble2 = Double.parseDouble(item7);
					}
					
					dataMap.put("v51","5");//编号
					dataMap.put("v52","低对比分辨力");//检测项目
					dataMap.put("v53",item3+"kV，"+item4+"mA ");//检测条件
					dataMap.put("v54",item6+"%，"+item7+"mm");//检测结果
					//判断验收还是状态
					if (monitorType.equals("验收检测")) {
						dataMap.put("v55","2%，≤7mm");//标准限值
						//判断是否符合
						if (parseDouble1 == 2 && parseDouble2 <= 7) {
							dataMap.put("v56","符合");//结论
						}else{
							dataMap.put("v56","不符合");//结论
							pass = 1;
							isNo[i] = "低对比分辨力";
						}
					}else{
						dataMap.put("v55","4%，≤7mm");//标准限值
						//判断是否符合
						if (parseDouble1 == 4 && parseDouble2 <= 7) {
							dataMap.put("v56","符合");//结论
						}else{
							dataMap.put("v56","不符合");//结论
							pass = 1;
							isNo[i] = "低对比分辨力";
						}
					}
					
					//5是影像接收器入射屏前空气比释动能率
				}else if (type == 5) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("I.I尺寸="+item1);
					String item10 = (String) morphDynaBean.get("item10");
					logger.info("平均值="+item10);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					double parseDouble2 = 0d;
					if (NumberUtils.isNumber(item1)) {
						parseDouble1 = Double.parseDouble(item1);
					}
					if (NumberUtils.isNumber(item10)) {
						parseDouble2 = Double.parseDouble(item10);
					}
					
					dataMap.put("v61","6");//编号
					dataMap.put("v62","影像接收器入射屏前空气比释动能率/（μGy/min）");//检测项目
					if (project ==1) {
						//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
						if (task.getItem2().equals("直接透视")) {
							dataMap.put("v63","—");//检测条件
							dataMap.put("v64","不满足标准检测条件");//检测结果
							dataMap.put("v65","—");//标准限值
							dataMap.put("v66","—");//结论
						}else{
							dataMap.put("v63","影像增强器入射屏 直径");//检测条件
							dataMap.put("v64",item1+"mm");//检测条件
							dataMap.put("v65",item10);//检测结果
							
							double pd = 0d;
							if (task.getImageIntensifier().equals("平板探测器")) {
								//判断I.I尺寸对应的标准限值
								if (parseDouble1 < 225) {
									pd = 134;
								}else if (parseDouble1 >= 225 && parseDouble1 < 275) {
									pd = 60;
								}else if (parseDouble1 >= 275 && parseDouble1 < 400) {
									pd = 48;
								}else{
									pd = 30;
								}
							}else if (task.getImageIntensifier().equals("影像增强器")) {
								//判断I.I尺寸对应的标准限值
								if (parseDouble1 < 190) {
									pd = 134;
								}else if (parseDouble1 >= 190 && parseDouble1 < 270) {
									pd = 60;
								}else if (parseDouble1 >= 270 && parseDouble1 < 350) {
									pd = 48;
								}else{
									pd = 30;
								}
							}
							dataMap.put("v66","≤"+pd);//标准限值
							//判断是否符合
							if (parseDouble2 <= pd) {
								dataMap.put("v67","符合");//结论
							}else{
								dataMap.put("v67","不符合");//结论
								pass = 1;
								isNo[i] = "影像接收器入射屏前空气比释动能率";
							}
						}
					}else{
						//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
						if (task.getItem2().equals("直接透视")) {
							dataMap.put("v63","—");//检测条件
							dataMap.put("v64",reason);//检测结果
							dataMap.put("v65","—");//标准限值
							dataMap.put("v66","—");//结论
						}else{
							dataMap.put("v63","—");//检测条件
							dataMap.put("v64","—");//检测条件
							dataMap.put("v65",reason);//检测结果
							dataMap.put("v66","—");//标准限值
							dataMap.put("v67","—");//结论
						}
					}
					
					
					
					//6是自动亮度控制
				}else if (type == 6) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					
					dataMap.put("v71","7");//编号
					dataMap.put("v72","自动亮度控制");//检测项目
					
					if (project == 1) {
						double value = 0d;
						
						if (task.getBrightnessControl().equals("无")) {
							dataMap.put("v73","—");//检测条件
							dataMap.put("v74","不满足标准检测条件");//检测结果
							dataMap.put("v75","—");//
							dataMap.put("v76","—");//
						}else{
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							a = JSONObject.fromObject(objects1[objects1.length-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							for (int l = 2; l <= 7; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("变化率="+item);
								
								//判断是不是数字
								double parseDouble1 = 0d;
								if (NumberUtils.isNumber(item)) {
									parseDouble1 = Double.parseDouble(item);
								}
								//取最大一个赋值给value
								if (Math.abs(value) < Math.abs(parseDouble1)) {
									value = parseDouble1;
								}
							}
							
							dataMap.put("v73","不同厚度衰减层时亮度变化");//检测条件
							dataMap.put("v74",value+"%");//检测结果
							//判断验收还是状态
							if (monitorType.equals("验收检测")) {
								dataMap.put("v75","平均值±10%");//标准限值
								//判断是否符合
								if (Math.abs(value) <= 10) {
									dataMap.put("v76","符合");//结论
								}else{
									dataMap.put("v76","不符合");//结论
									pass = 1;
									isNo[i] = "自动亮度控制";
								}
							}else{
								dataMap.put("v75","平均值±15%");//标准限值
								//判断是否符合
								if (Math.abs(value) <= 15) {
									dataMap.put("v76","符合");//结论
								}else{
									dataMap.put("v76","不符合");//结论
									pass = 1;
									isNo[i] = "自动亮度控制";
								}
							}
						}
					}else{
						dataMap.put("v73","—");//检测条件
						dataMap.put("v74",reason);//检测结果
						dataMap.put("v75","—");//
						dataMap.put("v76","—");//
					}
					
					
					
					//7是照射野与影像接收器中心偏差
				}else if (type == 7) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("SID="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("照射野中心到影像接收器中心距离="+item2);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble2 = 0d;
					if (NumberUtils.isNumber(item2)) {
						parseDouble2 = Double.parseDouble(item2);
					}
					
					dataMap.put("v81","8");//编号
					dataMap.put("v82","照射野与影像接收器中心偏离");//检测项目
					
					if (project ==1) {
						//判断验收还是状态
						if (monitorType.equals("验收检测")) {
							//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
							if (task.getItem2().equals("直接透视")) {
								dataMap.put("v83","—");//检测条件
								dataMap.put("v84","不满足标准检测条件");//检测结果
								dataMap.put("v85","—");//标准限值
								dataMap.put("v86","—");//结论
							}else{
								dataMap.put("v83","SID："+item1+"cm");//检测条件
								dataMap.put("v84",item2+"cm");//检测结果
								dataMap.put("v85","≤2% SID");//标准限值
								//判断是否符合
								if (parseDouble2 <= 2) {
									dataMap.put("v86","符合");//结论
								}else{
									dataMap.put("v86","不符合");//结论
									pass = 1;
									isNo[i] = "照射野与影像接收器中心偏离";
								}
							}
						}else{
							dataMap.put("v83","—");//检测条件
							dataMap.put("v84","状态检测无此项");//检测结果
							dataMap.put("v85","—");//标准限值
							dataMap.put("v86","—");//结论
						}
					}else{
						dataMap.put("v83","—");//检测条件
						dataMap.put("v84",reason);//检测结果
						dataMap.put("v85","—");//标准限值
						dataMap.put("v86","—");//结论
						
					}
					
					//8是最大照射野与普通荧光屏尺寸相同时的台屏距
				}else if (type == 8) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("床面板到屏面板的距离="+item1);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item1)) {
						parseDouble1 = Double.parseDouble(item1);
					}
					
					dataMap.put("v91","9");//编号
					dataMap.put("v92","最大照射野与普通荧光屏尺寸相同时的台屏距/mm");//检测项目
					
					if (project == 1) {
						dataMap.put("v93","透视荧光屏");//检测条件
						//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
						if (task.getItem2().equals("直接透视")) {
							//判断验收还是状态
							if (monitorType.equals("验收检测")) {
								dataMap.put("v94",item1);//检测结果
								dataMap.put("v95","≥250");//标准限值
								//判断是否符合
								if (parseDouble1 >= 250) {
									dataMap.put("v96","符合");//结论
								}else{
									dataMap.put("v96","不符合");//结论
									pass = 1;
									isNo[i] = "最大照射野与普通荧光屏尺寸相同时的台屏距";
								}
							}else{
								dataMap.put("v93","—");//检测条件
								dataMap.put("v94","状态检测无此项");//检测结果
								dataMap.put("v95","—");//标准限值
								dataMap.put("v96","—");//结论
							}
						}else{
							dataMap.put("v93","—");//检测条件
							dataMap.put("v94","不满足标准检测条件");//检测结果
							dataMap.put("v95","—");//标准限值
							dataMap.put("v96","—");//结论
						}
					}else{
						dataMap.put("v93","—");//检测条件
						dataMap.put("v94",reason);//检测结果
						dataMap.put("v95","—");//标准限值
						dataMap.put("v96","—");//结论
					}
				}
			}
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int as = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (as != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					as ++;
				}
			}
		    
			//判断结论是否符合
			if (pass == 0) {
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，所检项目的检测结果均符合标准要求。");
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，"+isNoName+"的检测结果不符合标准要求，其余所检项目的检测结果符合标准要求。");
			}
		    dataMap.put("pointDatas1",pointDatas1);
		    dataMap.put("notes",notes);//备注
		    
		    //模拟数据测试
		    dataMap.put("v1","");
		    dataMap.put("v2","");
		    dataMap.put("v3","");
		    dataMap.put("v4","");
		    dataMap.put("v5","");
		    dataMap.put("standard","");
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			String ftl = "/fs_ts_xn-yxjs.ftl";
			//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
			if (task.getItem2().equals("直接透视")) {
				ftl = "/fs_ts_xn-ygp.ftl";
			}else{
				ftl = "/fs_ts_xn-yxjs.ftl";
			}

			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
		    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 生成透视性能报告
	 * @return
	 */
	@SuppressWarnings({ "static-access", "deprecation" })
	public String report_fs_ts_xn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ts_xn_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
		    String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    String[] isNo = new String[20];//不合格的项目
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat yMd_sdf=new SimpleDateFormat("yyyy-MM-dd");//年月日
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
							"task.createtime LIKE '%"+yMd+"%' AND " +
							"deviceType.deviceMain='1'";
			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject","详见表6");//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("conditions","");//检测条件
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    dataMap.put("purpose",task.getItem2());//设备用途
		    
		    String monitorType = task.getMonitorType();//检测类别
		    String standard1 = task.getStandard();
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    //仪器
		    ROMS_SZ_DEVICE device = null;
		    ROMS_SZ_DEVICEDATA correctNum = new ROMS_SZ_DEVICEDATA();
			ArrayList<ROMS_SZ_DEVICEDATA> correctNums = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
				}
			}
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
//			    dataMap.put("correctNum","");//检定证书编号
			    
			    correctNum.setCorrectNum("");
		    	correctNums.add(correctNum);
			}else{
				//名称/型号/编号
	    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
			    dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
//			    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
			   
			    correctNum.setCorrectNum(device.getCorrectNum()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime())));
		    	correctNums.add(correctNum);
		    	
		    	correctNum = new ROMS_SZ_DEVICEDATA();
		    	correctNum.setCorrectNum(device.getCorrectNum1()+"/"+yMd_sdf.format(yMd_sdf.parse(device.getCorrectTime1())));
		    	correctNums.add(correctNum);
			}
		    dataMap.put("correctNums",correctNums);//检定证书编号
		    
		    ROMS_SZ_POINTDATA pointData = null;
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是透视受检者入射体表空气比释动能率典型值，1是透视受检者入射体表空气比释动能率最大值，2是透视荧光屏的灵敏度" +
						"3是空间分辨力，4是低对比分辨力，5是影像接收器入射屏前空气比释动能率，6是自动亮度控制，" +
						"7是照射野与影像接收器中心偏差，8是最大照射野与普通荧光屏尺寸相同时的台屏距="+type);
				
				//0是透视受检者入射体表空气比释动能率典型值
				if (type == 0) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("kV="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("mA="+item4);
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("校准平均值="+item9);
					int item10 = Integer.parseInt((String) morphDynaBean.get("item10"));
					logger.info("透视荧光屏="+item10);
					int item11 = Integer.parseInt((String) morphDynaBean.get("item11"));
					logger.info("非透视荧光屏="+item11);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item9)) {
						parseDouble1 = Double.parseDouble(item9);
					}
					
					dataMap.put("v11","1");//编号
					dataMap.put("v12","透视受检者入射体表空气比释动能率典型值/(mGy/min)");//检测项目
					
					//检测项目是否打钩
					if (project == 1) {
						dataMap.put("v13",item3+"kV，"+item4+"mA ");//检测条件
						dataMap.put("v14",item9);//检测结果
						if (item10 == 1) {
							dataMap.put("v15","≤50");//标准限值
							//判断是否符合
							if (parseDouble1 <= 50) {
								dataMap.put("v16","符合");//结论
							}else{
								dataMap.put("v16","不符合");//结论
								pass = 1;
								isNo[i] = "透视受检者入射体表空气比释动能率典型值";
							}
						}else if (item11 == 1) {
							dataMap.put("v15","≤25");//标准限值
							//判断是否符合
							if (parseDouble1 <= 25) {
								dataMap.put("v16","符合");//结论
							}else{
								dataMap.put("v16","不符合");//结论
								pass = 1;
								isNo[i] = "透视受检者入射体表空气比释动能率典型值";
							}
						}else{
							dataMap.put("v15","—");//标准限值
							dataMap.put("v16","—");//结论
						}
					}else{
						dataMap.put("v13","—");//检测条件
						dataMap.put("v14",reason);//检测结果
						dataMap.put("v15","—");//标准限值
						dataMap.put("v16","—");//结论
					}
					
					
					//1是透视受检者入射体表空气比释动能率最大值
				}else if (type == 1) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason="";
					if (a.containsKey("reason")) {
						 reason = (String) morphDynaBean.get("reason");
					}
					
					logger.info("未检测原因="+reason);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("kV="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("mA="+item4);
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("校准平均值="+item9);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item9)) {
						parseDouble1 = Double.parseDouble(item9);
					}
					
					dataMap.put("v21","2");//编号
					dataMap.put("v22","透视受检者入射体表空气比释动能率最大值/(mGy/min)");//检测项目
					if (project == 1) {
						//判断验收还是状态
						if (monitorType.equals("验收检测")) {
							dataMap.put("v23",item3+"kV，"+item4+"mA ");//检测条件
							dataMap.put("v24",item9);//检测结果
							dataMap.put("v25","≤100");//标准限值
							//判断是否符合
							if (parseDouble1 <= 100) {
								dataMap.put("v26","符合");//结论
							}else{
								dataMap.put("v26","不符合");//结论
								pass = 1;
								isNo[i] = "透视受检者入射体表空气比释动能率最大值";
							}
						}else{
							dataMap.put("v23","—");//检测条件
							dataMap.put("v24","状态检测无此项");//检测结果
							dataMap.put("v25","—");//标准限值
							dataMap.put("v26","—");//结论
						}
					}else{
						dataMap.put("v23","—");//检测条件
						dataMap.put("v24",reason);//检测结果
						dataMap.put("v25","—");//标准限值
						dataMap.put("v26","—");//结论
					}
					
					
					//2是透视荧光屏的灵敏度
				}else if (type == 2) {
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("结果="+item5);
					int project = (Integer) morphDynaBean.get("project");
					String reason="";
					if (a.containsKey("reason")) {
						 reason = (String) morphDynaBean.get("reason");
					}
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item5)) {
						parseDouble1 = Double.parseDouble(item5);
					}
					
					dataMap.put("v31","3");//编号
					dataMap.put("v32","透视荧光屏的灵敏度");//检测项目
					
					if (project == 1) {
						dataMap.put("v33","透视荧光屏");//检测条件
						//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
						if (task.getItem2().equals("直接透视")) {
							dataMap.put("v34",item5);//检测结果
							//判断验收还是状态
							if (monitorType.equals("验收检测")) {
								dataMap.put("v35","≥0.11");//标准限值
								//判断是否符合
								if (parseDouble1 >= 0.11) {
									dataMap.put("v36","符合");//结论
								}else{
									dataMap.put("v36","不符合");//结论
									pass = 1;
									isNo[i] = "透视荧光屏的灵敏度";
								}
							}else{
								dataMap.put("v35","≥0.08");//标准限值
								//判断是否符合
								if (parseDouble1 >= 0.08) {
									dataMap.put("v36","符合");//结论
								}else{
									dataMap.put("v36","不符合");//结论
									pass = 1;
									isNo[i] = "透视荧光屏的灵敏度";
								}
							}
						}else{
							dataMap.put("v34","不满足标准检测条件");//检测结果
							dataMap.put("v35","—");//标准限值
							dataMap.put("v36","—");//结论
						}
					}else{
						dataMap.put("v33","—");//检测条件
						dataMap.put("v34",reason);//检测结果
						dataMap.put("v35","—");//标准限值
						dataMap.put("v36","—");//结论
					}
					
					
					//3是空间分辨力
				}else if (type == 3) {
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					
					int pass1 = 0;
					
					dataMap.put("v41","4");//编号
					dataMap.put("v42","空间分辨力");//检测项目
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean11.get("item1");
						logger.info("I.I尺寸="+item1);
						String item4 = (String) morphDynaBean11.get("item4");
						logger.info("检测值="+item4);
						
						//不等于空才进去，排除没有数据的记录
						if (!item4.equals("") && !item4.equals("/")) {
							double parseDouble1 = 0d;
							double parseDouble2 = 0d;
							
							//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
							if (task.getItem2().equals("直接透视")) {
								dataMap.put("v43","透视荧光屏");//检测条件
								//透视荧光屏只显示第一条数据
								if (k == 1) {
									//判断是不是数字
									if (NumberUtils.isNumber(item4)) {
										parseDouble1 = Double.parseDouble(item4);
									}
									
									dataMap.put("v44",item4);//检测结果
								}
								/*else{
									dataMap.put("v44","—");//检测结果
								}*/
								
								//判断验收还是状态
								if (monitorType.equals("验收检测")) {
									dataMap.put("v45","≥0.8");//标准限值
									//判断是否符合
									if (parseDouble1 >= 0.8) {
										dataMap.put("v46","符合");//结论
									}else{
										dataMap.put("v46","不符合");//结论
										pass = 1;
										isNo[i] = "空间分辨力";
									}
								}else{
									dataMap.put("v45","≥0.6");//标准限值
									//判断是否符合
									if (parseDouble1 >= 0.6) {
										dataMap.put("v46","符合");//结论
									}else{
										dataMap.put("v46","不符合");//结论
										pass = 1;
										isNo[i] = "空间分辨力";
									}
								}
							}else if (task.getItem2().equals("间接透视")) {
								dataMap.put("v43","影像增强器入射屏 直径");//检测条件
								
								//判断是不是数字
								if (NumberUtils.isNumber(item4)) {
									parseDouble1 = Double.parseDouble(item4);
								}
								if (NumberUtils.isNumber(item1)) {
									parseDouble2 = Double.parseDouble(item1);
								}
								
								//判断验收还是状态
								if (monitorType.equals("验收检测")) {
									double pd = 0d;
									
									//判断I.I尺寸对应的标准限值
									if (parseDouble2 < 190) {
										pd = 1.4;
									}else if (parseDouble2 >= 190 && parseDouble2 < 270) {
										pd = 1.2;
									}else if (parseDouble2 >= 270 && parseDouble2 < 330) {
										pd = 1;
									}else{
										pd = 0.8;
									}
									
									//取出第一条单独插入
									if (k == 1) {
										dataMap.put("v44",item1+pieces);//I.I尺寸
										dataMap.put("v45",item4);//检测结果
										dataMap.put("v46","≥"+pd);//标准限值
										//判断一个不满足就不符合
										if (parseDouble1 < pd) {
											pass1 = 1;
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item1+pieces);
										pointData.setV2(item4);
										pointData.setV3("≥"+pd);
										pointDatas1.add(pointData);
										
										//判断一个不满足就不符合
										if (parseDouble1 < pd) {
											pass1 = 1;
										}
									}
								}else{
									//取出第一条单独插入
									if (k == 1) {
										dataMap.put("v44",item1+pieces);//I.I尺寸
										dataMap.put("v45",item4);//检测结果
										dataMap.put("v46","≥0.6");//标准限值
										//判断一个不满足就不符合
										if (parseDouble1 < 0.6) {
											pass1 = 1;
										}
									}else{
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item1+pieces);
										pointData.setV2(item4);
										pointData.setV3("≥0.6");//标准限值
										pointDatas1.add(pointData);
										
										//判断一个不满足就不符合
										if (parseDouble1 < 0.6) {
											pass1 = 1;
										}
									}
								}
							}else{
								dataMap.put("v43","—");
								dataMap.put("v44","—");
								dataMap.put("v45","—");
								dataMap.put("v46","—");
								dataMap.put("v47","—");
							}
						}else{
							//判断如果有数据就不用填-值
							if (k == 1) {
								dataMap.put("v43","—");
								dataMap.put("v44","—");
								dataMap.put("v45","—");
								dataMap.put("v46","—");
								dataMap.put("v47","—");
							}
						}
					}
					
					if (pass1 == 1) {
						dataMap.put("v47","不符合");//结论
						pass = 1;
						isNo[i] = "空间分辨力";
					}else{
						dataMap.put("v47","符合");//结论
					}
					
					//4是低对比分辨力
				}else if (type == 4) {
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("kV="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("mA="+item4);
					String item6 = (String) morphDynaBean.get("item6");
					logger.info("%="+item6);
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("mm="+item7);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					double parseDouble2 = 0d;
					if (NumberUtils.isNumber(item6)) {
						parseDouble1 = Double.parseDouble(item6);
					}
					if (NumberUtils.isNumber(item7)) {
						parseDouble2 = Double.parseDouble(item7);
					}
					
					dataMap.put("v51","5");//编号
					dataMap.put("v52","低对比分辨力");//检测项目
					dataMap.put("v53",item3+"kV，"+item4+"mA ");//检测条件
					dataMap.put("v54",item6+"%，"+item7+"mm");//检测结果
					//判断验收还是状态
					if (monitorType.equals("验收检测")) {
						dataMap.put("v55","2%，≤7mm");//标准限值
						//判断是否符合
						if (parseDouble1 == 2 && parseDouble2 <= 7) {
							dataMap.put("v56","符合");//结论
						}else{
							dataMap.put("v56","不符合");//结论
							pass = 1;
							isNo[i] = "低对比分辨力";
						}
					}else{
						dataMap.put("v55","4%，≤7mm");//标准限值
						//判断是否符合
						if (parseDouble1 == 4 && parseDouble2 <= 7) {
							dataMap.put("v56","符合");//结论
						}else{
							dataMap.put("v56","不符合");//结论
							pass = 1;
							isNo[i] = "低对比分辨力";
						}
					}
					
					//5是影像接收器入射屏前空气比释动能率
				}else if (type == 5) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("I.I尺寸="+item1);
					String item10 = (String) morphDynaBean.get("item10");
					logger.info("平均值="+item10);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason="";
					if (a.containsKey("reason")) {
						 reason = (String) morphDynaBean.get("reason");
					}
					
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					double parseDouble2 = 0d;
					if (NumberUtils.isNumber(item1)) {
						parseDouble1 = Double.parseDouble(item1);
					}
					if (NumberUtils.isNumber(item10)) {
						parseDouble2 = Double.parseDouble(item10);
					}
					
					dataMap.put("v61","6");//编号
					dataMap.put("v62","影像接收器入射屏前空气比释动能率/（μGy/min）");//检测项目
					if (project ==1) {
						//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
						if (task.getItem2().equals("直接透视")) {
							dataMap.put("v63","—");//检测条件
							dataMap.put("v64","不满足标准检测条件");//检测结果
							dataMap.put("v65","—");//标准限值
							dataMap.put("v66","—");//结论
						}else{
							dataMap.put("v63","影像增强器入射屏 直径");//检测条件
							dataMap.put("v64",item1+"mm");//检测条件
							dataMap.put("v65",item10);//检测结果
							
							double pd = 0d;
							if (task.getImageIntensifier().equals("平板探测器")) {
								//判断I.I尺寸对应的标准限值
								if (parseDouble1 < 225) {
									pd = 134;
								}else if (parseDouble1 >= 225 && parseDouble1 < 275) {
									pd = 60;
								}else if (parseDouble1 >= 275 && parseDouble1 < 400) {
									pd = 48;
								}else{
									pd = 30;
								}
							}else if (task.getImageIntensifier().equals("影像增强器")) {
								//判断I.I尺寸对应的标准限值
								if (parseDouble1 < 190) {
									pd = 134;
								}else if (parseDouble1 >= 190 && parseDouble1 < 270) {
									pd = 60;
								}else if (parseDouble1 >= 270 && parseDouble1 < 350) {
									pd = 48;
								}else{
									pd = 30;
								}
							}
							dataMap.put("v66","≤"+pd);//标准限值
							//判断是否符合
							if (parseDouble2 <= pd) {
								dataMap.put("v67","符合");//结论
							}else{
								dataMap.put("v67","不符合");//结论
								pass = 1;
								isNo[i] = "影像接收器入射屏前空气比释动能率";
							}
						}
					}else{
						//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
						if (task.getItem2().equals("直接透视")) {
							dataMap.put("v63","—");//检测条件
							dataMap.put("v64",reason);//检测结果
							dataMap.put("v65","—");//标准限值
							dataMap.put("v66","—");//结论
						}else{
							dataMap.put("v63","—");//检测条件
							dataMap.put("v64","—");//检测条件
							dataMap.put("v65",reason);//检测结果
							dataMap.put("v66","—");//标准限值
							dataMap.put("v67","—");//结论
						}
					}
					
					
					
					//6是自动亮度控制
				}else if (type == 6) {
					int project = (Integer) morphDynaBean.get("project");
					String reason="";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					logger.info("未检测原因="+reason);
					
					dataMap.put("v71","7");//编号
					dataMap.put("v72","自动亮度控制");//检测项目
					
					if (project == 1) {
						double value = 0d;
						
						if (task.getBrightnessControl().equals("无")) {
							dataMap.put("v73","—");//检测条件
							dataMap.put("v74","不满足标准检测条件");//检测结果
							dataMap.put("v75","—");//
							dataMap.put("v76","—");//
						}else{
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							a = JSONObject.fromObject(objects1[objects1.length-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							for (int l = 2; l <= 7; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("变化率="+item);
								
								//判断是不是数字
								double parseDouble1 = 0d;
								if (NumberUtils.isNumber(item)) {
									parseDouble1 = Double.parseDouble(item);
								}
								//取最大一个赋值给value
								if (Math.abs(value) < Math.abs(parseDouble1)) {
									value = parseDouble1;
								}
							}
							
							dataMap.put("v73","不同厚度衰减层时亮度变化");//检测条件
							dataMap.put("v74",value+"%");//检测结果
							//判断验收还是状态
							if (monitorType.equals("验收检测")) {
								dataMap.put("v75","平均值¡À10%");//标准限值
								//判断是否符合
								if (Math.abs(value) <= 10) {
									dataMap.put("v76","符合");//结论
								}else{
									dataMap.put("v76","不符合");//结论
									pass = 1;
									isNo[i] = "自动亮度控制";
								}
							}else{
								dataMap.put("v75","平均值¡À15%");//标准限值
								//判断是否符合
								if (Math.abs(value) <= 15) {
									dataMap.put("v76","符合");//结论
								}else{
									dataMap.put("v76","不符合");//结论
									pass = 1;
									isNo[i] = "自动亮度控制";
								}
							}
						}
					}else{
						dataMap.put("v73","—");//检测条件
						dataMap.put("v74",reason);//检测结果
						dataMap.put("v75","—");//
						dataMap.put("v76","—");//
					}
					
					
					
					//7是照射野与影像接收器中心偏差
				}else if (type == 7) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("SID="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("照射野中心到影像接收器中心距离="+item2);
					int project = (Integer) morphDynaBean.get("project");
					String reason="";
					if (a.containsKey("reason")) {
						 reason = (String) morphDynaBean.get("reason");
					}
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble2 = 0d;
					if (NumberUtils.isNumber(item2)) {
						parseDouble2 = Double.parseDouble(item2);
					}
					
					dataMap.put("v81","8");//编号
					dataMap.put("v82","照射野与影像接收器中心偏离");//检测项目
					
					if (project ==1) {
						//判断验收还是状态
						if (monitorType.equals("验收检测")) {
							//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
							if (task.getItem2().equals("直接透视")) {
								dataMap.put("v83","—");//检测条件
								dataMap.put("v84","不满足标准检测条件");//检测结果
								dataMap.put("v85","—");//标准限值
								dataMap.put("v86","—");//结论
							}else{
								dataMap.put("v83","SID："+item1+"cm");//检测条件
								dataMap.put("v84",item2+"cm");//检测结果
								dataMap.put("v85","≤2% SID");//标准限值
								//判断是否符合
								if (parseDouble2 <= 2) {
									dataMap.put("v86","符合");//结论
								}else{
									dataMap.put("v86","不符合");//结论
									pass = 1;
									isNo[i] = "照射野与影像接收器中心偏离";
								}
							}
						}else{
							dataMap.put("v83","—");//检测条件
							dataMap.put("v84","状态检测无此项");//检测结果
							dataMap.put("v85","—");//标准限值
							dataMap.put("v86","—");//结论
						}
					}else{
						dataMap.put("v83","—");//检测条件
						dataMap.put("v84",reason);//检测结果
						dataMap.put("v85","—");//标准限值
						dataMap.put("v86","—");//结论
						
					}
					
					//8是最大照射野与普通荧光屏尺寸相同时的台屏距
				}else if (type == 8) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("床面板到屏面板的距离="+item1);
					int project = (Integer) morphDynaBean.get("project");
					String reason="";
					if (a.containsKey("reason")) {
						 reason = (String) morphDynaBean.get("reason");
					}
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item1)) {
						parseDouble1 = Double.parseDouble(item1);
					}
					
					dataMap.put("v91","9");//编号
					dataMap.put("v92","最大照射野与普通荧光屏尺寸相同时的台屏距/mm");//检测项目
					
					if (project == 1) {
						dataMap.put("v93","透视荧光屏");//检测条件
						//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
						if (task.getItem2().equals("直接透视")) {
							//判断验收还是状态
							if (monitorType.equals("验收检测")) {
								dataMap.put("v94",item1);//检测结果
								dataMap.put("v95","≥250");//标准限值
								//判断是否符合
								if (parseDouble1 >= 250) {
									dataMap.put("v96","符合");//结论
								}else{
									dataMap.put("v96","不符合");//结论
									pass = 1;
									isNo[i] = "最大照射野与普通荧光屏尺寸相同时的台屏距";
								}
							}else{
								dataMap.put("v93","—");//检测条件
								dataMap.put("v94","状态检测无此项");//检测结果
								dataMap.put("v95","—");//标准限值
								dataMap.put("v96","—");//结论
							}
						}else{
							dataMap.put("v93","—");//检测条件
							dataMap.put("v94","不满足标准检测条件");//检测结果
							dataMap.put("v95","—");//标准限值
							dataMap.put("v96","—");//结论
						}
					}else{
						dataMap.put("v93","—");//检测条件
						dataMap.put("v94",reason);//检测结果
						dataMap.put("v95","—");//标准限值
						dataMap.put("v96","—");//结论
					}
				}
			}
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int as = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (as != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					as ++;
				}
			}
		    
			//判断结论是否符合
			if (pass == 0) {
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，所检项目的检测结果均符合标准要求。");
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，"+isNoName+"的检测结果不符合标准要求，其余所检项目的检测结果符合标准要求。");
			}
		    dataMap.put("pointDatas1",pointDatas1);
		    dataMap.put("notes",notes);//备注
		    
		    //模拟数据测试
		    dataMap.put("v1","");
		    dataMap.put("v2","");
		    dataMap.put("v3","");
		    dataMap.put("v4","");
		    dataMap.put("v5","");
		    dataMap.put("standard","");
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			String ftl = "/fs_ts_xn-yxjs.ftl";
			//判断直接透视（透视荧光屏设备）还是间接透视（影像接收器透视）
			if (task.getItem2().equals("直接透视")) {
				ftl = "/fs_ts_xn-ygp.ftl";
			}else{
				ftl = "/fs_ts_xn-yxjs.ftl";
			}

			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
		    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 透视性能报告封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_ts_xn_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_ts_xn_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","质量控制检测");//项目名称
		    dataMap.put("checkUnitName",task.getCheckUnitName());//委托单位
		    dataMap.put("monitorType","委托检测");//检测类别
		    dataMap.put("place",task.getPlace());//受检场所名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//场所内设备名称
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_ts_xn_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 生成乳腺屏片性能报告
	 * @return
	 */
	@SuppressWarnings({ "static-access", "deprecation" })
	public String report_fs_rxpp_xn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_rxpp_xn_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
		    String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    String[] isNo = new String[20];//不合格的项目
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
							"task.createtime LIKE '%"+yMd+"%' AND " +
							"deviceType.deviceMain='1'";
			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject","详见表4");//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    dataMap.put("purpose","乳腺DR");//设备用途
		    
		    String monitorType = task.getMonitorType();//检测类别
		    String timeDeixis = task.getTimeDeixis();//有无时间指示
		    String standard1 = task.getStandard();
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    //仪器
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
		    		//名称/型号/编号
		    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
//		    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceNum());//主要检测仪器
		    		dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
				    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
				}
			}
		    //没有仪器的时候补空值
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
			    dataMap.put("correctNum","");//检定证书编号
			}
		    
		    ROMS_SZ_POINTDATA pointData = null;
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是标准照片密度,1是 胸壁侧射野的准直，2是胸壁侧射野与台边准直，3是光野与照射野的一致性" +
						"4是自动曝光控制，5是管电压指示的偏离，6是特定辐射输出量输出量重复性，7是乳腺平均剂量，" +
						"8是高对比分辨率，9是半值层（HVL）/mmAl，10是曝光时间指示的偏离="+type);
				
				//0是标准照片密度
				if (type == 0) {
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("4cm厚模体的胶片光密度值="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("与基线值差值="+item3);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item3)) {
						parseDouble1 = Double.parseDouble(item3);
					}
					
					dataMap.put("v11","1");//编号
					dataMap.put("v12","标准照片密度");//检测项目
					
					if (project == 1) {
						dataMap.put("v13","4cm厚的模体");//检测条件
						//判断是验收还是状态检测
						if (monitorType.equals("验收检测")) {
							dataMap.put("v14",item2+"OD");//检测结果
							dataMap.put("v15","1.4OD~1.8OD，建立基线值");//标准限值
							//判断是否符合
							if (parseDouble1 < 1.8 && parseDouble1 > 1.4) {
								dataMap.put("v16","符合");//结论
							}else{
								dataMap.put("v16","不符合");//结论
								pass = 1;
								isNo[i] = "标准照片密度";
							}
						}else{
							dataMap.put("v14",item2+"OD"+"与基线值差"+item3+"OD");//检测结果
							dataMap.put("v15","与基线值相比在±0.2OD内");//标准限值
							//判断是否符合
							if (Math.abs(parseDouble1 ) < 0.2) {
								dataMap.put("v16","符合");//结论
							}else{
								dataMap.put("v16","不符合");//结论
								pass = 1;
								isNo[i] = "标准照片密度";
							}
						}
					}else{
						dataMap.put("v13","—");//检测条件
						dataMap.put("v14",reason);//检测结果
						dataMap.put("v15","—");//标准限值
						dataMap.put("v16","—");//结论
					}
					
					
					//1是胸壁侧射野的准直
				}else if (type == 1) {
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("全部覆盖="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("部分未覆盖="+item2);
					
					dataMap.put("v21","2");//编号
					dataMap.put("v22","胸壁侧射野的准直");//检测项目
					dataMap.put("v23","胶片");//检测条件
					dataMap.put("v25","射野全部覆盖胶片");//标准限值
					if (item1 == 1) {
						dataMap.put("v24","射野全部覆盖胶片");//检测结果
						dataMap.put("v26","符合");//结论
					}else if (item2 == 1) {
						dataMap.put("v24","射野部分未覆盖胶片");//检测结果
						dataMap.put("v26","不符合");//结论
						pass = 1;
						isNo[i] = "胸壁侧射野的准直";
					}else{
						dataMap.put("v24","—");//检测结果
						dataMap.put("v26","—");//结论
					}
					
					//2是胸壁侧射野与台边准直
				}else if (type == 2) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("超出台边距离="+item1);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item1)) {
						parseDouble1 = Double.parseDouble(item1);
					}
					
					dataMap.put("v31","3");//编号
					dataMap.put("v32","胸壁侧射野与台边准直");//检测项目
					dataMap.put("v33","胸壁侧");//检测条件
					dataMap.put("v34","超出台边"+item1+"mm");//检测结果
					dataMap.put("v35","超出台边＜5mm");//标准限值
					
					//判断是否符合
					if (Math.abs(parseDouble1) < 5) {
						dataMap.put("v36","符合");//结论
					}else{
						dataMap.put("v36","不符合");//结论
						pass = 1;
						isNo[i] = "胸壁侧射野与台边准直";
					}
					
					//3是光野与照射野的一致性
				}else if (type == 3) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("a1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("a2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("b1="+item3);
					
					//判断是不是数字
					double value = 0d;
					double parseDouble1 = 0d;
					double parseDouble2 = 0d;
					double parseDouble3 = 0d;
					if (NumberUtils.isNumber(item1)) {
						parseDouble1 = Double.parseDouble(item1);
					}
					if (NumberUtils.isNumber(item2)) {
						parseDouble2 = Double.parseDouble(item2);
					}
					if (NumberUtils.isNumber(item3)) {
						parseDouble3 = Double.parseDouble(item3);
					}
					//获取最大值
					if (parseDouble1 > parseDouble2) {
						value = parseDouble1;
					}else{
						value = parseDouble2;
					}
					if (value < parseDouble3) {
						value = parseDouble3;
					}
					
					dataMap.put("v41","4");//编号
					dataMap.put("v42","光野/照射野的一致性");//检测项目
					dataMap.put("v43","胸壁侧外其他三边");//检测条件
					//判断是验收还是状态检测
					if (monitorType.equals("验收检测")) {
						dataMap.put("v44",value+"mm");//检测结果
						dataMap.put("v45","±8mm内");//标准限值
						
						//判断是否符合
						if (Math.abs(value) < 8) {
							dataMap.put("v46","符合");//结论
						}else{
							dataMap.put("v46","不符合");//结论
							pass = 1;
							isNo[i] = "光野与照射野的一致性";
						}
					}else{
						dataMap.put("v44","状态检测无此项");//检测结果
						dataMap.put("v45","—");//标准限值
						dataMap.put("v46","—");//结论
					}
					
					
					//4是自动曝光控制
				}else if (type == 4) {
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("与4cm厚模体光密度值差值1="+item7);
					String item8 = (String) morphDynaBean.get("item8");
					logger.info("与4cm厚模体光密度值差值2="+item8);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double value = 0d;
					double parseDouble1 = 0d;
					double parseDouble2 = 0d;
					if (NumberUtils.isNumber(item7)) {
						parseDouble1 = Double.parseDouble(item7);
					}
					if (NumberUtils.isNumber(item8)) {
						parseDouble2 = Double.parseDouble(item8);
					}
					
					//取最大值
					if (parseDouble2 < parseDouble1) {
						value = parseDouble1;
					}else{
						value = parseDouble2;
					}
					
					dataMap.put("v51","5");//编号
					dataMap.put("v52","自动曝光控制");//检测项目
					
					if (project == 1) {
						dataMap.put("v53","2cm、4cm、6cm厚的模体");//检测条件
						dataMap.put("v54",value+"OD");//检测结果
						dataMap.put("v55","与4cm的值相比在±0.2OD内");//标准限值
						
						//判断是否符合
						if (Math.abs(value) < 0.2) {
							dataMap.put("v56","符合");//结论
						}else{
							dataMap.put("v56","不符合");//结论
							pass = 1;
							isNo[i] = "自动曝光控制";
						}
					}else{
						dataMap.put("v53","—");//检测条件
						dataMap.put("v54",reason);//检测结果
						dataMap.put("v55","—");//标准限值
						dataMap.put("v56","—");//结论
					}
					
					//5是管电压指示的偏离
				}else if (type == 5) {
					//表示有几个焦点
					int jd = 0;
					
					dataMap.put("v61","6");
					dataMap.put("v62","管电压指示的偏离");
					dataMap.put("v63","±1.0kV内");
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item11 = (String) morphDynaBean1.get("item1");
						logger.info("v6"+j+"1="+item11);
						int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v6"+j+"2="+item22);
						
						dataMap.put("v6"+j+"1",item11);
						
						//判断是否勾选
						if (item22 == 1) {
							jd += 1;
							
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							for (int k = 1; k <= objects1.length; k++) {
								a = JSONObject.fromObject(objects1[k-1]);
								bean = JSONObject.toBean(a);
								MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
								String item1 = (String) morphDynaBean11.get("item1");
								logger.info("标称值 （kV）="+item1);
								String item6 = (String) morphDynaBean11.get("item6");
								logger.info("偏差（kV）="+item6);
								
								//判断是不是数字
								double parseDouble6 = 0d;
								if (NumberUtils.isNumber(item6)) {
									parseDouble6 = Double.parseDouble(item6);
								}
								
								//第一次循环的数据单独赋值
								if (k == 1) {
									//判断是不是有数据
									if (item6.equals("")) {
										dataMap.put("v6"+j+"2","");
										dataMap.put("v6"+j+"3","");
										dataMap.put("v6"+j+"4","");
									}else{
										dataMap.put("v6"+j+"2",item1+"kV");
										dataMap.put("v6"+j+"3",item6+"kV");
										if (Math.abs(parseDouble6) < 1) {
											dataMap.put("v6"+j+"4","符合");
										}else{
											dataMap.put("v6"+j+"4","不符合");
											pass = 1;
											isNo[i] = "管电压指示的偏离 ";
										}
									}
								}else{
									//判断是不是有数据
									if (!item6.equals("")) {
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item1+"kV");
										pointData.setV2(item6+"kV");
										if (Math.abs(parseDouble6) < 1) {
											pointData.setV3("符合");
										}else{
											pointData.setV3("不符合");
											pass = 1;
											isNo[i] = "管电压指示的偏离 ";
										}
										//判断不同的焦点往不同的list插数据（因为模板里面是不同的循环）
										if (item11.equals("大焦点")) {
											pointDatas1.add(pointData);
										}else{
											pointDatas2.add(pointData);
										}
									}
								}
							}
						}else{
							dataMap.put("v6"+j+"2","");
							dataMap.put("v6"+j+"3","");
							dataMap.put("v6"+j+"4","");
						}
					}
					dataMap.put("jd",jd);
					//判断如果是一个焦点的话
					if (jd < 2) {
						//判断如果小焦点有值，大焦点没值得情况，就把小焦点的值赋给大焦点
						if (pointDatas1.size() < pointDatas2.size()) {
							pointDatas1 = pointDatas2;
							dataMap.put("v611",dataMap.get("v621"));
							dataMap.put("v612",dataMap.get("v622"));
							dataMap.put("v613",dataMap.get("v623"));
							dataMap.put("v614",dataMap.get("v624"));
						}
					}
					
					//6是特定辐射输出量
					//输出量重复性
				}else if (type == 6) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("检测条件="+item1);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("输出量重复结果="+item5);
					String item6 = (String) morphDynaBean.get("item6");
					logger.info("特定辐射输出量结果="+item6);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					double parseDouble2 = 0d;
					if (NumberUtils.isNumber(item5)) {
						parseDouble1 = Double.parseDouble(item5);
					}
					if (NumberUtils.isNumber(item6)) {
						parseDouble2 = Double.parseDouble(item6);
					}
					
					dataMap.put("v71","7");//编号
					dataMap.put("v72","输出量重复/%");//检测项目
					dataMap.put("v73",item1+"kV");//检测条件
					dataMap.put("v74",item5+"%");//检测结果
					dataMap.put("v75","≤5%");//标准限值
					//判断是否符合
					if (parseDouble1 <= 5) {
						dataMap.put("v76","符合");//结论
					}else{
						dataMap.put("v76","不符合");//结论
						pass = 1;
						isNo[i] = "输出量重复/%";
					}
					
					dataMap.put("v101","10");//编号
					dataMap.put("v102","特定辐射输出量/（μGy/mAs）");//检测项目
					dataMap.put("v103","28kV，1m处，Mo/Mo");//检测条件
					dataMap.put("v104",item6);//检测结果
					//判断是验收还是状态检测
					if (monitorType.equals("验收检测")) {
						dataMap.put("v105","＞45");//标准限值
						//判断是否符合
						if (parseDouble2 > 45) {
							dataMap.put("v106","符合");//结论
						}else{
							dataMap.put("v106","不符合");//结论
							pass = 1;
							isNo[i] = "特定辐射输出量/（μGy/mAs）";
						}
					}else{
						dataMap.put("v105","＞30");//标准限值
						//判断是否符合
						if (parseDouble2 > 30) {
							dataMap.put("v106","符合");//结论
						}else{
							dataMap.put("v106","不符合");//结论
							pass = 1;
							isNo[i] = "特定辐射输出量/（μGy/mAs）";
						}
					}
					
					
					//7是乳腺平均剂量
				}else if (type == 7) {
					String item8 = (String) morphDynaBean.get("item8");
					logger.info("结果="+item8);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item8)) {
						parseDouble1 = Double.parseDouble(item8);
					}
					
					dataMap.put("v81","8");//编号
					dataMap.put("v82","乳腺平均剂量/mGy");//检测项目
					dataMap.put("v83","4cm模体");//检测条件
					dataMap.put("v84",item8);//检测结果
					dataMap.put("v85","≤2.0");//标准限值
					//判断是否符合
					if (parseDouble1 <= 2) {
						dataMap.put("v86","符合");//结论
					}else{
						dataMap.put("v86","不符合");//结论
						pass = 1;
						isNo[i] = "乳腺平均剂量/mGy";
					}
					
					//8是高对比分辨率
				}else if (type == 8) {
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("结果="+item3);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item3)) {
						parseDouble1 = Double.parseDouble(item3);
					}
					
					dataMap.put("v91","9");//编号
					dataMap.put("v92","高对比分辨力/（lp/mm）");//检测项目
					dataMap.put("v93","线对卡");//检测条件
					dataMap.put("v94",item3);//检测结果
					dataMap.put("v95","＞10");//标准限值
					//判断是否符合
					if (parseDouble1 > 10) {
						dataMap.put("v96","符合");//结论
					}else{
						dataMap.put("v96","不符合");//结论
						pass = 1;
						isNo[i] = "高对比分辨力/（lp/mm）";
					}
					
					//9是半值层（HVL）/mmAl
				}else if (type == 9) {
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("结果="+item3);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item3)) {
						parseDouble1 = Double.parseDouble(item3);
					}
					
					dataMap.put("v111","11");//编号
					dataMap.put("v112","半值层（HVL）/mmAl");//检测项目
					dataMap.put("v113","28kV，Mo/Mo");//检测条件
					dataMap.put("v114",item3);//检测结果
					dataMap.put("v115","≥0.3");//标准限值
					//判断是否符合
					if (parseDouble1 >= 0.3) {
						dataMap.put("v116","符合");//结论
					}else{
						dataMap.put("v116","不符合");//结论
						pass = 1;
						isNo[i] = "半值层（HVL）/mmAl";
					}
					
					//10是曝光时间指示的偏离
				}else if (type == 10) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("v121","12");//编号
					dataMap.put("v122","曝光时间指示的偏离");//检测项目
					
					if (project == 1) {
						//获取数据
						JSONArray jsonArray = a.getJSONArray("valueList");
						Object[] objects = jsonArray.toArray();
						logger.info("数据数量="+objects.length);
						for (int j = 1; j <= objects.length; j++) {
							a = JSONObject.fromObject(objects[j-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							String item1 =(String) morphDynaBean1.get("item1");
							logger.info("标称值 （ms）="+item1);
							String item7 =(String) morphDynaBean1.get("item6");
							logger.info("相对偏差（%）="+item7);
							
							double parseDouble1 = 0d;
							double parseDouble7 = 0d;
							//判断是否为数字
							if (NumberUtils.isNumber(item1)) {
								parseDouble1 = Double.parseDouble(item1);
							}
							if (NumberUtils.isNumber(item7)) {
								parseDouble7 = Double.parseDouble(item7);
							}
							//判断是验收还是状态
							if (monitorType.equals("验收检测")) {
								//判断第一次循环单独赋值
								if (j == 1) {
									//判断是否有数据
									if (item1.equals("") && item1.equals("")) {
										dataMap.put("v123","");
										dataMap.put("v124","");
										dataMap.put("v125","");
										dataMap.put("v126","");
										dataMap.put("v127","");
									}else{
										dataMap.put("v124",item1);
										//根据曝光时间指示来显示结果
										if (timeDeixis.equals("有")) {
											dataMap.put("v125",item7+"%");
											//判断结果是否符合标准
											if (parseDouble1 > 200) {
												dataMap.put("v123","t＞200ms");
												dataMap.put("v126","±10%内");
												if (Math.abs(parseDouble7) < 10) {
													dataMap.put("v127","符合");
												}else{
													dataMap.put("v127","不符合");
													pass = 1;
													isNo[i] = "曝光时间指示的偏离 ";
												}
											}else{
												dataMap.put("v123","t≤200ms");
												dataMap.put("v126","±15%内");
												if (Math.abs(parseDouble7) < 15) {
													dataMap.put("v127","符合");
												}else{
													dataMap.put("v127","不符合");
													pass = 1;
													isNo[i] = "曝光时间指示的偏离 ";
												}
											}
										}else{
											dataMap.put("v123","t≤200ms");
											dataMap.put("v125","不满足标准检测条件");
											dataMap.put("v126","±15%内");
											dataMap.put("v127","—");
										}
									}
								}else{
									//判断是否有数据
									if (!item1.equals("") && !item1.equals("")) {
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV2(item1);
										//根据曝光时间指示来显示结果
										if (timeDeixis.equals("有")) {
											pointData.setV3(item7+"%");
											//判断结果是否符合标准
											if (parseDouble1 > 200) {
												pointData.setV1("t＞200ms");
												pointData.setV4("±10%内");
												if (Math.abs(parseDouble7) < 10) {
													pointData.setV5("符合");
												}else{
													pointData.setV5("不符合");
													pass = 1;
													isNo[i] = "曝光时间指示的偏离 ";
												}
											}else{
												pointData.setV1("t≤200ms");
												pointData.setV4("±15%");
												if (Math.abs(parseDouble7) < 15) {
													pointData.setV5("符合");
												}else{
													pointData.setV5("不符合");
													pass = 1;
													isNo[i] = "曝光时间指示的偏离 ";
												}
											}
										}else{
											pointData.setV1("t≤200ms");
											pointData.setV3("不满足标准检测条件");
											pointData.setV4("±15%");
											pointData.setV5("—");
										}
										pointDatas3.add(pointData);
									}
								}
							}else{
								dataMap.put("v123","—");
								dataMap.put("v124","—");
								dataMap.put("v125","状态检测无此项");
								dataMap.put("v126","—");
								dataMap.put("v127","—");
							}
						}
					}else{
						dataMap.put("v123","—");
						dataMap.put("v124","—");
						dataMap.put("v125",reason);
						dataMap.put("v126","—");
						dataMap.put("v127","—");
					}
					
				}
			}
			
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int as = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (as != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					as ++;
				}
			}
		    
			//判断结论是否符合
			if (pass == 0) {
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，所检项目的检测结果均符合标准要求。");
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，"+isNoName+"的检测结果不符合标准要求，其余所检项目的检测结果符合标准要求。");
			}
			dataMap.put("pointDatas1",pointDatas1);//大焦点
			dataMap.put("pointDatas2",pointDatas2);//小焦点
			dataMap.put("pointDatas3",pointDatas3);//曝光时间指示的偏离
			dataMap.put("notes",notes);//备注
		    
		    //模拟数据测试
		    dataMap.put("v1","");
		    dataMap.put("v2","");
		    dataMap.put("v3","");
		    dataMap.put("v4","");
		    dataMap.put("v5","");
		    dataMap.put("standard","");
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			String ftl = "/fs_rxpp_xn.ftl";
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
		    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 乳腺屏片性能报告封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_rxpp_xn_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_rxpp_xn_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","质量控制检测");//项目名称
		    dataMap.put("checkUnitName",task.getCheckUnitName());//委托单位
		    dataMap.put("monitorType","委托检测");//检测类别
		    dataMap.put("place",task.getPlace());//受检场所名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//场所内设备名称
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_rxpp_xn_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	/**
	 * 生成乳腺DR性能报告
	 * @return
	 */
	@SuppressWarnings({ "static-access", "deprecation" })
	public String report_fs_rxdr_xn_docx(String taskId,String docNum,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_rxdr_xn_docx()函数");
		
		String docUrl = "";
		int pass = 0;//用于结论是否符合
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
		    String staffName = "";
		    String where1 = "";
		    int ass = 0;
		    String[] isNo = new String[20];//不合格的项目
		    
//		    String photoUrl = task.getRecordUrl().substring(0, task.getRecordUrl().length()-1)+task.getCheckUrl();
//		    logger.info("检测人员="+photoUrl);
//		    String[] recordUrl = photoUrl.substring(1, photoUrl.length() - 1).split("\\|");
//			logger.info("检测人数量="+recordUrl.length);
//			for (int i = 0; i < recordUrl.length; i++) {
//				where1 = " and photoUrl='"+recordUrl[i]+"'";
//				List<ROMS_SZ_STAFF> staffs = romsszstaffService.queryWhereList(where1);
//				if (staffs.size() == 0) {
//					continue;
//				}else{
//					if (ass != 0) {
//						staffName += "，";
//					}
//					staffName += staffs.get(0).getStaffName();
//					ass++;
//				}
//			}
		    where1 = " and taskId='"+taskId+"' and type != 2";
		    List<ROMS_SZ_TASKSTAFF> taskStaffs = romssztasktaffService.queryWhereList(where1);
		    logger.info("任务绑定检测人数量"+taskStaffs.size());
		    for (int i = 0; i < taskStaffs.size(); i++) {
		    	if (ass != 0) {
					staffName += "，";
				}
		    	staffName += taskStaffs.get(i).getStaff().getStaffName();
		    	ass++;
			}
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			Date createtime = task.getCreatetime();
			
			String yMd = y_sdf.format(createtime)+"-"+
		    M_sdf.format(createtime)+"-"+
		    d_sdf.format(createtime);
			
			//查询对应报告编号
			String docNum1 = "";
//			String where3 = " AND task.project='"+task.getProject().getId()+"' AND " +
//					"deviceType.name='"+taskauth.getDeviceType().getName()+"' AND " +
//							"task.createtime LIKE '%"+yMd+"%' AND " +
//							"deviceType.deviceMain='1'";
//			ROMS_SZ_TASK queryOtherTask = romssztaskService.queryOtherTask(where3);
			//判断是否有对应的性能任务
//			if (queryOtherTask != null) {
//				String where2 = " and taskId='"+queryOtherTask.getId()+"'";
//				ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
//				//判断对应的任务是否生成报告
//				if (doc != null) {
//					docNum1 = doc.getDocNum();
//				}
//			}
			
			String datetime = y_sdf.format(createtime)+"年"+
		    M_sdf.format(createtime)+"月"+
		    d_sdf.format(createtime)+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("agencyName","深圳市瑞达检测技术有限公司");
		    dataMap.put("agencyAddress","深圳市龙华区民治街道上芬社区第五工业区二区4号201");
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("monitorType",task.getMonitorType());//检测类别
		    dataMap.put("testingProject","详见表6");//检测项目
		    dataMap.put("staffName",staffName);//检测人员名字
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("note",docNum1);//备注（关联报告编号）
		    dataMap.put("purpose","乳腺DR");//设备用途
		    
		    String monitorType = task.getMonitorType();//检测类别
		    String standard1 = task.getStandard();
		    
		    //转换成数组循环检测依据
		    ArrayList<ROMS_SZ_POINTDATA> standards = new ArrayList<ROMS_SZ_POINTDATA>();
		    
//		    String[] str = task.getStandard().substring(1, task.getStandard().length() - 1).split("\\|");
//			System.out.println("检测长度="+str.length);
//			for (int i = 0; i < str.length; i++) {
//				ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
//				standard.setStandard(str[i]);
//				
//				standards.add(standard);
//				
//				//拼一个字符串用于结论
//				if (i != 0) {
//					standard1 += "和";
//				}
//				standard1 += str[i];
//			}
		    ROMS_SZ_POINTDATA standard = new ROMS_SZ_POINTDATA();
			standard.setStandard(standard1);
			standards.add(standard);
			dataMap.put("standards",standards);//检测依据
			
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    //仪器
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("") && !taskDevices.get(i).getDevice().getDeviceNum().equals("/")) {
		    		device = taskDevices.get(i).getDevice();
		    		//名称/型号/编号
		    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum());//主要检测仪器
//		    		dataMap.put("deviceName",device.getDeviceName()+"/"+device.getDeviceNum());//主要检测仪器
		    		dataMap.put("deviceUnit",device.getDeviceUnit());//检测仪器检定单位
				    dataMap.put("correctNum",device.getCorrectNum()+"/"+device.getCorrectTime());//检定证书编号
				}
			}
		    //没有仪器的时候补空值
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceName","");//主要检测仪器
			    dataMap.put("deviceUnit","");//检测仪器检定单位
			    dataMap.put("correctNum","");//检定证书编号
			}
		    
		    ROMS_SZ_POINTDATA pointData = null;
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();//大焦点
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();//小焦点
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();//半值层
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas5 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是胸壁侧照射野准直,1是光野与照射野的一致性，2是管电压指示的偏离，3是半值层（HVL）/mmAl" +
						"4是特定辐射输出量和输出量重复性，5是影像接收器响应，6是影像接收器均匀性，7是伪影，" +
						"8是自动曝光控制重复性，9是乳腺平均剂量，10是高对比分辨率，11是对比度细节阈值="+type);
				
				//0是胸壁侧照射野准直
				if (type == 0) {
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("超出台边="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("超出距离="+item2);
					int item3 = Integer.parseInt((String) morphDynaBean.get("item3"));
					logger.info("未超出台边="+item3);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item2)) {
						parseDouble1 = Double.parseDouble(item2);
					}
					
					dataMap.put("v11","1");//编号
					dataMap.put("v12","胸壁侧照射野准直");//检测项目
					
					//判断项目是否打钩
					if (project == 1) {
						dataMap.put("v13","胸壁侧");//检测条件
						if (item1 == 1) {
							dataMap.put("v14","超出台边"+item2+"mm");//检测结果
						}else{
							dataMap.put("v14","未超出台边"+item2+"mm");//检测结果
						}
						dataMap.put("v15","超出台边，但＜5mm");//标准限值
						//判断是否符合
						if (item1 == 1 && parseDouble1 < 5) {
							dataMap.put("v16","符合");//结论
						}else{
							dataMap.put("v16","不符合");//结论
							pass = 1;
							isNo[i] = "胸壁侧照射野准直";
						}
					}else{
						dataMap.put("v13","—");//检测条件
						dataMap.put("v14",reason);//检测结果
						dataMap.put("v15","—");//标准限值
						dataMap.put("v16","—");//结论
					}
					
					//1是光野与照射野的一致性
				}else if (type == 1) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("a1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("a2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("b1="+item3);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("v21","2");//编号
					dataMap.put("v22","光野与照射野的一致性");//检测项目
					
					//判断项目是否打钩
					if (project == 1) {
						//判断是不是数字
						double value = 0d;
						String result = "";
						double parseDouble1 = 0d;
						double parseDouble2 = 0d;
						double parseDouble3 = 0d;
						String item11 = item1.replace("+", "").replace("-", "");
						String item22 = item2.replace("+", "").replace("-", "");
						String item33 = item3.replace("+", "").replace("-", "");
						if (NumberUtils.isNumber(item11)) {
							parseDouble1 = Double.parseDouble(item11);
						}
						if (NumberUtils.isNumber(item22)) {
							parseDouble2 = Double.parseDouble(item22);
						}
						if (NumberUtils.isNumber(item33)) {
							parseDouble3 = Double.parseDouble(item33);
						}
						//获取最大值
						if (parseDouble1 > parseDouble2) {
							result = item1;
							value = parseDouble1;
						}else{
							result = item2;
							value = parseDouble2;
						}
						if (value < parseDouble3) {
							result = item3;
						}
						
						dataMap.put("v23","其他三边");//检测条件
						//判断是验收还是状态检测
						if (monitorType.equals("验收检测")) {
							dataMap.put("v24",result+"mm");//检测结果
							dataMap.put("v25","±5.0mm内");//标准限值
							
							//判断是否符合
							if (Math.abs(value) < 5) {
								dataMap.put("v26","符合");//结论
							}else{
								dataMap.put("v26","不符合");//结论
								pass = 1;
								isNo[i] = "光野与照射野的一致性";
							}
						}else{
							dataMap.put("v24","状态检测无此项");//检测结果
							dataMap.put("v25","—");//标准限值
							dataMap.put("v26","—");//结论
						}
					}else{
						dataMap.put("v23","—");//检测条件
						dataMap.put("v24",reason);//检测结果
						dataMap.put("v25","—");//标准限值
						dataMap.put("v26","—");//结论
					}
					
					
					//2是管电压指示的偏离
				}else if (type == 2) {
					//表示有几个焦点
					int jd = 0;
					
					dataMap.put("v31","3");
					dataMap.put("v32","管电压指示的偏离");
					dataMap.put("v33","±1.0kV内");
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item11 = (String) morphDynaBean1.get("item1");
						logger.info("v3"+j+"1="+item11);
						int item22 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v3"+j+"2="+item22);
						
						dataMap.put("v3"+j+"1",item11);
						
						//判断是否勾选
						if (item22 == 1) {
							jd += 1;
							
							//获取数据
							JSONArray jsonArray1 = a.getJSONArray("valueList");
							Object[] objects1 = jsonArray1.toArray();
							logger.info("sub数据数量="+objects1.length);
							for (int k = 1; k <= objects1.length; k++) {
								a = JSONObject.fromObject(objects1[k-1]);
								bean = JSONObject.toBean(a);
								MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
								String item1 = (String) morphDynaBean11.get("item1");
								logger.info("标称值 （kV）="+item1);
								String item6 = (String) morphDynaBean11.get("item6");
								logger.info("偏差（kV）="+item6);
								
								//判断是不是数字
								double parseDouble6 = 0d;
								if (NumberUtils.isNumber(item6)) {
									parseDouble6 = Double.parseDouble(item6);
								}
								
								//第一次循环的数据单独赋值
								if (k == 1) {
									//判断是不是有数据
									if (item6.equals("")) {
										dataMap.put("v3"+j+"2","");
										dataMap.put("v3"+j+"3","");
										dataMap.put("v3"+j+"4","");
									}else{
										dataMap.put("v3"+j+"2",item1+"kV");
										dataMap.put("v3"+j+"3",item6+"kV");
										if (Math.abs(parseDouble6) < 1) {
											dataMap.put("v3"+j+"4","符合");
										}else{
											dataMap.put("v3"+j+"4","不符合");
											pass = 1;
											isNo[i] = "管电压指示的偏离 ";
										}
									}
								}else{
									//判断是不是有数据
									if (!item6.equals("")) {
										pointData = new ROMS_SZ_POINTDATA();
										pointData.setV1(item1+"kV");
										pointData.setV2(item6+"kV");
										if (Math.abs(parseDouble6) < 1) {
											pointData.setV3("符合");
										}else{
											pointData.setV3("不符合");
											pass = 1;
											isNo[i] = "管电压指示的偏离 ";
										}
										//判断不同的焦点往不同的list插数据（因为模板里面是不同的循环）
										if (item11.equals("大焦点")) {
											pointDatas1.add(pointData);
										}else{
											pointDatas2.add(pointData);
										}
									}
								}
							}
						}else{
							dataMap.put("v3"+j+"2","");
							dataMap.put("v3"+j+"3","");
							dataMap.put("v3"+j+"4","");
						}
					}
					dataMap.put("jd",jd);
					//判断如果是一个焦点的话
					if (jd < 2) {
						//判断如果小焦点有值，大焦点没值得情况，就把小焦点的值赋给大焦点
						if (pointDatas1.size() < pointDatas2.size()) {
							pointDatas1 = pointDatas2;
							dataMap.put("v311",dataMap.get("v321"));
							dataMap.put("v312",dataMap.get("v322"));
							dataMap.put("v313",dataMap.get("v323"));
							dataMap.put("v314",dataMap.get("v324"));
						}
					}
					
					//3是半值层（HVL）/mmAl
				}else if (type == 3) {
					String item11 = (String) morphDynaBean.get("item1");
					logger.info("kV="+item11);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("mAs="+item2);
					
					dataMap.put("v41","4");//编号
					dataMap.put("v42","半值层（HVL）/mmAl");//检测项目
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean11.get("item1");
						logger.info("靶/滤过="+item1);
						String item5 = (String) morphDynaBean11.get("item5");
						logger.info("平均值="+item5);
						
						//判断是不是数字
						double parseDouble1 = 0d;
						if (NumberUtils.isNumber(item5)) {
							parseDouble1 = Double.parseDouble(item5);
						}
						
						//判断如果是第一次循环就单独赋值
						if (k == 1) {
							dataMap.put("v43",item11+"kV");
							dataMap.put("v44",item1);
							dataMap.put("v45",item5);//结果
							if (item1.equals("Mo/Mo")) {
								dataMap.put("v46","0.30≤HVL≤0.40");//标准限值
								//判断是否符合
								if (parseDouble1 >= 0.3 && parseDouble1 <= 0.4) {
									dataMap.put("v47","符合");//结论
								}else{
									dataMap.put("v47","不符合");//结论
									pass = 1;
									isNo[i] = "半值层（HVL）/mmAl";
								}
							}else if (item1.equals("Mo/Rh")) {
								dataMap.put("v46","0.30≤HVL≤0.47");//标准限值
								//判断是否符合
								if (parseDouble1 >= 0.3 && parseDouble1 <= 0.47) {
									dataMap.put("v47","符合");//结论
								}else{
									dataMap.put("v47","不符合");//结论
									pass = 1;
									isNo[i] = "半值层（HVL）/mmAl";
								}
							}else if (item1.equals("Rh/Rh")) {
								dataMap.put("v46","0.30≤HVL≤0.50");//标准限值
								//判断是否符合
								if (parseDouble1 >= 0.3 && parseDouble1 <= 0.5) {
									dataMap.put("v47","符合");//结论
								}else{
									dataMap.put("v47","不符合");//结论
									pass = 1;
									isNo[i] = "半值层（HVL）/mmAl";
								}
							}else if (item1.equals("Rh/Al")) {
								dataMap.put("v46","HVL≥0.30");//标准限值
								//判断是否符合
								if (parseDouble1 >= 0.3) {
									dataMap.put("v47","符合");//结论
								}else{
									dataMap.put("v47","不符合");//结论
									pass = 1;
									isNo[i] = "半值层（HVL）/mmAl";
								}
							}else if (item1.equals("W/Rh")) {
								dataMap.put("v46","0.30≤HVL≤0.58");//标准限值
								//判断是否符合
								if (parseDouble1 >= 0.3 && parseDouble1 <= 0.58) {
									dataMap.put("v47","符合");//结论
								}else{
									dataMap.put("v47","不符合");//结论
									pass = 1;
									isNo[i] = "半值层（HVL）/mmAl";
								}
							}else if (item1.equals("W/Al")) {
								dataMap.put("v46","0.30≤HVL≤0.53");//标准限值
								//判断是否符合
								if (parseDouble1 >= 0.3 && parseDouble1 <= 0.53) {
									dataMap.put("v47","符合");//结论
								}else{
									dataMap.put("v47","不符合");//结论
									pass = 1;
									isNo[i] = "半值层（HVL）/mmAl";
								}
							}else if (item1.equals("W/Ag")) {
								dataMap.put("v46","0.30≤HVL≤0.60");//标准限值
								//判断是否符合
								if (parseDouble1 >= 0.3 && parseDouble1 <= 0.6) {
									dataMap.put("v47","符合");//结论
								}else{
									dataMap.put("v47","不符合");//结论
									pass = 1;
									isNo[i] = "半值层（HVL）/mmAl";
								}
							}else{
								dataMap.put("v46","—");//标准限值
								dataMap.put("v47","—");//结论
							}
						}else{
							//过滤没数据的记录
							if (!item1.equals("") && !item5.equals("")) {
								pointData = new ROMS_SZ_POINTDATA();
								pointData.setV1(item11+"kV");
								pointData.setV2(item1);
								pointData.setV3(item5);//结果
								if (item1.equals("Mo/Mo")) {
									pointData.setV4("0.30≤HVL≤0.40");//标准限值
									//判断是否符合
									if (parseDouble1 >= 0.3 && parseDouble1 <= 0.4) {
										pointData.setV5("符合");//结论
									}else{
										pointData.setV5("不符合");//结论
										pass = 1;
										isNo[i] = "半值层（HVL）/mmAl";
									}
								}else if (item1.equals("Mo/Rh")) {
									pointData.setV4("0.30≤HVL≤0.47");//标准限值
									//判断是否符合
									if (parseDouble1 >= 0.3 && parseDouble1 <= 0.47) {
										pointData.setV5("符合");//结论
									}else{
										pointData.setV5("不符合");//结论
										pass = 1;
										isNo[i] = "半值层（HVL）/mmAl";
									}
								}else if (item1.equals("Rh/Rh")) {
									pointData.setV4("0.30≤HVL≤0.50");//标准限值
									//判断是否符合
									if (parseDouble1 >= 0.3 && parseDouble1 <= 0.5) {
										pointData.setV5("符合");//结论
									}else{
										pointData.setV5("不符合");//结论
										pass = 1;
										isNo[i] = "半值层（HVL）/mmAl";
									}
								}else if (item1.equals("Rh/Al")) {
									pointData.setV4("HVL≥0.30");//标准限值
									//判断是否符合
									if (parseDouble1 >= 0.3) {
										pointData.setV5("符合");//结论
									}else{
										pointData.setV5("不符合");//结论
										pass = 1;
										isNo[i] = "半值层（HVL）/mmAl";
									}
								}else if (item1.equals("W/Rh")) {
									pointData.setV4("0.30≤HVL≤0.58");//标准限值
									//判断是否符合
									if (parseDouble1 >= 0.3 && parseDouble1 <= 0.58) {
										pointData.setV5("符合");//结论
									}else{
										pointData.setV5("不符合");//结论
										pass = 1;
										isNo[i] = "半值层（HVL）/mmAl";
									}
								}else if (item1.equals("W/Al")) {
									pointData.setV4("0.30≤HVL≤0.53");//标准限值
									//判断是否符合
									if (parseDouble1 >= 0.3 && parseDouble1 <= 0.53) {
										pointData.setV5("符合");//结论
									}else{
										pointData.setV5("不符合");//结论
										pass = 1;
										isNo[i] = "半值层（HVL）/mmAl";
									}
								}else if (item1.equals("W/Ag")) {
									pointData.setV4("0.30≤HVL≤0.60");//标准限值
									//判断是否符合
									if (parseDouble1 >= 0.3 && parseDouble1 <= 0.6) {
										pointData.setV5("符合");//结论
									}else{
										pointData.setV5("不符合");//结论
										pass = 1;
										isNo[i] = "半值层（HVL）/mmAl";
									}
								}else{
									pointData.setV4("—");//标准限值
									pointData.setV5("—");//结论
								}
								pointDatas3.add(pointData);
							}
						}
					}
					
					
					//4是特定辐射输出量和输出量重复性
				}else if (type == 4) {
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("kV="+item2);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("CV="+item5);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("特定辐射输出量未检测原因="+reason);
					String reason1 = "";
					if (a.containsKey("reason1")) {
						reason1 = (String) morphDynaBean.get("reason1");
					}
					logger.info("输出量重复性未检测原因="+reason1);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item5)) {
						parseDouble1 = Double.parseDouble(item5);
					}
					
					dataMap.put("v51","5");//编号
					dataMap.put("v52","输出量重复性/%");//检测项目
					
					dataMap.put("v61","6");//编号
					dataMap.put("v62","特定辐射输出量/（μGy/mAs）");//检测项目
					
					if (project == 0) {
						//特定辐射输出量
						dataMap.put("v63","—");//检测条件
						dataMap.put("v64",reason);//检测结果
						dataMap.put("v65","—");//标准限值
						dataMap.put("v66","—");//结论
									
						//输出量重复性
						dataMap.put("v53","—");//检测条件
						dataMap.put("v54",reason1);//检测结果
						dataMap.put("v55","—");//标准限值
						dataMap.put("v56","—");//结论
					}else if (project == 1) {
						//输出量重复性
						dataMap.put("v53","—");//检测条件
						dataMap.put("v54",reason1);//检测结果
						dataMap.put("v55","—");//标准限值
						dataMap.put("v56","—");//结论
						/**特定辐射输出量**/
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean11.get("item1");
							logger.info("靶/滤过="+item1);
							String item7 = (String) morphDynaBean11.get("item7");
							logger.info("X100（μGy/mAs）="+item7);
							String item9 = (String) morphDynaBean11.get("item9");
							logger.info("相对偏差="+item9);
							
							//判断是不是数字
							double parseDouble2 = 0d;
							double parseDouble3 = 0d;
							if (NumberUtils.isNumber(item7)) {
								parseDouble2 = Double.parseDouble(item7);
							}
							if (NumberUtils.isNumber(item9)) {
								parseDouble3 = Double.parseDouble(item9);
							}
							
							//判断第一次循环单独插值
							if (k == 1) {
								dataMap.put("v63",item2+"kV,1m处,"+item1);//检测条件
								//判断是验收还是状态检测
								if (monitorType.equals("验收检测")) {
									dataMap.put("v64",item7);//检测结果
									if (item1.equals("Mo/Mo")) {
										dataMap.put("v65","＞35");//标准限值
										//判断结果是否符合
										if (parseDouble2 > 35) {
											dataMap.put("v66","符合");//结论
										}else{
											dataMap.put("v66","不符合");//结论
											pass = 1;
											isNo[i] = "特定辐射输出量/（μGy/mAs）";
										}
									}else{
										dataMap.put("v65","建立基线值");//标准限值
										dataMap.put("v66","符合");//结论
									}
								}else{
									if (item1.equals("Mo/Mo")) {
										dataMap.put("v64",item7);//检测结果
										dataMap.put("v65","＞30");//标准限值
										//判断结果是否符合
										if (parseDouble2 > 30) {
											dataMap.put("v66","符合");//结论
										}else{
											dataMap.put("v66","不符合");//结论
											pass = 1;
											isNo[i] = "特定辐射输出量/（μGy/mAs）";
										}
									}else{
										dataMap.put("v64",item9);//检测结果
										dataMap.put("v65","＞70%基线值");//标准限值
										//判断结果是否符合
										if (parseDouble3 > 70) {
											dataMap.put("v66","符合");//结论
										}else{
											dataMap.put("v66","不符合");//结论
											pass = 1;
											isNo[i] = "特定辐射输出量/（μGy/mAs）";
										}
									}
								}
							}else{
								//过滤没数据的记录
								if (!item1.equals("") && !item7.equals("")) {
									pointData = new ROMS_SZ_POINTDATA();
									pointData.setV1(item2+"kV,1m处,"+item1);//检测条件
									//判断是验收还是状态检测
									if (monitorType.equals("验收检测")) {
										pointData.setV2(item7);//检测结果
										if (item1.equals("Mo/Mo")) {
											pointData.setV3("＞35");//标准限值
											//判断结果是否符合
											if (parseDouble2 > 35) {
												pointData.setV4("符合");//结论
											}else{
												pointData.setV4("不符合");//结论
											}
										}else{
											pointData.setV3("建立基线值");//标准限值
											pointData.setV4("符合");//结论
										}
									}else{
										if (item1.equals("Mo/Mo")) {
											pointData.setV2(item7);//检测结果
											pointData.setV3("＞30");//标准限值
											//判断结果是否符合
											if (parseDouble2 > 30) {
												pointData.setV4("符合");//结论
											}else{
												pointData.setV4("不符合");//结论
												pass = 1;
												isNo[i] = "特定辐射输出量/（μGy/mAs）";
											}
										}else{
											pointData.setV2(item9);//检测结果
											pointData.setV3("＞70%基线值");//标准限值
											//判断结果是否符合
											if (parseDouble3 > 70) {
												pointData.setV4("符合");//结论
											}else{
												pointData.setV4("不符合");//结论
												pass = 1;
												isNo[i] = "特定辐射输出量/（μGy/mAs）";
											}
										}
									}
									pointDatas4.add(pointData);
								}
							}
						}
					}else if (project == 2) {
						//特定辐射输出量
						dataMap.put("v63","—");//检测条件
						dataMap.put("v64",reason);//检测结果
						dataMap.put("v65","—");//标准限值
						dataMap.put("v66","—");//结论
						
						dataMap.put("v53",item2+"kV");//检测条件
						dataMap.put("v54",item5);//检测结果
						dataMap.put("v55","≤5.0");//标准限值
						//判断是否符合
						if (parseDouble1 <= 5) {
							dataMap.put("v56","符合");//结论
						}else{
							dataMap.put("v56","不符合");//结论
							pass = 1;
							isNo[i] = "输出量重复性/%";
						}
					}else{
						dataMap.put("v53",item2+"kV");//检测条件
						dataMap.put("v54",item5);//检测结果
						dataMap.put("v55","≤5.0");//标准限值
						//判断是否符合
						if (parseDouble1 <= 5) {
							dataMap.put("v56","符合");//结论
						}else{
							dataMap.put("v56","不符合");//结论
							pass = 1;
							isNo[i] = "输出量重复性/%";
						}
						
						/**特定辐射输出量**/
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean11.get("item1");
							logger.info("靶/滤过="+item1);
							String item7 = (String) morphDynaBean11.get("item7");
							logger.info("X100（μGy/mAs）="+item7);
							String item9 = (String) morphDynaBean11.get("item9");
							logger.info("相对偏差="+item9);
							
							//判断是不是数字
							double parseDouble2 = 0d;
							double parseDouble3 = 0d;
							if (NumberUtils.isNumber(item7)) {
								parseDouble2 = Double.parseDouble(item7);
							}
							if (NumberUtils.isNumber(item9)) {
								parseDouble3 = Double.parseDouble(item9);
							}
							
							//判断第一次循环单独插值
							if (k == 1) {
								dataMap.put("v63",item2+"kV,1m处,"+item1);//检测条件
								//判断是验收还是状态检测
								if (monitorType.equals("验收检测")) {
									dataMap.put("v64",item7);//检测结果
									if (item1.equals("Mo/Mo")) {
										dataMap.put("v65","＞35");//标准限值
										//判断结果是否符合
										if (parseDouble2 > 35) {
											dataMap.put("v66","符合");//结论
										}else{
											dataMap.put("v66","不符合");//结论
											pass = 1;
											isNo[i] = "特定辐射输出量/（μGy/mAs）";
										}
									}else{
										dataMap.put("v65","建立基线值");//标准限值
										dataMap.put("v66","符合");//结论
									}
								}else{
									if (item1.equals("Mo/Mo")) {
										dataMap.put("v64",item7);//检测结果
										dataMap.put("v65","＞30");//标准限值
										//判断结果是否符合
										if (parseDouble2 > 30) {
											dataMap.put("v66","符合");//结论
										}else{
											dataMap.put("v66","不符合");//结论
											pass = 1;
											isNo[i] = "特定辐射输出量/（μGy/mAs）";
										}
									}else{
										dataMap.put("v64",item9);//检测结果
										dataMap.put("v65","＞70%基线值");//标准限值
										//判断结果是否符合
										if (parseDouble3 > 70) {
											dataMap.put("v66","符合");//结论
										}else{
											dataMap.put("v66","不符合");//结论
											pass = 1;
											isNo[i] = "特定辐射输出量/（μGy/mAs）";
										}
									}
								}
							}else{
								//过滤没数据的记录
								if (!item1.equals("") && !item7.equals("")) {
									pointData = new ROMS_SZ_POINTDATA();
									pointData.setV1(item2+"kV,1m处,"+item1);//检测条件
									//判断是验收还是状态检测
									if (monitorType.equals("验收检测")) {
										pointData.setV2(item7);//检测结果
										if (item1.equals("Mo/Mo")) {
											pointData.setV3("＞35");//标准限值
											//判断结果是否符合
											if (parseDouble2 > 35) {
												pointData.setV4("符合");//结论
											}else{
												pointData.setV4("不符合");//结论
											}
										}else{
											pointData.setV3("建立基线值");//标准限值
											pointData.setV4("符合");//结论
										}
									}else{
										if (item1.equals("Mo/Mo")) {
											pointData.setV2(item7);//检测结果
											pointData.setV3("＞30");//标准限值
											//判断结果是否符合
											if (parseDouble2 > 30) {
												pointData.setV4("符合");//结论
											}else{
												pointData.setV4("不符合");//结论
												pass = 1;
												isNo[i] = "特定辐射输出量/（μGy/mAs）";
											}
										}else{
											pointData.setV2(item9);//检测结果
											pointData.setV3("＞70%基线值");//标准限值
											//判断结果是否符合
											if (parseDouble3 > 70) {
												pointData.setV4("符合");//结论
											}else{
												pointData.setV4("不符合");//结论
												pass = 1;
												isNo[i] = "特定辐射输出量/（μGy/mAs）";
											}
										}
									}
									pointDatas4.add(pointData);
								}
							}
						}
					}
					
					//5是影像接收器响应
				}else if (type == 5) {
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("R2="+item5);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("v71","7");//编号
					dataMap.put("v72","影像接收器响应");//检测项目
					//判断项目是否打钩
					if (project == 1) {
						//判断是不是数字
						double parseDouble1 = 0d;
						if (NumberUtils.isNumber(item5)) {
							parseDouble1 = Double.parseDouble(item5);
						}
						
						dataMap.put("v73","4cm PMMA");//检测条件
						dataMap.put("v74",item5);//检测结果
						//判断是验收还是状态检测
						if (monitorType.equals("验收检测")) {
							dataMap.put("v75","R²＞0.99");//标准限值
							//判断是否符合
							if (parseDouble1 > 0.99) {
								dataMap.put("v76","符合");//结论
							}else{
								dataMap.put("v76","不符合");//结论
								pass = 1;
								isNo[i] = "影像接收器响应";
							}
						}else{
							dataMap.put("v75","R²＞0.95");//标准限值
							//判断是否符合
							if (parseDouble1 > 0.95) {
								dataMap.put("v76","符合");//结论
							}else{
								dataMap.put("v76","不符合");//结论
								pass = 1;
								isNo[i] = "影像接收器响应";
							}
						}
					}else{
						dataMap.put("v73","—");//检测条件
						dataMap.put("v74",reason);//检测结果
						dataMap.put("v75","—");//标准限值
						dataMap.put("v76","—");//结论
					}
					
					
					//6是影像接收器均匀性
				}else if (type == 6) {
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("影像接收器均匀性="+item5);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("v81","8");//编号
					dataMap.put("v82","影像接收器均匀性");//检测项目
					if (project == 1) {
						//判断是不是数字
						double parseDouble1 = 0d;
						if (NumberUtils.isNumber(item5)) {
							parseDouble1 = Double.parseDouble(item5);
						}
						
						dataMap.put("v83","4cm PMMA");//检测条件
						dataMap.put("v84",item5+"%");//检测结果
						dataMap.put("v85","±10.0%内");//标准限值
						//判断是否符合
						if (Math.abs(parseDouble1) < 10) {
							dataMap.put("v86","符合");//结论
						}else{
							dataMap.put("v86","不符合");//结论
							pass = 1;
							isNo[i] = "影像接收器均匀性";
						}
					}else{
						dataMap.put("v83","—");//检测条件
						dataMap.put("v84",reason);//检测结果
						dataMap.put("v85","—");//标准限值
						dataMap.put("v86","—");//结论
					}
					
					//7是伪影
				}else if (type == 7) {
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("是否存在伪影 ="+item5);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("v91","9");//编号
					dataMap.put("v92","伪影");//检测项目
					
					if (project == 1) {
						dataMap.put("v93","4cm PMMA");//检测条件
						dataMap.put("v95","无影响临床影像的伪影");//标准限值
						if (item5.equals("是")) {
							dataMap.put("v94","有影响临床影像的伪影");//检测结果
							dataMap.put("v96","不符合");//结论
							pass = 1;
							isNo[i] = "伪影";
						}else if (item5.equals("否")) {
							dataMap.put("v94","无影响临床影像的伪影");//检测结果
							dataMap.put("v96","符合");//结论
						}else{
							dataMap.put("v94","—");//检测结果
							dataMap.put("v96","—");//结论
						}
					}else{
						dataMap.put("v93","—");//检测条件
						dataMap.put("v94",reason);//检测结果
						dataMap.put("v95","—");//标准限值
						dataMap.put("v96","—");//结论
					}
					
					
					//8是自动曝光控制重复性
				}else if (type == 8) {
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("结果 ="+item3);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item3)) {
						parseDouble1 = Double.parseDouble(item3);
					}
					
					dataMap.put("v101","10");//编号
					dataMap.put("v102","自动曝光控制重复性");//检测项目
					
					if (project == 1) {
						dataMap.put("v103","4cm PMMA");//检测条件
						dataMap.put("v104",item3+"%");//检测结果
						//判断是验收还是状态检测
						if (monitorType.equals("验收检测")) {
							dataMap.put("v105","±5.0%内");//标准限值
							//判断是否符合
							if (Math.abs(parseDouble1) < 5) {
								dataMap.put("v106","符合");//结论
							}else{
								dataMap.put("v106","不符合");//结论
								pass = 1;
								isNo[i] = "自动曝光控制重复性";
							}
						}else{
							dataMap.put("v105","±10.0%内");//标准限值
							//判断是否符合
							if (Math.abs(parseDouble1) < 10) {
								dataMap.put("v106","符合");//结论
							}else{
								dataMap.put("v106","不符合");//结论
								pass = 1;
								isNo[i] = "自动曝光控制重复性";
							}
						}
					}else{
						dataMap.put("v103","—");//检测条件
						dataMap.put("v104",reason);//检测结果
						dataMap.put("v105","—");//标准限值
						dataMap.put("v106","—");//结论
					}
					
					
					//9是乳腺平均剂量
				}else if (type == 9) {
					int item6 = Integer.parseInt((String) morphDynaBean.get("item6"));
					logger.info("2D曝光模式="+item6);
					int item7 = Integer.parseInt((String) morphDynaBean.get("item7"));
					logger.info("3D 0°曝光模式="+item7);
					String item17 = (String) morphDynaBean.get("item17");
					logger.info("乳腺平均剂量AGD="+item17);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//判断是不是数字
					double parseDouble1 = 0d;
					if (NumberUtils.isNumber(item17)) {
						parseDouble1 = Double.parseDouble(item17);
					}
					
					dataMap.put("v111","11");//编号
					dataMap.put("v112","乳腺平均剂量/mGy");//检测项目
					
					if (project == 1) {
						dataMap.put("v114","4cm PMMA");//检测条件2
						dataMap.put("v115",item17);//检测结果
						if (item6 == 1 && item7 == 1) {
							dataMap.put("v113","普通2D摄影+体层合成摄影");//检测条件1
							dataMap.put("v116","＜3.5");//标准限值
							//判断是否符合
							if (parseDouble1 < 3.5) {
								dataMap.put("v117","符合");//结论
							}else{
								dataMap.put("v117","不符合");//结论
								pass = 1;
								isNo[i] = "乳腺平均剂量/mGy";
							}
						}else if (item6 == 1 && item7 == 0) {
							dataMap.put("v113","普通2D摄影");//检测条件1
							dataMap.put("v116","＜2.0");//标准限值
							//判断是否符合
							if (parseDouble1 < 2) {
								dataMap.put("v117","符合");//结论
							}else{
								dataMap.put("v117","不符合");//结论
								pass = 1;
								isNo[i] = "乳腺平均剂量/mGy";
							}
						}else if (item6 == 0 && item7 == 1) {
							dataMap.put("v113","体层合成摄影");//检测条件1
							dataMap.put("v116","＜2.0");//标准限值
							//判断是否符合
							if (parseDouble1 < 2) {
								dataMap.put("v117","符合");//结论
							}else{
								dataMap.put("v117","不符合");//结论
								pass = 1;
								isNo[i] = "乳腺平均剂量/mGy";
							}
						}else{
							dataMap.put("v113","—");//检测条件1
							dataMap.put("v116","—");//标准限值
							dataMap.put("v117","—");//结论
						}
					}else{
						dataMap.put("v113","—");//检测条件1
						dataMap.put("v114","—");//检测条件2
						dataMap.put("v115",reason);//检测结果
						dataMap.put("v116","—");//标准限值
						dataMap.put("v117","—");//结论
					}
					
					//10是高对比分辨率
				}else if (type == 10) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("v121","12");//编号
					dataMap.put("v122","高对比分辨力");//检测项目
					
					if (project == 1) {
						dataMap.put("v1211","水平方向");
						dataMap.put("v1221","竖直方向");
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean11.get("item1");
							logger.info("方向="+item1);
							String item2 = (String) morphDynaBean11.get("item2");
							logger.info("测量值="+item2);
							String item3 = (String) morphDynaBean11.get("item3");
							logger.info("90%规定值="+item3);
							String item4 = (String) morphDynaBean11.get("item4");
							logger.info("80%fNyquist="+item4);
							
							//判断是不是数字
							double parseDouble1 = 0d;
							double parseDouble2 = 0d;
							double parseDouble3 = 0d;
							if (NumberUtils.isNumber(item2)) {
								parseDouble1 = Double.parseDouble(item2);
							}
							if (NumberUtils.isNumber(item3)) {
								parseDouble2 = Double.parseDouble(item3);
							}
							if (NumberUtils.isNumber(item4)) {
								parseDouble3 = Double.parseDouble(item4);
							}
							
							//判断是验收还是状态检测
							if (monitorType.equals("验收检测")) {
								dataMap.put("v123","≥90%厂家规定值，或≥80% f Nyquist，建立基线值");//标准限值
								//判断方向
								if (item1.indexOf("水平") != -1) {
									dataMap.put("v1212",item2);
									//判断结果是否符合
									if (parseDouble1 >= parseDouble2 || parseDouble1 >= parseDouble3) {
										dataMap.put("v1213","符合");//结论
									}else{
										dataMap.put("v1213","不符合");//结论
									}
								}else{
									dataMap.put("v1222",item2);
									//判断结果是否符合
									if (parseDouble1 >= parseDouble2 || parseDouble1 >= parseDouble3) {
										dataMap.put("v1223","符合");//结论
									}else{
										dataMap.put("v1223","不符合");//结论
									}
								}
							}else{
								dataMap.put("v123","≥90%基线值");//标准限值
								//判断方向
								if (item1.indexOf("水平") != -1) {
									dataMap.put("v1212",item2);
									//判断结果是否符合
									if (parseDouble1 >= parseDouble2) {
										dataMap.put("v1213","符合");//结论
									}else{
										dataMap.put("v1213","不符合");//结论
									}
								}else{
									dataMap.put("v1222",item2);
									//判断结果是否符合
									if (parseDouble1 >= parseDouble2) {
										dataMap.put("v1223","符合");//结论
									}else{
										dataMap.put("v1223","不符合");//结论
									}
								}
							}
						}
					}else{
						dataMap.put("v123","—");//标准限值
						
						dataMap.put("v1211","—");
						dataMap.put("v1212",reason);
						dataMap.put("v1213","—");//结论
						
						dataMap.put("v1221","—");
						dataMap.put("v1222",reason);
						dataMap.put("v1223","—");//结论
					}
					
					
					//11是对比度细节阈值
				}else if (type == 11) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					dataMap.put("s131","13");//编号
					dataMap.put("s132","对比度细节阈值");//检测项目
					
					if (project == 1) {
						dataMap.put("s133","细节直径");//检测条件
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							String item1 = (String) morphDynaBean11.get("item1");
							logger.info("细节直径（mm）="+item1);
							String item3 = (String) morphDynaBean11.get("item3");
							logger.info("对比度(%)="+item3);
							
							//判断是不是数字
							double parseDouble1 = 0d;
							double parseDouble2 = 0d;
							if (NumberUtils.isNumber(item1)) {
								parseDouble1 = Double.parseDouble(item1);
							}
							if (NumberUtils.isNumber(item3)) {
								parseDouble2 = Double.parseDouble(item3);
							}
							
							double bz = 0d; 
							//通过对比度得出对应的标准限值
							if (parseDouble1 >= 0.1 && parseDouble1 < 0.25) {
								bz = 23;
							}else if (parseDouble1 >= 0.25 && parseDouble1 < 0.5) {
								bz = 5.45;
							}else if (parseDouble1 >= 0.5 && parseDouble1 < 1) {
								bz = 2.35;
							}else if (parseDouble1 >= 1 && parseDouble1 < 2) {
								bz = 1.40;
							}else if (parseDouble1 >= 2) {
								bz = 1.05;
							}
							
							//判断第一次循环单独插入
							if (k == 1) {
								dataMap.put("s134",item1+"mm");
								dataMap.put("s135",item3+"%");//结果
								dataMap.put("s136","＜"+bz+"%");//标准限值
								//判断是否符合
								if (parseDouble2 < bz) {
									dataMap.put("s137","符合");//结论
								}else{
									dataMap.put("s137","不符合");//结论
									pass = 1;
									isNo[i] = "对比度细节阈值";
								}
							}else{
								//过滤没数据的记录
								if (!item1.equals("") && !item3.equals("")) {
									pointData = new ROMS_SZ_POINTDATA();
									pointData.setV1(item1+"mm");
									pointData.setV2(item3+"%");//结果
									pointData.setV3("＜"+bz+"%");//标准限值
									//判断是否符合
									if (parseDouble2 < bz) {
										pointData.setV4("符合");//结论
									}else{
										pointData.setV4("不符合");//结论
										pass = 1;
										isNo[i] = "对比度细节阈值";
									}
									pointDatas5.add(pointData);
								}
							}
						}
					}else{
						dataMap.put("s133","—");//检测条件
						dataMap.put("s134","—");
						dataMap.put("s135",reason);//结果
						dataMap.put("s136","—");//标准限值
						dataMap.put("s137","—");//结论
					}
					
				}
			}
			
			//循环不合格的项目,筛选不为null的值
		    String isNoName = "";
		    int as = 0;
		    for (int i = 0; i < isNo.length;i++) {
		    	if (isNo[i] != null) {
		    		if (as != 0) {
						isNoName += "、";
					}
					
					isNoName += "“"+isNo[i]+"”";
					as ++;
				}
			}
		    
			//判断结论是否符合
			if (pass == 0) {
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，所检项目的检测结果均符合标准要求。");
			}else{
				dataMap.put("conclusion","根据"+standard1+"中的方法和要求，对"+task.getCheckDeviceModel()+"型"+task.getCheckDeviceName()+"进行了质量控制检测，"+isNoName+"的检测结果不符合标准要求，其余所检项目的检测结果符合标准要求。");
			}
			dataMap.put("pointDatas1",pointDatas1);//大焦点
			dataMap.put("pointDatas2",pointDatas2);//小焦点
			dataMap.put("pointDatas3",pointDatas3);//半值层
			dataMap.put("pointDatas4",pointDatas4);//特定辐射输出量
			dataMap.put("pointDatas5",pointDatas5);//对比度细节阈值
			dataMap.put("notes",notes);//备注
			
		    //模拟数据测试
		    dataMap.put("v1","");
		    dataMap.put("v2","");
		    dataMap.put("v3","");
		    dataMap.put("v4","");
		    dataMap.put("v5","");
		    dataMap.put("standard","");
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			//查找对应的报告
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			if (doc == null) {
				dataMap.put("make", getImageStr(pas+white));//编制人
				dataMap.put("auditor", getImageStr(pas+white));//审核人
				dataMap.put("issue", getImageStr(pas+white));//签发人
				dataMap.put("issueTime","");//签发时间
			}else{
				//编制人
				if (doc.getStaffMake() == null) {
					dataMap.put("make", getImageStr(pas+white));
				}else{
					if (doc.getStaffMake().getPhotoUrl() == null || doc.getStaffMake().getPhotoUrl().length() == 0) {
						dataMap.put("make", getImageStr(pas+white));
					}else{
						dataMap.put("make", getImageStr(pas+doc.getStaffMake().getPhotoUrl()));
					}
				}
				//审核人
				if (doc.getStaffAuditor() == null) {
					dataMap.put("auditor", getImageStr(pas+white));
				}else{
					if (doc.getStaffAuditor().getPhotoUrl() == null || doc.getStaffAuditor().getPhotoUrl().length() == 0) {
						dataMap.put("auditor", getImageStr(pas+white));
					}else{
						dataMap.put("auditor", getImageStr(pas+doc.getStaffAuditor().getPhotoUrl()));
					}
				}
				//签发人
				if (doc.getStaffIssue() == null) {
					dataMap.put("issue", getImageStr(pas+white));
					dataMap.put("issueTime","");//签发时间
				}else{
					//判断日期
					if (doc.getIssueTime() != null) {
						dataMap.put("issueTime",y_sdf.format(doc.getIssueTime())+"年"+
							    M_sdf.format(doc.getIssueTime())+"月"+
							    d_sdf.format(doc.getIssueTime())+"日");//签发时间
					}else{
						dataMap.put("issueTime","");//签发时间
					}
					if (doc.getStaffIssue().getPhotoUrl() == null || doc.getStaffIssue().getPhotoUrl().length() == 0) {
						dataMap.put("issue", getImageStr(pas+white));
					}else{
						dataMap.put("issue", getImageStr(pas+doc.getStaffIssue().getPhotoUrl()));
					}
				}
			}
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			String ftl = "/fs_rxdr_xn.ftl";
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
		    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+".pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return docUrl;
	}
	
	/**
	 * 乳腺DR性能报告封面
	 * @param taskId
	 * @param docNum
	 * @param taskauth
	 * @return
	 */
	public String report_fs_rxdr_xn_head_docx(String taskId,String docNum,Date docTime,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("report_fs_rxdr_xn_head_docx()函数");
		
		String docUrl = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String where2 = " and docNum='"+docNum+"' and projectId='"+task.getProject().getId()+"'";
			ROMS_SZ_DOC doc = romsszdocService.queryWhere(where2);
			
			String issueTime = "";
			if (doc != null) {
				if (doc.getIssueTime() != null) {
					issueTime = y_sdf.format(doc.getIssueTime())+"年"+
				    M_sdf.format(doc.getIssueTime())+"月"+
				    d_sdf.format(doc.getIssueTime())+"日";
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("docNum",docNum);//报告编号
		    dataMap.put("docTime",issueTime);//签发日期
		    dataMap.put("projectName","质量控制检测");//项目名称
		    dataMap.put("checkUnitName",task.getCheckUnitName());//委托单位
		    dataMap.put("monitorType","委托检测");//检测类别
		    dataMap.put("place",task.getPlace());//受检场所名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//设备型号
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//场所内设备名称
		    
			logger.info("====="+JSONObject.fromObject(dataMap));
			
		    String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(docNum.equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+docNum+"报告封面.xml", dataMap, "/fs_rxdr_xn_head.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+docNum+"报告封面.docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	logger.info("pdf存放路径="+path+"/"+docNum+"报告封面.pdf");
			 File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((docNum+"报告封面.pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
			     
			  //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			 logger.info(cmd);
			 cmdRun(cmd);
			 
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		      docUrl=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+docNum;
		     logger.info("返回下载地址="+docUrl);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return docUrl;
	}
	
	
	
	/**
	 * 模板284任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_284_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_284_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String employUnit = (String) morphDynaBean.get("employUnit");
			logger.info("用人单位="+employUnit);
			String soundCalibratorModel = (String) morphDynaBean.get("soundCalibratorModel");
			logger.info("声校准器型号="+soundCalibratorModel);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String calibrationValue = (String) morphDynaBean.get("calibrationValue");
			logger.info("校准值[dB(A)]="+calibrationValue);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			task.setCreatetime(sdf.parse(createtime));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setInserttime(datetime);
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setEmployUnit(employUnit==null?"":employUnit);
			task.setSoundCalibratorModel(soundCalibratorModel==null?"":soundCalibratorModel);
			task.setCalibrationValue(calibrationValue==null?0:Float.parseFloat(calibrationValue));
			task.setPass(0);
			task.setTaskData(json);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板366任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_366_add_old() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_366_add_old()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String monitorType = (String) morphDynaBean.get("monitorType");
			logger.info("检测类型="+monitorType);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String weather = (String) morphDynaBean.get("weather");
			logger.info("天气="+weather);
			String deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			logger.info("检测仪器校准因子="+deviceFactor);
			String factor = (String) morphDynaBean.get("Factor");
			logger.info("137Cs校准因子="+factor);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			logger.info("受检设备名称="+checkDeviceName);
			String checkDeviceNum = (String) morphDynaBean.get("checkDeviceNum");
			logger.info("受检设备编号="+checkDeviceNum);
			String checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			logger.info("受检设备型号="+checkDeviceModel);
			String checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			logger.info("受检设备厂家="+checkDeviceVender);
			String nominalCapacity = (String) morphDynaBean.get("nominalCapacity");
			logger.info("额定容量="+nominalCapacity);
			String conditions = (String) morphDynaBean.get("conditions");
			logger.info("检测条件="+conditions);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String upstairs = (String) morphDynaBean.get("upstairs");
			logger.info("楼上="+upstairs);
			String downstairs = (String) morphDynaBean.get("downstairs");
			logger.info("楼下="+downstairs);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			String voltage = (String) morphDynaBean.get("voltage");
			logger.info("电压="+voltage);
			String current = (String) morphDynaBean.get("current");
			logger.info("电流="+current);
			String seconds = (String) morphDynaBean.get("seconds");
			logger.info("对应检测条件的s="+seconds);
			String mSeconds = (String) morphDynaBean.get("mSeconds");
			logger.info("对应检测条件的mAs="+mSeconds);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			String value = "";
			if (!voltage.equals("")) {
				value += ","+voltage+"kv";
			}
			if (!current.equals("")) {
				value += ","+current+"mA";
			}
			if (!seconds.equals("")) {
				value += ","+seconds+"s";		
			}
			if (!mSeconds.equals("")) {
				value += ","+mSeconds+"mAs";
			}
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceNum(checkDeviceNum==null?"":checkDeviceNum);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setConditions(conditions+value);
			task.setCreatetime(sdf.parse(createtime));
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setDownstairs(downstairs==null?"":downstairs);
			task.setFactor(factor==null?0:Float.parseFloat(factor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setInserttime(datetime);
			task.setMonitorType(monitorType==null?"":monitorType);
			task.setNominalCapacity(nominalCapacity==null?"":nominalCapacity);
			task.setPlace(place==null?"":place);
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setUpstairs(upstairs==null?"":upstairs);
			task.setWeather(weather==null?"":weather);
			task.setNote(note==null?"":note);
			task.setPass(0);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板366任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_366_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_366_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String monitorType = (String) morphDynaBean.get("monitorType");
			logger.info("检测类型="+monitorType);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			logger.info("检测仪器校准因子="+deviceFactor);
			String factor = (String) morphDynaBean.get("Factor");
			logger.info("137Cs校准因子="+factor);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			logger.info("受检设备名称="+checkDeviceName);
			String checkDeviceNum = (String) morphDynaBean.get("checkDeviceNum");
			logger.info("受检设备编号="+checkDeviceNum);
			String checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			logger.info("受检设备型号="+checkDeviceModel);
			String checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			logger.info("受检设备厂家="+checkDeviceVender);
			String nominalCapacity = (String) morphDynaBean.get("nominalCapacity");
			logger.info("额定容量="+nominalCapacity);
			String conditions = (String) morphDynaBean.get("conditions");
			logger.info("检测条件="+conditions);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String xRayNum = (String) morphDynaBean.get("xRayNum");
			logger.info("x射线管编号="+xRayNum);
			String item2 = (String) morphDynaBean.get("item2");
			logger.info("设备用途="+item2);
			String item3 = (String) morphDynaBean.get("item3");
			logger.info("方向1="+item3);
			String item4 = (String) morphDynaBean.get("item4");
			logger.info("方向2="+item4);
			String item5 = (String) morphDynaBean.get("item5");
			logger.info("方向3="+item5);
			String item6 = (String) morphDynaBean.get("item6");
			logger.info("头颅摄影模式="+item6);
			String item7 = (String) morphDynaBean.get("item7");
			logger.info("全景扫描模式="+item7);
			String item8 = (String) morphDynaBean.get("item8");
			logger.info("立位/站位口腔三维扫描模式="+item8);
			String item9 = (String) morphDynaBean.get("item9");
			logger.info("卧位口腔三维扫描模式="+item9);
			String item10 = (String) morphDynaBean.get("item10");
			logger.info("检测仪器探测下限="+item10);
			String other = (String) morphDynaBean.get("item11");
			logger.info("其他="+other);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			String voltage = (String) morphDynaBean.get("voltage");
			logger.info("电压="+voltage);
			String current = (String) morphDynaBean.get("current");
			logger.info("电流="+current);
			String seconds = (String) morphDynaBean.get("seconds");
			logger.info("对应检测条件的s="+seconds);
			String mSeconds = (String) morphDynaBean.get("mSeconds");
			logger.info("对应检测条件的mAs="+mSeconds);
			String testingProject = (String) morphDynaBean.get("testingProject");
			logger.info("检测项目="+testingProject);
			String address = (String) morphDynaBean.get("address");
			logger.info("检测地点="+address);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			String value = "";
			if (!voltage.contains("/") && !voltage.equals("")) {
				value += ""+voltage+"kV";
			}
			if (!current.contains("/") && !current.equals("")) {
				value += "，"+current+"mA";
			}
			if (!seconds.contains("/") && !seconds.equals("")) {
				value += "，"+seconds+"s";		
			}
			if (!mSeconds.contains("/") && !mSeconds.equals("")) {
				value += "，"+mSeconds+"mAs";
			}
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceNum(checkDeviceNum==null?"":checkDeviceNum);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setConditions(value+"（"+conditions+"）");
			task.setCreatetime(sdf.parse(createtime));
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setFactor(factor==null?0:Float.parseFloat(factor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setInserttime(datetime);
			task.setMonitorType(monitorType==null?"":monitorType);
			task.setNominalCapacity(nominalCapacity==null?"":nominalCapacity);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setxRayNum(xRayNum==null?"":xRayNum);
			task.setPass(0);
			task.setItem2(item2==null?"[]":item2);
			task.setItem3(item3==null?"":item3);
			task.setItem4(item4==null?"":item4);
			task.setItem5(item5==null?"":item5);
			task.setItem6(item6==null?"":item6);
			task.setItem7(item7==null?"":item7);
			task.setItem8(item8==null?"":item8);
			task.setItem9(item9==null?"":item9);
			task.setItem10(item10==null?"":item10);
			task.setOther(other);
			task.setTestingProject(testingProject==null?"":testingProject);
			task.setAddress(address==null?"":address);
			task.setTaskData(json);
			task.setVoltageRange1(voltage==null?"":voltage);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板3661任务和数据添加接口（全景机）
	 * @return
	 * @throws Exception
	 */
	public String app_3661_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_3661_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String testingProject = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String taskId = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String xRayNum = "";
			String nominalCapacity = "";
			String conditions = "";
			String factor = "";
			String voltage = "";
			String current = "";
			String seconds = "";
			String mSeconds = "";
			String voltage1 = "";
			String current1 = "";
			String seconds1 = "";
			String mSeconds1 = "";
			String item2 = "";
			String item3 = "";
			String item4 = "";
			String item5 = "";
			String item6 = "";
			String item7 = "";
			String item8 = "";
			String note = "";
			String conditions1 = "";
			String deviceFactor = "";
			String deviceFactor1 = "";
			
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			if (a.containsKey("projectNum")) {
				projectNum = (String) morphDynaBean.get("projectNum");
			}
			logger.info("项目编号="+projectNum);
			if (a.containsKey("checkUnitName")) {
				checkUnitName = (String) morphDynaBean.get("checkUnitName");
			}
			logger.info("受检单位名称="+checkUnitName);
			if (a.containsKey("checkUnitAddress")) {
				checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			}
			logger.info("受检单位地址="+checkUnitAddress);
			if (a.containsKey("monitorType")) {
				monitorType = (String) morphDynaBean.get("monitorType");
			}
			logger.info("检测类型="+monitorType);
			if (a.containsKey("standard")) {
				standard = (String) morphDynaBean.get("standard");
			}
			logger.info("检测依据="+standard);
			if (a.containsKey("address")) {
				address = (String) morphDynaBean.get("address");
			}
			logger.info("检测地点="+address);
			if (a.containsKey("testingProject")) {
				testingProject = (String) morphDynaBean.get("testingProject");
			}
			logger.info("检测项目="+testingProject);
			if (a.containsKey("xRayNum")) {
				xRayNum = (String) morphDynaBean.get("xRayNum");
			}
			logger.info("x射线管编号="+xRayNum);
			if (a.containsKey("checkDeviceName")) {
				checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			}
			logger.info("受检设备名称="+checkDeviceName);
			if (a.containsKey("checkDeviceNum")) {
				checkDeviceNum = (String) morphDynaBean.get("checkDeviceNum");
			}
			logger.info("受检设备编号="+checkDeviceNum);
			if (a.containsKey("checkDeviceModel")) {
				checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			}
			logger.info("受检设备型号="+checkDeviceModel);
			if (a.containsKey("checkDeviceVender")) {
				checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			}
			logger.info("受检设备厂家="+checkDeviceVender);
			if (a.containsKey("Factor")) {
				factor = (String) morphDynaBean.get("Factor");
			}
			logger.info("137Cs校准因子="+factor);
			if (a.containsKey("nominalCapacity")) {
				nominalCapacity = (String) morphDynaBean.get("nominalCapacity");
			}
			logger.info("额定容量="+nominalCapacity);
			if (a.containsKey("conditions")) {
				conditions = (String) morphDynaBean.get("conditions");
			}
			logger.info("全景扫描检测条件="+conditions);
			if (a.containsKey("conditions1")) {
				conditions1 = (String) morphDynaBean.get("conditions1");
			}
			logger.info("头颅摄影检测条件="+conditions1);
			if (a.containsKey("place")) {
				place = (String) morphDynaBean.get("place");
			}
			logger.info("检测场所="+place);
			if (a.containsKey("DeviceFactor")) {
				deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			}
			logger.info("全景扫描校准因子="+deviceFactor);
			if (a.containsKey("DeviceFactor1")) {
				deviceFactor1 = (String) morphDynaBean.get("DeviceFactor1");
			}
			logger.info("头颅摄影校准因子="+deviceFactor1);
			if (a.containsKey("temperature")) {
				temperature = (String) morphDynaBean.get("temperature");
			}
			logger.info("温度="+temperature);
			if (a.containsKey("humidity")) {
				humidity = (String) morphDynaBean.get("humidity");
			}
			logger.info("湿度="+humidity);
			if (a.containsKey("createtime")) {
				createtime = (String) morphDynaBean.get("createtime");
			}
			logger.info("测量时间="+createtime);
			if (a.containsKey("id")) {
				taskId = (String) morphDynaBean.get("id");
			}
			logger.info("任务id="+taskId);
			if (a.containsKey("voltage")) {
				voltage = (String) morphDynaBean.get("voltage");
			}
			logger.info("电压="+voltage);
			if (a.containsKey("current")) {
				current = (String) morphDynaBean.get("current");
			}
			logger.info("电流="+current);
			if (a.containsKey("seconds")) {
				seconds = (String) morphDynaBean.get("seconds");
			}
			logger.info("对应检测条件的s="+seconds);
			if (a.containsKey("mSeconds")) {
				mSeconds = (String) morphDynaBean.get("mSeconds");
			}
			logger.info("对应检测条件的mAs="+mSeconds);
			if (a.containsKey("voltage1")) {
				voltage1 = (String) morphDynaBean.get("voltage1");
			}
			logger.info("电压1="+voltage1);
			if (a.containsKey("current1")) {
				current1 = (String) morphDynaBean.get("current1");
			}
			logger.info("电流1="+current1);
			if (a.containsKey("seconds1")) {
				seconds1 = (String) morphDynaBean.get("seconds1");
			}
			logger.info("对应检测条件的s1="+seconds1);
			if (a.containsKey("mSeconds1")) {
				mSeconds1 = (String) morphDynaBean.get("mSeconds1");
			}
			logger.info("对应检测条件的mAs1="+mSeconds1);
			if (a.containsKey("item2")) {
				item2 = (String) morphDynaBean.get("item2");
			}
			logger.info("设备用途="+item2);
			if (a.containsKey("item3")) {
				item3 = (String) morphDynaBean.get("item3");
			}
			logger.info("射线照射方向="+item3);
			if (a.containsKey("item4")) {
				item4 = (String) morphDynaBean.get("item4");
			}
			logger.info("头颅摄影方向="+item4);
			if (a.containsKey("item5")) {
				item5 = (String) morphDynaBean.get("item5");
			}
			logger.info("全景扫描方向1="+item5);
			if (a.containsKey("item6")) {
				item6 = (String) morphDynaBean.get("item6");
			}
			logger.info("全景扫描方向2="+item6);
			if (a.containsKey("item7")) {
				item7 = (String) morphDynaBean.get("item7");
			}
			logger.info("全景扫描方向3="+item7);
			if (a.containsKey("item8")) {
				item8 = (String) morphDynaBean.get("item8");
			}
			logger.info("全景扫描方向4="+item8);
			if (a.containsKey("note")) {
				note = (String) morphDynaBean.get("note");
			}
			logger.info("备注="+note);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			String value = "";
			if (!voltage.contains("/") && !voltage.equals("")) {
				value += ""+voltage+"kV";
			}
			if (!current.contains("/") && !current.equals("")) {
				value += "，"+current+"mA";
			}
			if (!seconds.contains("/") && !seconds.equals("")) {
				value += "，"+seconds+"s";		
			}
			if (!mSeconds.contains("/") && !mSeconds.equals("")) {
				value += "，"+mSeconds+"mAs";
			}
			String value1 = "";
			if (!voltage1.contains("/") && !voltage1.equals("")) {
				value1 += ""+voltage1+"kV";
			}
			if (!current1.contains("/") && !current1.equals("")) {
				value1 += "，"+current1+"mA";
			}
			if (!seconds1.contains("/") && !seconds1.equals("")) {
				value1 += "，"+seconds1+"s";		
			}
			if (!mSeconds1.contains("/") && !mSeconds1.equals("")) {
				value1 += "，"+mSeconds1+"mAs";
			}
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceNum(checkDeviceNum==null?"":checkDeviceNum);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setCreatetime(sdf.parse(createtime));
			task.setFactor(factor==null?0:Float.parseFloat(factor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setInserttime(datetime);
			task.setMonitorType(monitorType==null?"":monitorType);
			task.setNominalCapacity(nominalCapacity==null?"":nominalCapacity);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setxRayNum(xRayNum==null?"":xRayNum);
			task.setPass(0);
			task.setItem2(item2==null?"":item2);
			task.setItem3(item3==null?"":item3);
			task.setItem4(item4==null?"":item4);
			task.setItem5(item5==null?"":item5);
			task.setItem6(item6==null?"":item6);
			task.setItem7(item7==null?"":item7);
			task.setItem8(item8==null?"":item8);
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setDeviceFactor1(deviceFactor1==null?0:Float.parseFloat(deviceFactor1));
			task.setNote(note==null?"":note);
			task.setTestingProject(testingProject==null?"":testingProject);
			task.setAddress(address==null?"":address);
			task.setTaskData(json);
			
			if (conditions != null && !conditions.equals("")) {
				task.setConditions(value+"（"+conditions+"）");
			}else{
				task.setConditions(value);
			}
			if (conditions != null && !conditions.equals("")) {
				task.setConditions1(value1+"（"+conditions1+"）");
			}else{
				task.setConditions1(value1);
			}
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板367任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_367_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_367_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String monitorType = (String) morphDynaBean.get("monitorType");
			logger.info("检测类型="+monitorType);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String weather = (String) morphDynaBean.get("weather");
			logger.info("天气="+weather);
			String deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			logger.info("检测仪器校准因子="+deviceFactor);
			String factor = (String) morphDynaBean.get("Factor");
			logger.info("137Cs校准因子="+factor);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			logger.info("受检设备名称="+checkDeviceName);
			String checkDeviceNum = (String) morphDynaBean.get("checkDeviceNum");
			logger.info("受检设备编号="+checkDeviceNum);
			String checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			logger.info("受检设备型号="+checkDeviceModel);
			String checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			logger.info("受检设备厂家="+checkDeviceVender);
			String nominalCapacity = (String) morphDynaBean.get("nominalCapacity");
			logger.info("额定容量="+nominalCapacity);
			String conditions = (String) morphDynaBean.get("conditions");
			logger.info("检测条件="+conditions);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String irradiation = (String) morphDynaBean.get("irradiation");
			logger.info("照射野="+irradiation);
			String upstairs = (String) morphDynaBean.get("upstairs");
			logger.info("楼上="+upstairs);
			String downstairs = (String) morphDynaBean.get("downstairs");
			logger.info("楼下="+downstairs);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String voltageRange1 = (String) morphDynaBean.get("voltageRange1");
			logger.info("常用电压范围1="+voltageRange1);
			String current1 = (String) morphDynaBean.get("current1");
			logger.info("常用电流1="+current1);
			String exposureTimeRange1 = (String) morphDynaBean.get("exposureTimeRange1");
			logger.info("曝光时间范围1="+exposureTimeRange1);
			String weekWork = (String) morphDynaBean.get("weekWork");
			logger.info("每周工作天数="+weekWork);
			String shooting1 = (String) morphDynaBean.get("shooting1");
			logger.info("每天拍片1="+shooting1);
			String voltageRange2 = (String) morphDynaBean.get("voltageRange2");
			logger.info("常用电压范围2="+voltageRange2);
			String current2 = (String) morphDynaBean.get("current2");
			logger.info("常用电流2="+current2);
			String exposureTimeRange2 = (String) morphDynaBean.get("exposureTimeRange2");
			logger.info("曝光时间范围2="+exposureTimeRange2);
			String shooting2 = (String) morphDynaBean.get("shooting2");
			logger.info("每天拍片2="+shooting2);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			String voltage = (String) morphDynaBean.get("voltage");
			logger.info("电压="+voltage);
			String current = (String) morphDynaBean.get("current");
			logger.info("电流="+current);
			String seconds = (String) morphDynaBean.get("seconds");
			logger.info("对应检测条件的s="+seconds);
			String mSeconds = (String) morphDynaBean.get("mSeconds");
			logger.info("对应检测条件的mAs="+mSeconds);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			String value = "";
			if (!voltage.equals("/") && !voltage.equals("")) {
				value += ""+voltage+"kV";
			}
			if (!current.equals("/") && !current.equals("")) {
				value += "，"+current+"mA";
			}
			if (!seconds.equals("/") && !seconds.equals("")) {
				value += "，"+seconds+"s";		
			}
			if (!seconds.equals("/") && !mSeconds.equals("")) {
				value += "，"+mSeconds+"mAs";
			}
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceNum(checkDeviceNum==null?"":checkDeviceNum);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setConditions(value+"（"+conditions+"）");
			task.setCreatetime(sdf.parse(createtime));
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setFactor(factor==null?0:Float.parseFloat(factor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setDownstairs(downstairs==null?"":downstairs);
			task.setInserttime(datetime);
			task.setIrradiation(irradiation==null?"":irradiation);
			task.setMonitorType(monitorType==null?"":monitorType);
			task.setNominalCapacity(nominalCapacity==null?"":nominalCapacity);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setUpstairs(upstairs==null?"":upstairs);
			task.setWeather(weather==null?"":weather);
			task.setVoltageRange1(voltageRange1==null?"":voltageRange1);
			task.setCurrent1(current1==null?"":current1);
			task.setExposureTimeRange1(exposureTimeRange1==null?"":exposureTimeRange1);
			task.setWeekWork(weekWork==null?"":weekWork);
			task.setShooting1(shooting1==null?"":shooting1);
			task.setVoltageRange2(voltageRange2==null?"":voltageRange2);
			task.setCurrent2(current2==null?"":current2);
			task.setExposureTimeRange2(exposureTimeRange2==null?"":exposureTimeRange2);
			task.setShooting2(shooting2==null?"":shooting2);
			task.setNote(note==null?"":note);
			task.setPass(0);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
			
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板368任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_368_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_368_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String monitorType = (String) morphDynaBean.get("monitorType");
			logger.info("检测类型="+monitorType);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String weather = (String) morphDynaBean.get("weather");
			logger.info("天气="+weather);
			String deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			logger.info("检测仪器校准因子="+deviceFactor);
			String factor = (String) morphDynaBean.get("Factor");
			logger.info("137Cs校准因子="+factor);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			logger.info("受检设备名称="+checkDeviceName);
			String checkDeviceNum = (String) morphDynaBean.get("checkDeviceNum");
			logger.info("受检设备编号="+checkDeviceNum);
			String checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			logger.info("受检设备型号="+checkDeviceModel);
			String checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			logger.info("受检设备厂家="+checkDeviceVender);
			String nominalCapacity = (String) morphDynaBean.get("nominalCapacity");
			logger.info("额定容量="+nominalCapacity);
			String conditions = (String) morphDynaBean.get("conditions");
			logger.info("检测条件="+conditions);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String upstairs = (String) morphDynaBean.get("upstairs");
			logger.info("楼上="+upstairs);
			String downstairs = (String) morphDynaBean.get("downstairs");
			logger.info("楼下="+downstairs);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String wireHarness1 = (String) morphDynaBean.get("wireHarness1");
			logger.info("有用线束朝向1="+wireHarness1);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			String voltage = (String) morphDynaBean.get("voltage");
			logger.info("电压="+voltage);
			String current = (String) morphDynaBean.get("current");
			logger.info("电流="+current);
			String seconds = (String) morphDynaBean.get("seconds");
			logger.info("对应检测条件的s="+seconds);
			String mSeconds = (String) morphDynaBean.get("mSeconds");
			logger.info("对应检测条件的mAs="+mSeconds);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			String value = "";
			if (!voltage.equals("/") && !voltage.equals("")) {
				value += ""+voltage+"kV";
			}
			if (!current.equals("/") && !current.equals("")) {
				value += "，"+current+"mA";
			}
			if (!seconds.equals("/") && !seconds.equals("")) {
				value += "，"+seconds+"s";		
			}
			if (!mSeconds.equals("/") && !mSeconds.equals("")) {
				value += "，"+mSeconds+"mAs";
			}
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceNum(checkDeviceNum==null?"":checkDeviceNum);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setConditions(conditions+value);
			task.setCreatetime(sdf.parse(createtime));
			task.setDownstairs(downstairs==null?"":downstairs);
			task.setInserttime(datetime);
			task.setMonitorType(monitorType==null?"":monitorType);
			task.setNominalCapacity(nominalCapacity==null?"":nominalCapacity);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setUpstairs(upstairs==null?"":upstairs);
			task.setWeather(weather==null?"":weather);
			task.setNote(note==null?"":note);
			task.setWireHarness1(wireHarness1==null?"":wireHarness1);
			task.setPass(0);
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setFactor(factor==null?0:Float.parseFloat(factor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setTaskData(json);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板369任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_369_add_old() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_369_add_old()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String monitorType = (String) morphDynaBean.get("monitorType");
			logger.info("检测类型="+monitorType);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String weather = (String) morphDynaBean.get("weather");
			logger.info("天气="+weather);
			String deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			logger.info("检测仪器校准因子="+deviceFactor);
			String factor = (String) morphDynaBean.get("Factor");
			logger.info("137Cs校准因子="+factor);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			logger.info("受检设备名称="+checkDeviceName);
			String checkDeviceNum = (String) morphDynaBean.get("checkDeviceNum");
			logger.info("受检设备编号="+checkDeviceNum);
			String checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			logger.info("受检设备型号="+checkDeviceModel);
			String checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			logger.info("受检设备厂家="+checkDeviceVender);
			String nominalCapacity = (String) morphDynaBean.get("nominalCapacity");
			logger.info("额定容量="+nominalCapacity);
			String conditions = (String) morphDynaBean.get("conditions");
			logger.info("检测条件="+conditions);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String irradiation = (String) morphDynaBean.get("irradiation");
			logger.info("照射野="+irradiation);
			String upstairs = (String) morphDynaBean.get("upstairs");
			logger.info("楼上="+upstairs);
			String downstairs = (String) morphDynaBean.get("downstairs");
			logger.info("楼下="+downstairs);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String voltageRange1 = (String) morphDynaBean.get("voltageRange1");
			logger.info("常用电压范围1="+voltageRange1);
			String current1 = (String) morphDynaBean.get("current1");
			logger.info("常用电流1="+current1);
			String exposureTimeRange1 = (String) morphDynaBean.get("exposureTimeRange1");
			logger.info("曝光时间范围1="+exposureTimeRange1);
			String weekWork = (String) morphDynaBean.get("weekWork");
			logger.info("每周工作天数="+weekWork);
			String shooting1 = (String) morphDynaBean.get("shooting1");
			logger.info("每天拍片1="+shooting1);
			String voltageRange2 = (String) morphDynaBean.get("voltageRange2");
			logger.info("常用电压范围2="+voltageRange2);
			String current2 = (String) morphDynaBean.get("current2");
			logger.info("常用电流2="+current2);
			String exposureTimeRange2 = (String) morphDynaBean.get("exposureTimeRange2");
			logger.info("曝光时间范围2="+exposureTimeRange2);
			String shooting2 = (String) morphDynaBean.get("shooting2");
			logger.info("每天拍片2="+shooting2);
			String wireHarness1 = (String) morphDynaBean.get("wireHarness1");
			logger.info("有用线束朝向1="+wireHarness1);
			String wireHarness2 = (String) morphDynaBean.get("wireHarness2");
			logger.info("有用线束朝向2="+wireHarness2);
			String wireHarness3 = (String) morphDynaBean.get("wireHarness3");
			logger.info("有用线束朝向3="+wireHarness3);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			String voltage = (String) morphDynaBean.get("voltage");
			logger.info("电压="+voltage);
			String current = (String) morphDynaBean.get("current");
			logger.info("电流="+current);
			String seconds = (String) morphDynaBean.get("seconds");
			logger.info("对应检测条件的s="+seconds);
			String mSeconds = (String) morphDynaBean.get("mSeconds");
			logger.info("对应检测条件的mAs="+mSeconds);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			String value = "";
			if (!voltage.equals("")) {
				value += ","+voltage+"kv";
			}
			if (!current.equals("")) {
				value += ","+current+"mA";
			}
			if (!seconds.equals("")) {
				value += ","+seconds+"s";		
			}
			if (!mSeconds.equals("")) {
				value += ","+mSeconds+"mAs";
			}
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceNum(checkDeviceNum==null?"":checkDeviceNum);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setConditions(conditions+value);
			task.setCreatetime(sdf.parse(createtime));
			task.setDownstairs(downstairs==null?"":downstairs);
			task.setInserttime(datetime);
			task.setIrradiation(irradiation==null?"":irradiation);
			task.setMonitorType(monitorType==null?"":monitorType);
			task.setNominalCapacity(nominalCapacity==null?"":nominalCapacity);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setUpstairs(upstairs==null?"":upstairs);
			task.setWeather(weather==null?"":weather);
			task.setVoltageRange1(voltageRange1==null?"":voltageRange1);
			task.setCurrent1(current1==null?"":current1);
			task.setExposureTimeRange1(exposureTimeRange1==null?"":exposureTimeRange1);
			task.setWeekWork(weekWork==null?"":weekWork);
			task.setShooting1(shooting1==null?"":shooting1);
//			task.setVoltageRange2(voltageRange2==null?"":voltageRange2);
//			task.setCurrent2(current2==null?"":current2);
//			task.setExposureTimeRange2(exposureTimeRange2==null?"":exposureTimeRange2);
//			task.setShooting2(shooting2==null?"":shooting2);
			task.setNote(note==null?"":note);
			task.setWireHarness1(wireHarness1==null?"":wireHarness1);
			task.setWireHarness2(wireHarness2==null?"":wireHarness2);
			task.setWireHarness3(wireHarness3==null?"":wireHarness3);
			task.setPass(0);
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setFactor(factor==null?0:Float.parseFloat(factor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板369任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_369_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_369_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String testingProject = "";
			String deviceFactor = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String note = "";
			String taskId = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String xRayNum = "";
			String nominalCapacity = "";
			String nominalCapacity1 = "";
			String conditions = "";
			String factor = "";
			String voltage = "";
			String current = "";
			String seconds = "";
			String mSeconds = "";
			String voltageRange1 = "";
			String current1 = "";
			String exposureTimeRange1 = "";
			String weekWork = "";
			String shooting1 = "";
			String item2 = "";
			String item3 = "";
			String item4 = "";
			String item5 = "";
			String item6 = "";
			String other = "";
			
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			if (a.containsKey("projectNum")) {
				projectNum = (String) morphDynaBean.get("projectNum");
			}
			logger.info("项目编号="+projectNum);
			if (a.containsKey("checkUnitName")) {
				checkUnitName = (String) morphDynaBean.get("checkUnitName");
			}
			logger.info("受检单位名称="+checkUnitName);
			if (a.containsKey("checkUnitAddress")) {
				checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			}
			logger.info("受检单位地址="+checkUnitAddress);
			if (a.containsKey("monitorType")) {
				monitorType = (String) morphDynaBean.get("monitorType");
			}
			logger.info("检测类型="+monitorType);
			if (a.containsKey("standard")) {
				standard = (String) morphDynaBean.get("standard");
			}
			logger.info("检测依据="+standard);
			if (a.containsKey("address")) {
				address = (String) morphDynaBean.get("address");
			}
			logger.info("检测地点="+address);
			if (a.containsKey("testingProject")) {
				testingProject = (String) morphDynaBean.get("testingProject");
			}
			logger.info("检测项目="+testingProject);
			if (a.containsKey("xRayNum")) {
				xRayNum = (String) morphDynaBean.get("xRayNum");
			}
			logger.info("x射线管编号="+xRayNum);
			if (a.containsKey("checkDeviceName")) {
				checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			}
			logger.info("受检设备名称="+checkDeviceName);
			if (a.containsKey("checkDeviceNum")) {
				checkDeviceNum = (String) morphDynaBean.get("checkDeviceNum");
			}
			logger.info("受检设备编号="+checkDeviceNum);
			if (a.containsKey("checkDeviceModel")) {
				checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			}
			logger.info("受检设备型号="+checkDeviceModel);
			if (a.containsKey("checkDeviceVender")) {
				checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			}
			logger.info("受检设备厂家="+checkDeviceVender);
			if (a.containsKey("DeviceFactor")) {
				deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			}
			logger.info("检测仪器校准因子="+deviceFactor);
			if (a.containsKey("Factor")) {
				factor = (String) morphDynaBean.get("Factor");
			}
			logger.info("137Cs校准因子="+factor);
			if (a.containsKey("nominalCapacity")) {
				nominalCapacity = (String) morphDynaBean.get("nominalCapacity");
			}
			logger.info("额定容量="+nominalCapacity);
			if (a.containsKey("nominalCapacity1")) {
				nominalCapacity1 = (String) morphDynaBean.get("nominalCapacity1");
			}
			logger.info("额定容量1="+nominalCapacity1);
			if (a.containsKey("conditions")) {
				conditions = (String) morphDynaBean.get("conditions");
			}
			logger.info("检测条件="+conditions);
			if (a.containsKey("place")) {
				place = (String) morphDynaBean.get("place");
			}
			logger.info("检测场所="+place);
			if (a.containsKey("temperature")) {
				temperature = (String) morphDynaBean.get("temperature");
			}
			logger.info("温度="+temperature);
			if (a.containsKey("humidity")) {
				humidity = (String) morphDynaBean.get("humidity");
			}
			logger.info("湿度="+humidity);
			if (a.containsKey("createtime")) {
				createtime = (String) morphDynaBean.get("createtime");
			}
			logger.info("测量时间="+createtime);
			if (a.containsKey("note")) {
				note = (String) morphDynaBean.get("note");
			}
			logger.info("备注="+note);
			if (a.containsKey("voltageRange1")) {
				voltageRange1 = (String) morphDynaBean.get("voltageRange1");
			}
			logger.info("常用最大管电压="+voltageRange1);
			if (a.containsKey("current1")) {
				current1 = (String) morphDynaBean.get("current1");
			}
			logger.info("常用最大管电流="+current1);
			if (a.containsKey("exposureTimeRange1")) {
				exposureTimeRange1 = (String) morphDynaBean.get("exposureTimeRange1");
			}
			logger.info("单次最长曝光时间="+exposureTimeRange1);
			if (a.containsKey("weekWork")) {
				weekWork = (String) morphDynaBean.get("weekWork");
			}
			logger.info("每周工作天数="+weekWork);
			if (a.containsKey("shooting1")) {
				shooting1 = (String) morphDynaBean.get("shooting1");
			}
			logger.info("每天最多曝光="+shooting1);
			if (a.containsKey("id")) {
				taskId = (String) morphDynaBean.get("id");
			}
			logger.info("任务id="+taskId);
			if (a.containsKey("voltage")) {
				voltage = (String) morphDynaBean.get("voltage");
			}
			logger.info("电压="+voltage);
			if (a.containsKey("current")) {
				current = (String) morphDynaBean.get("current");
			}
			logger.info("电流="+current);
			if (a.containsKey("seconds")) {
				seconds = (String) morphDynaBean.get("seconds");
			}
			logger.info("对应检测条件的s="+seconds);
			if (a.containsKey("mSeconds")) {
				mSeconds = (String) morphDynaBean.get("mSeconds");
			}
			logger.info("对应检测条件的mAs="+mSeconds);
			if (a.containsKey("item2")) {
				item2 = (String) morphDynaBean.get("item2");
			}
			logger.info("设备用途="+item2);
			if (a.containsKey("item3")) {
				item3 = (String) morphDynaBean.get("item3");
			}
			logger.info("摄影模式="+item3);
			if (a.containsKey("item4")) {
				item4 = (String) morphDynaBean.get("item4");
			}
			logger.info("方向1="+item4);
			if (a.containsKey("item5")) {
				item5 = (String) morphDynaBean.get("item5");
			}
			logger.info("方向2="+item5);
			if (a.containsKey("item6")) {
				item6 = (String) morphDynaBean.get("item6");
			}
			logger.info("方向3="+item6);
			if (a.containsKey("other")) {
				other = (String) morphDynaBean.get("other");
			}
			logger.info("其他="+other);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			String value = "";
			if (!voltage.equals("/") && !voltage.equals("")) {
				value += ""+voltage+"kV";
			}
			if (!current.equals("/") && !current.equals("")) {
				value += "，"+current+"mA";
			}
			if (!seconds.equals("/") && !seconds.equals("")) {
				value += "，"+seconds+"s";		
			}
			if (!mSeconds.equals("/") && !mSeconds.equals("")) {
				value += "，"+mSeconds+"mAs";
			}
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceNum(checkDeviceNum==null?"":checkDeviceNum);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setConditions(value+"（"+conditions+"）");
			task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
			task.setInserttime(datetime);
			task.setMonitorType(monitorType==null?"":monitorType);
			task.setNominalCapacity(nominalCapacity==null?"":nominalCapacity);
			task.setNominalCapacity1(nominalCapacity1==null?"":nominalCapacity1);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setVoltageRange1(voltageRange1==null?"":voltageRange1);
			task.setCurrent1(current1==null?"":current1);
			task.setExposureTimeRange1(exposureTimeRange1==null?"":exposureTimeRange1);
			task.setWeekWork(weekWork==null?"":weekWork);
			task.setShooting1(shooting1==null?"":shooting1);
			task.setNote(note==null?"":note);
			task.setPass(0);
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setFactor(factor==null?0:Float.parseFloat(factor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setAddress(address==null?"":address);
			task.setTestingProject(testingProject==null?"":testingProject);
			task.setxRayNum(xRayNum==null?"":xRayNum);
			task.setItem2(item2==null?"":item2);
			task.setItem3(item3==null?"":item3);
			task.setItem4(item4==null?"":item4);
			task.setItem5(item5==null?"":item5);
			task.setItem6(item6==null?"":item6);
			task.setOther(other==null?"":other);
			task.setTaskData(json);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板370任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_370_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_370_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String monitorType = (String) morphDynaBean.get("monitorType");
			logger.info("检测类型="+monitorType);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String weather = (String) morphDynaBean.get("weather");
			logger.info("天气="+weather);
			String deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			logger.info("检测仪器校准因子="+deviceFactor);
			String factor = (String) morphDynaBean.get("Factor");
			logger.info("137Cs校准因子="+factor);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			logger.info("受检设备名称="+checkDeviceName);
			String checkDeviceNum = (String) morphDynaBean.get("checkDeviceNum");
			logger.info("受检设备编号="+checkDeviceNum);
			String checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			logger.info("受检设备型号="+checkDeviceModel);
			String checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			logger.info("受检设备厂家="+checkDeviceVender);
			String nominalCapacity = (String) morphDynaBean.get("nominalCapacity");
			logger.info("额定容量="+nominalCapacity);
			String computerRoom = (String) morphDynaBean.get("computerRoom");
			logger.info("机房防护检测条件="+computerRoom);
			String performer = (String) morphDynaBean.get("performer");
			logger.info("术者位检测条件="+performer);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String upstairs = (String) morphDynaBean.get("upstairs");
			logger.info("楼上="+upstairs);
			String downstairs = (String) morphDynaBean.get("downstairs");
			logger.info("楼下="+downstairs);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String wireHarness1 = (String) morphDynaBean.get("wireHarness1");
			logger.info("有用线束朝向1="+wireHarness1);
			String wireHarness2 = (String) morphDynaBean.get("wireHarness2");
			logger.info("有用线束朝向2="+wireHarness2);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceNum(checkDeviceNum==null?"":checkDeviceNum);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setCreatetime(sdf.parse(createtime));
			task.setDownstairs(downstairs==null?"":downstairs);
			task.setInserttime(datetime);
			task.setMonitorType(monitorType==null?"":monitorType);
			task.setNominalCapacity(nominalCapacity==null?"":nominalCapacity);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setUpstairs(upstairs==null?"":upstairs);
			task.setWeather(weather==null?"":weather);
			task.setNote(note==null?"":note);
			task.setWireHarness1(wireHarness1==null?"":wireHarness1);
			task.setWireHarness2(wireHarness2==null?"":wireHarness2);
			task.setComputerRoom(computerRoom==null?"":computerRoom);
			task.setPerformer(performer==null?"":performer);
			task.setPass(0);
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setFactor(factor==null?0:Float.parseFloat(factor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setTaskData(json);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板371任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_371_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_371_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String weather = (String) morphDynaBean.get("weather");
			logger.info("天气="+weather);
			String deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			logger.info("检测仪器校准因子="+deviceFactor);
			String checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			logger.info("受检设备名称="+checkDeviceName);
			String checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			logger.info("受检设备型号="+checkDeviceModel);
			String checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			logger.info("受检设备厂家="+checkDeviceVender);
			String nuclideName = (String) morphDynaBean.get("NuclideName");
			logger.info("核素名称="+nuclideName);
			String currentActivity = (String) morphDynaBean.get("currentActivity");
			logger.info("核素活度="+currentActivity);
			String nuclideNum = (String) morphDynaBean.get("nuclideNum");
			logger.info("核素编码="+nuclideNum);
			String nuclideVender = (String) morphDynaBean.get("nuclideVender");
			logger.info("核素生产厂家="+nuclideVender);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setCreatetime(sdf.parse(createtime));
			task.setInserttime(datetime);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setWeather(weather==null?"":weather);
			task.setNote(note==null?"":note);
			task.setNuclideName(nuclideName==null?"":nuclideName);
			task.setNuclideNum(nuclideNum==null?"":nuclideNum);
			task.setNuclideVender(nuclideVender==null?"":nuclideVender);
			task.setCurrentActivity(currentActivity==null?"":currentActivity);
			task.setPass(0);
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板372任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_372_add_old() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_372_add_old()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String weather = (String) morphDynaBean.get("weather");
			logger.info("天气="+weather);
			String deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			logger.info("检测仪器校准因子="+deviceFactor);
			String factor = (String) morphDynaBean.get("Factor");
			logger.info("137Cs校准因子="+factor);
			String checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			logger.info("受检设备名称="+checkDeviceName);
			String checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			logger.info("受检设备型号="+checkDeviceModel);
			String checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			logger.info("受检设备厂家="+checkDeviceVender);
			String nuclideName = (String) morphDynaBean.get("NuclideName");
			logger.info("核素名称="+nuclideName);
			String currentActivity = (String) morphDynaBean.get("currentActivity");
			logger.info("核素活度="+currentActivity);
			String nuclideNum = (String) morphDynaBean.get("nuclideNum");
			logger.info("核素编码="+nuclideNum);
			String nuclideVender = (String) morphDynaBean.get("nuclideVender");
			logger.info("核素生产厂家="+nuclideVender);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setCreatetime(sdf.parse(createtime));
			task.setInserttime(datetime);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setWeather(weather==null?"":weather);
			task.setNote(note==null?"":note);
			task.setNuclideName(nuclideName==null?"":nuclideName);
			task.setNuclideNum(nuclideNum==null?"":nuclideNum);
			task.setNuclideVender(nuclideVender==null?"":nuclideVender);
			task.setCurrentActivity(currentActivity==null?"":currentActivity);
			task.setPass(0);
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setFactor(factor==null?0:Float.parseFloat(factor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setNominalCapacity("");
			task.setCheckDeviceNum("");
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板372任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_372_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_372_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = formatString(new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8")).replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String objectWork = "";
			String standard = "";
			String place = "";
			String address = "";
			String testingProject = "";
			String deviceFactor = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String note = "";
			String taskId = "";
			
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			if (a.containsKey("projectNum")) {
				projectNum = (String) morphDynaBean.get("projectNum");
			}
			logger.info("项目编号="+projectNum);
			if (a.containsKey("checkUnitName")) {
				checkUnitName = (String) morphDynaBean.get("checkUnitName");
			}
			logger.info("受检单位名称="+checkUnitName);
			if (a.containsKey("checkUnitAddress")) {
				checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			}
			logger.info("受检单位地址="+checkUnitAddress);
			if (a.containsKey("objectWork")) {
				objectWork = (String) morphDynaBean.get("objectWork");
			}
			logger.info("检测对象及工况="+objectWork);
			if (a.containsKey("standard")) {
				standard = (String) morphDynaBean.get("standard");
			}
			logger.info("检测依据="+standard);
			if (a.containsKey("place")) {
				place = (String) morphDynaBean.get("place");
			}
			logger.info("检测场所="+place);
			if (a.containsKey("address")) {
				address = (String) morphDynaBean.get("address");
			}
			logger.info("检测地点="+address);
			if (a.containsKey("testingProject")) {
				testingProject = (String) morphDynaBean.get("testingProject");
			}
			logger.info("检测项目="+testingProject);
			if (a.containsKey("DeviceFactor")) {
				deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			}
			logger.info("检测仪器校准因子="+deviceFactor);
			if (a.containsKey("temperature")) {
				temperature = (String) morphDynaBean.get("temperature");
			}
			logger.info("温度="+temperature);
			if (a.containsKey("humidity")) {
				humidity = (String) morphDynaBean.get("humidity");
			}
			logger.info("湿度="+humidity);
			if (a.containsKey("createtime")) {
				createtime = (String) morphDynaBean.get("createtime");
			}
			logger.info("测量时间="+createtime);
			if (a.containsKey("note")) {
				note = (String) morphDynaBean.get("note");
			}
			logger.info("备注="+note);
			if (a.containsKey("id")) {
				taskId = (String) morphDynaBean.get("id");
			}
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
			task.setInserttime(datetime);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setNote(note==null?"":note);
			task.setPass(0);
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setAddress(address==null?"":address);
			task.setObjectWork(objectWork==null?"":objectWork);
			task.setTestingProject(testingProject==null?"":testingProject);
			task.setMonitorType("本底检测");
			task.setNominalCapacity("");
			task.setCheckDeviceNum("");
			task.setTaskData(json);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板3721任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_3721_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_3721_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String testingProject = "";
			String deviceFactor = "";
			String temperature = "";
			String humidity = "";
			String createtime = "";
			String other = "";
			String taskId = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String factor = "";
			String note = "";
			String nuclideName = "";
			String currentActivity = "";
			String nuclideNum = "";
			String nuclideVender = "";
			String item2 = "";
			String item3 = "";
			String nuclideTime = "";
			
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			if (a.containsKey("projectNum")) {
				projectNum = (String) morphDynaBean.get("projectNum");
			}
			logger.info("项目编号="+projectNum);
			if (a.containsKey("monitorType")) {
		    	monitorType = (String) morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
			if (a.containsKey("checkUnitName")) {
				checkUnitName = (String) morphDynaBean.get("checkUnitName");
			}
			logger.info("受检单位名称="+checkUnitName);
			if (a.containsKey("checkUnitAddress")) {
				checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			}
			logger.info("受检单位地址="+checkUnitAddress);
			if (a.containsKey("place")) {
				place = (String) morphDynaBean.get("place");
			}
			logger.info("检测场所="+place);
			if (a.containsKey("standard")) {
				standard = (String) morphDynaBean.get("standard");
			}
			logger.info("检测依据="+standard);
//			if (a.containsKey("DeviceFactor")) {
//				deviceFactor = (String) morphDynaBean.get("DeviceFactor");
//			}
//			logger.info("检测仪器校准因子="+deviceFactor);
			if (a.containsKey("Factor")) {
				factor = (String) morphDynaBean.get("Factor");
			}
			logger.info("137Cs校准因子="+factor);
			if (a.containsKey("checkDeviceName")) {
				checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			}
			logger.info("受检设备名称="+checkDeviceName);
			if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String) morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
			if (a.containsKey("checkDeviceModel")) {
				checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			}
			logger.info("受检设备型号="+checkDeviceModel);
			if (a.containsKey("checkDeviceVender")) {
				checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			}
			logger.info("受检设备厂家="+checkDeviceVender);
			if (a.containsKey("NuclideName")) {
				nuclideName = (String) morphDynaBean.get("NuclideName");
			}
			logger.info("核素名称="+nuclideName);
			if (a.containsKey("currentActivity")) {
				currentActivity = (String) morphDynaBean.get("currentActivity");
			}
			logger.info("核素活度="+currentActivity);
			if (a.containsKey("nuclideNum")) {
				nuclideNum = (String) morphDynaBean.get("nuclideNum");
			}
			logger.info("核素编码="+nuclideNum);
			if (a.containsKey("nuclideVender")) {
				nuclideVender = (String) morphDynaBean.get("nuclideVender");
			}
			logger.info("核素生产厂家="+nuclideVender);
			if (a.containsKey("nuclideTime")) {
				nuclideTime = (String) morphDynaBean.get("nuclideTime");
			}
			logger.info("核素日期="+nuclideTime);
			if (a.containsKey("temperature")) {
				temperature = (String) morphDynaBean.get("temperature");
			}
			logger.info("温度="+temperature);
			if (a.containsKey("humidity")) {
				humidity = (String) morphDynaBean.get("humidity");
			}
			logger.info("湿度="+humidity);
			if (a.containsKey("createtime")) {
				createtime = (String) morphDynaBean.get("createtime");
			}
			logger.info("测量时间="+createtime);
			if (a.containsKey("address")) {
				address = (String) morphDynaBean.get("address");
			}
			logger.info("检测地点="+address);
			if (a.containsKey("note")) {
				other = (String) morphDynaBean.get("note");
			}
			logger.info("其他=" + other);
			if (a.containsKey("item2")) {
				item2 = (String) morphDynaBean.get("item2");
			}
			logger.info("设备用途=" + item2);
			if (a.containsKey("item3")) {
				item3 = (String) morphDynaBean.get("item3");
			}
			logger.info("item3=" + item3);
		    if (a.containsKey("testingProject")) {
				testingProject = (String) morphDynaBean.get("testingProject");
			}
			logger.info("检测项目=" + testingProject);
			if (a.containsKey("id")) {
				taskId = (String) morphDynaBean.get("id");
			}
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat sdf_yMd=new SimpleDateFormat("yyyy-MM-dd");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceNum(checkDeviceNum==null?"":checkDeviceNum);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
			task.setInserttime(datetime);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setNote(note==null?"":note);
			task.setNuclideName(nuclideName==null?"":nuclideName);
			task.setNuclideNum(nuclideNum==null?"":nuclideNum);
			task.setNuclideVender(nuclideVender==null?"":nuclideVender);
			task.setCurrentActivity(currentActivity==null?"":currentActivity);
			task.setPass(0);
//			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setFactor(factor==null?0:Float.parseFloat(factor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setAddress(address==null?"":address);
			task.setTestingProject(testingProject==null?"":testingProject);
			task.setOther(other==null?"":other);
			task.setMonitorType(monitorType==null?"":monitorType);
			task.setItem2(item2==null?"":item2);
			task.setItem3(item3==null?"":item3);
			task.setNuclideTime(nuclideTime==null?datetime:sdf_yMd.parse(nuclideTime));
			task.setNominalCapacity("");
			task.setTaskData(json);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板373任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_373_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_373_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String weather = (String) morphDynaBean.get("weather");
			logger.info("天气="+weather);
			String activityResponse = (String) morphDynaBean.get("activityResponse");
			logger.info("表面活度响应="+activityResponse);
			String nuclideName = (String) morphDynaBean.get("NuclideName");
			logger.info("核素名称="+nuclideName);
			String currentActivity = (String) morphDynaBean.get("currentActivity");
			logger.info("核素活度="+currentActivity);
			String nuclideNum = (String) morphDynaBean.get("nuclideNum");
			logger.info("核素编码="+nuclideNum);
			String nuclideVender = (String) morphDynaBean.get("nuclideVender");
			logger.info("核素生产厂家="+nuclideVender);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setCreatetime(sdf.parse(createtime));
			task.setInserttime(datetime);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setWeather(weather==null?"":weather);
			task.setNote(note==null?"":note);
			task.setNuclideName(nuclideName==null?"":nuclideName);
			task.setNuclideNum(nuclideNum==null?"":nuclideNum);
			task.setNuclideVender(nuclideVender==null?"":nuclideVender);
			task.setCurrentActivity(currentActivity==null?"":currentActivity);
			task.setActivityResponse(activityResponse==null?"":activityResponse);
			task.setPass(0);
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setTaskData(json);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板374任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_374_add_old() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_374_add_old()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String weather = (String)morphDynaBean.get("weather");
		      logger.info("天气=" + weather);
		      String deviceFactor = (String)morphDynaBean.get("DeviceFactor");
		      logger.info("检测仪器校准因子=" + deviceFactor);
		      String factor = (String)morphDynaBean.get("Factor");
		      logger.info("137Cs校准因子=" + factor);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
		      logger.info("额定容量=" + nominalCapacity);
		      String conditions = (String)morphDynaBean.get("conditions");
		      logger.info("检测条件=" + conditions);
		      String pressure = (String)morphDynaBean.get("pressure");
		      logger.info("气压=" + pressure);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String wireHarness1 = (String)morphDynaBean.get("wireHarness1");
		      logger.info("有用线束朝向1=" + wireHarness1);
		      String wireHarness2 = (String)morphDynaBean.get("wireHarness2");
		      logger.info("有用线束朝向2=" + wireHarness2);
		      String wireHarness3 = (String)morphDynaBean.get("wireHarness3");
		      logger.info("有用线束朝向3=" + wireHarness3);
		      String irradiation = (String)morphDynaBean.get("irradiation");
		      logger.info("照射野=" + irradiation);
		      String upstairs = (String)morphDynaBean.get("upstairs");
		      logger.info("楼上=" + upstairs);
		      String downstairs = (String)morphDynaBean.get("downstairs");
		      logger.info("楼下=" + downstairs);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String note = (String)morphDynaBean.get("note");
		      logger.info("备注=" + note);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      String voltage = (String) morphDynaBean.get("voltage");
			  logger.info("电压="+voltage);
			  String current = (String) morphDynaBean.get("current");
			  logger.info("电流="+current);
			  String seconds = (String) morphDynaBean.get("seconds");
			  logger.info("对应检测条件的s="+seconds);
			  String mSeconds = (String) morphDynaBean.get("mSeconds");
			  logger.info("对应检测条件的mAs="+mSeconds);
		      
		      ROMS_SZ_TASK task = this.romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      String value = "";
		      if (!voltage.equals("")) {
				  value += ","+voltage+"kv";
			  }
			  if (!current.equals("")) {
				  value += ","+current+"mA";
			  }
			  if (!seconds.equals("")) {
				  value += ","+seconds+"s";		
			  }
			  if (!mSeconds.equals("")) {
				  value += ","+mSeconds+"mAs";
			  }
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setConditions(conditions+value);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setDownstairs(downstairs == null?"":downstairs);
		      task.setInserttime(datetime);
		      task.setIrradiation(irradiation == null?"":irradiation);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setUpstairs(upstairs == null?"":upstairs);
		      task.setWeather(weather == null?"":weather);
		      task.setWireHarness1(wireHarness1 == null?"":wireHarness1);
		      task.setWireHarness2(wireHarness2 == null?"":wireHarness2);
		      task.setWireHarness3(wireHarness3 == null?"":wireHarness3);
		      task.setNote(note == null?"":note);
		      task.setPass(0);
		      task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
		      task.setFactor(factor==null?0:Float.parseFloat(factor));
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
				
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板374任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_374_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_374_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
			    return null;
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
			String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String testingProject = "";
			String deviceFactor = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String other = "";
			String taskId = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String xRayNum = "";
			String nominalCapacity = "";
			String nominalCapacity1 = "";
			String conditions = "";
			String factor = "";
			String voltage = "";
			String current = "";
			String seconds = "";
			String mSeconds = "";
			String item2 = "";
			String item3 = "";
			String item4 = "";
			String item5 = "";
			String item6 = "";
			String item7 = "";
			String item8 = "";
			String item9 = "";
			
			JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    if (a.containsKey("projectNum")) {
		    	projectNum = (String)morphDynaBean.get("projectNum");
		    }
		    logger.info("项目编号=" + projectNum);
		    if (a.containsKey("checkUnitName")) {
		    	checkUnitName = (String)morphDynaBean.get("checkUnitName");
			}
		    logger.info("受检单位名称=" + checkUnitName);
		    if (a.containsKey("checkUnitAddress")) {
		    	checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
			}
		    logger.info("受检单位地址=" + checkUnitAddress);
		    if (a.containsKey("monitorType")) {
		    	monitorType = (String)morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
		    if (a.containsKey("standard")) {
		    	standard = (String)morphDynaBean.get("standard");
			}
		    logger.info("检测依据=" + standard);
		    if (a.containsKey("address")) {
		    	address = (String) morphDynaBean.get("address");
			}
			logger.info("检测地点="+address);
			if (a.containsKey("testingProject")) {
				testingProject = (String) morphDynaBean.get("testingProject");
			}
			logger.info("检测项目="+testingProject);
			if (a.containsKey("place")) {
				place = (String)morphDynaBean.get("place");
			}
		    logger.info("检测场所=" + place);
		    if (a.containsKey("checkDeviceName")) {
		    	checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
			}
		    logger.info("受检设备名称=" + checkDeviceName);
		    if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
		    if (a.containsKey("checkDeviceModel")) {
		    	checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
			}
		    logger.info("受检设备型号=" + checkDeviceModel);
		    if (a.containsKey("checkDeviceVender")) {
		    	checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
			}
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    if (a.containsKey("xRayNum")) {
		    	xRayNum = (String) morphDynaBean.get("xRayNum");
			}
			logger.info("x射线管编号="+xRayNum);
			if (a.containsKey("nominalCapacity")) {
				nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
			}
		    logger.info("额定容量=" + nominalCapacity);
		    if (a.containsKey("nominalCapacity1")) {
				nominalCapacity1 = (String) morphDynaBean.get("nominalCapacity1");
			}
			logger.info("额定容量1="+nominalCapacity1);
		    if (a.containsKey("conditions")) {
		    	conditions = (String)morphDynaBean.get("conditions");
			}
		    logger.info("检测条件=" + conditions);
		    if (a.containsKey("DeviceFactor")) {
		    	deviceFactor = (String)morphDynaBean.get("DeviceFactor");
			}
		    logger.info("检测仪器校准因子=" + deviceFactor);
		    if (a.containsKey("Factor")) {
		    	factor = (String)morphDynaBean.get("Factor");
			}
		    logger.info("137Cs校准因子=" + factor);
		    if (a.containsKey("temperature")) {
		    	temperature = (String)morphDynaBean.get("temperature");
			}
		    logger.info("温度=" + temperature);
		    if (a.containsKey("humidity")) {
		    	humidity = (String)morphDynaBean.get("humidity");
			}
		    logger.info("湿度=" + humidity);
		    if (a.containsKey("createtime")) {
		    	createtime = (String)morphDynaBean.get("createtime");
			}
		    logger.info("测量时间=" + createtime);
		    if (a.containsKey("note")) {
		    	other = (String)morphDynaBean.get("note");
			}
		    logger.info("其他=" + other);
		    if (a.containsKey("id")) {
		    	taskId = (String)morphDynaBean.get("id");
			}
		    logger.info("任务id=" + taskId);
		    if (a.containsKey("voltage")) {
		    	voltage = (String) morphDynaBean.get("voltage");
			}
			logger.info("电压="+voltage);
			if (a.containsKey("current")) {
				current = (String) morphDynaBean.get("current");
			}
			logger.info("电流="+current);
			if (a.containsKey("seconds")) {
				seconds = (String) morphDynaBean.get("seconds");
			}
			logger.info("对应检测条件的s="+seconds);
			if (a.containsKey("mSeconds")) {
				mSeconds = (String) morphDynaBean.get("mSeconds");
			}
			logger.info("对应检测条件的mAs="+mSeconds);
			if (a.containsKey("item2")) {
				item2 = (String) morphDynaBean.get("item2");
			}
			logger.info("设备用途="+item2);
			if (a.containsKey("item3")) {
				item3 = (String) morphDynaBean.get("item3");
			}
			logger.info("其他="+item3);
			if (a.containsKey("item4")) {
				item4 = (String) morphDynaBean.get("item4");
			}
			logger.info("射线照射方向="+item4);
			if (a.containsKey("item5")) {
				item5 = (String) morphDynaBean.get("item5");
			}
			logger.info("立位透视，射线照射方向="+item5);
			if (a.containsKey("item6")) {
				item6 = (String) morphDynaBean.get("item6");
			}
			logger.info("卧位透视，射线照射方向="+item6);
			if (a.containsKey("item7")) {
				item7 = (String) morphDynaBean.get("item7");
			}
			logger.info("乳腺机，射线照射方向="+item7);
			if (a.containsKey("item8")) {
				item8 = (String) morphDynaBean.get("item8");
			}
			logger.info("骨密度仪，射线照射方向="+item8);
			if (a.containsKey("item9")) {
				item9 = (String) morphDynaBean.get("item9");
			}
			logger.info("碎石机，射线照射方向="+item9);
			
			ROMS_SZ_TASK task = this.romssztaskService.query(taskId);
			if (task == null) {
				jsonString = "{'success':false,'msg':'没有该任务'}";
				out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
			}
			
		    String value = "";
		    if (!voltage.equals("/") && !voltage.equals("")) {
		    	value += voltage+"kV";
			}
			if (!current.equals("/") && !current.equals("")) {
				value += "，"+current+"mA";
			}
			if (!seconds.equals("/") && !seconds.equals("")) {
				value += "，"+seconds+"s";
			}
			if (!mSeconds.equals("/") && !mSeconds.equals("")) {
				value += "，"+mSeconds+"mAs";
			}
			
			task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setConditions(value+"（"+conditions+"）");
		    task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		    task.setNominalCapacity1(nominalCapacity1 == null?"":nominalCapacity1);
		    task.setPlace(place == null?"":place);
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setStandard(standard == null?"":standard);
		    task.setOther(other == null?"":other);
		    task.setPass(0);
		    task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
		    task.setFactor(factor==null?0:Float.parseFloat(factor));
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setAddress(address == null?"":address);
		    task.setTestingProject(testingProject == null?"":testingProject);
		    task.setxRayNum(xRayNum == null?"":xRayNum);
		    task.setItem2(item2 == null?"":item2);
		    task.setItem3(item3 == null?"":item3);
		    task.setItem4(item4 == null?"":item4);
		    task.setItem5(item5 == null?"":item5);
		    task.setItem6(item6 == null?"":item6);
		    task.setItem7(item7 == null?"":item7);
		    task.setItem8(item8 == null?"":item8);
		    task.setItem9(item9 == null?"":item9);
		    task.setTaskData(json);
		    
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		    	task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		    	task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板375任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_375_add_20180115() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_375_add_20180115()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String weather = (String)morphDynaBean.get("weather");
		      logger.info("天气=" + weather);
		      String deviceFactor = (String)morphDynaBean.get("DeviceFactor");
		      logger.info("检测仪器校准因子=" + deviceFactor);
		      String factor = (String)morphDynaBean.get("Factor");
		      logger.info("137Cs校准因子=" + factor);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
		      logger.info("额定容量=" + nominalCapacity);
		      String conditions = (String)morphDynaBean.get("conditions");
		      logger.info("检测条件=" + conditions);
		      String pressure = (String)morphDynaBean.get("pressure");
		      logger.info("气压=" + pressure);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String note = (String)morphDynaBean.get("note");
		      logger.info("备注=" + note);
//		      String other = (String)morphDynaBean.get("other");
//		      logger.info("其他=" + other);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = this.romssztaskService.query(taskId);
		      if (task == null) {
		        jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(jsonString);
		        logger.info(jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setConditions(conditions == null?"":conditions);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setWeather(weather == null?"":weather);
		      task.setNote(note == null?"":note);
		      task.setPass(0);
		      task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
		      task.setFactor(factor==null?0:Float.parseFloat(factor));
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
				
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板375任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_375_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_375_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
			    return null;
			}
			String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String monitorType = "";
			String place = "";
			String weather = "";
			String deviceFactor = "";
			String factor = "";
			String standard = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String nominalCapacity = "";
			String nominalCapacity1 = "";
			String conditions = "";
			String pressure = "";
			String temperature = "";
			String humidity = "";
			String createtime = "";
			String other = "";
			String address = "";
			String testingProject = "";
			String xRayNum = "";
			String taskId = "";
			String item2 = "";
			String item3 = "";
			String voltage = "";
			String current = "";
			String seconds = "";
			String mSeconds = "";
			String watt = "";
			
		    JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    if (a.containsKey("projectNum")) {
		    	projectNum = (String) morphDynaBean.get("projectNum");
			}
		    logger.info("项目编号=" + projectNum);
		    if (a.containsKey("checkUnitName")) {
		    	checkUnitName = (String) morphDynaBean.get("checkUnitName");
			}
		    logger.info("受检单位名称=" + checkUnitName);
		    if (a.containsKey("checkUnitAddress")) {
		    	checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			}
		    logger.info("受检单位地址=" + checkUnitAddress);
		    if (a.containsKey("monitorType")) {
		    	monitorType = (String) morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
		    if (a.containsKey("place")) {
		    	place = (String) morphDynaBean.get("place");
			}
		    logger.info("检测场所=" + place);
		    if (a.containsKey("weather")) {
		    	weather = (String) morphDynaBean.get("weather");
			}
		    logger.info("天气=" + weather);
		    if (a.containsKey("DeviceFactor")) {
		    	deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			}
		    logger.info("检测仪器校准因子=" + deviceFactor);
		    if (a.containsKey("Factor")) {
		    	factor = (String) morphDynaBean.get("Factor");
			}
		    logger.info("137Cs校准因子=" + factor);
		    if (a.containsKey("standard")) {
		    	standard = (String) morphDynaBean.get("standard");
			}
		    logger.info("检测依据=" + standard);
		    if (a.containsKey("checkDeviceName")) {
		    	checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			}
		    logger.info("受检设备名称=" + checkDeviceName);
		    if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String) morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
		    if (a.containsKey("checkDeviceModel")) {
		    	checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			}
		    logger.info("受检设备型号=" + checkDeviceModel);
		    if (a.containsKey("checkDeviceVender")) {
		    	checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			}
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    if (a.containsKey("nominalCapacity")) {
		    	nominalCapacity = (String) morphDynaBean.get("nominalCapacity");
			}
		    logger.info("额定容量=" + nominalCapacity);
		    if (a.containsKey("nominalCapacity1")) {
				nominalCapacity1 = (String) morphDynaBean.get("nominalCapacity1");
			}
			logger.info("额定容量1="+nominalCapacity1);
		    if (a.containsKey("conditions")) {
		    	conditions = (String) morphDynaBean.get("conditions");
			}
		    logger.info("检测条件=" + conditions);
//			if (a.containsKey("pressure")) {
//				pressure = (String) morphDynaBean.get("pressure");
//			}
//			logger.info("气压=" + pressure);
			if (a.containsKey("temperature")) {
				temperature = (String) morphDynaBean.get("temperature");
			}
			logger.info("温度=" + temperature);
			if (a.containsKey("humidity")) {
				humidity = (String) morphDynaBean.get("humidity");
			}
			logger.info("湿度=" + humidity);
			if (a.containsKey("createtime")) {
				createtime = (String) morphDynaBean.get("createtime");
			}
			logger.info("测量时间=" + createtime);
			if (a.containsKey("note")) {
				other = (String) morphDynaBean.get("note");
			}
			logger.info("其他=" + other);
			if (a.containsKey("address")) {
				address = (String) morphDynaBean.get("address");
			}
			logger.info("检测地点=" + address);
			if (a.containsKey("testingProject")) {
				testingProject = (String) morphDynaBean.get("testingProject");
			}
			logger.info("检测项目=" + testingProject);
			if (a.containsKey("xRayNum")) {
				xRayNum = (String) morphDynaBean.get("xRayNum");
			}
			logger.info("x射线管编号=" + xRayNum);
			if (a.containsKey("item2")) {
				item2 = (String) morphDynaBean.get("item2");
			}
			logger.info("设备用途=" + item2);
			if (a.containsKey("item3")) {
				item3 = (String) morphDynaBean.get("item3");
			}
			logger.info("item3=" + item3);
			if (a.containsKey("voltage")) {
				voltage = (String) morphDynaBean.get("voltage");
			}
			logger.info("电压="+voltage);
			if (a.containsKey("seconds")) {
				current = (String) morphDynaBean.get("current");
			}
			logger.info("电流="+current);
			if (a.containsKey("seconds")) {
				seconds = (String) morphDynaBean.get("seconds");
			}
			logger.info("对应检测条件的s="+seconds);
			if (a.containsKey("mSeconds")) {
				mSeconds = (String) morphDynaBean.get("mSeconds");
			}
			logger.info("对应检测条件的mAs="+mSeconds);
			if (a.containsKey("watt")) {
				watt = (String) morphDynaBean.get("watt");
			}
			logger.info("对应检测条件的w="+watt);
			if (a.containsKey("id")) {
				taskId = (String) morphDynaBean.get("id");
			}
			logger.info("任务id=" + taskId);
			
			ROMS_SZ_TASK task = this.romssztaskService.query(taskId);
		    if (task == null) {
		    	jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(jsonString);
		        logger.info(jsonString);
		        out.flush();
		        out.close();
		        return null;
		    }
		    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
		    String value = "";
			if (!voltage.contains("/") && !voltage.equals("")) {
				value += ""+voltage+"kV";
			}
			if (!current.contains("/") && !current.equals("")) {
				value += "，"+current+"mA";
			}
			if (!seconds.contains("/") && !seconds.equals("")) {
				value += "，"+seconds+"s";		
			}
			if (!mSeconds.contains("/") && !mSeconds.equals("")) {
				value += "，"+mSeconds+"mAs";
			}
			if (!watt.contains("/") && !watt.equals("")) {
				value += "，"+watt+"w";
			}
			
		    task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setConditions(value+"（"+conditions+"）");
		    task.setCreatetime(createtime == null?datetime:sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		    task.setNominalCapacity1(nominalCapacity1 == null?"":nominalCapacity1);
		    task.setPlace(place == null?"":place);
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setStandard(standard == null?"":standard);
		    task.setWeather(weather == null?"":weather);
		    task.setPass(0);
		    task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
		    task.setFactor(factor==null?0:Float.parseFloat(factor));
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
//		    task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setOther(other == null?"":other);
		    task.setAddress(address == null?"":address);
		    task.setTestingProject(testingProject == null?"":testingProject);
		    task.setxRayNum(xRayNum == null?"":xRayNum);
		    task.setItem2(item2 == null?"":item2);
		    task.setItem3(item3 == null?"":item3);
		    task.setTaskData(json);
		    
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		    	task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板376任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_376_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_376_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String weather = (String) morphDynaBean.get("weather");
			logger.info("天气="+weather);
			String deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			logger.info("检测仪器校准因子="+deviceFactor);
			String cargoName = (String) morphDynaBean.get("cargoName");
			logger.info("货物名称="+cargoName);
			String packageNum = (String) morphDynaBean.get("packageNum");
			logger.info("货包批号="+packageNum);
			String physicalState = (String) morphDynaBean.get("physicalState");
			logger.info("物理状态="+physicalState);
			String nuclideName = (String) morphDynaBean.get("NuclideName");
			logger.info("核素名称="+nuclideName);
			String currentActivity = (String) morphDynaBean.get("currentActivity");
			logger.info("核素活度="+currentActivity);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setCreatetime(sdf.parse(createtime));
			task.setInserttime(datetime);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setWeather(weather==null?"":weather);
			task.setNote(note==null?"":note);
			task.setNuclideName(nuclideName==null?"":nuclideName);
			task.setCurrentActivity(currentActivity==null?"":currentActivity);
			task.setCargoName(cargoName==null?"":cargoName);
			task.setPackageNum(packageNum==null?"":packageNum);
			task.setPhysicalState(physicalState==null?"":physicalState);
			task.setRayType("");
			task.setPackageActivity("");
			task.setPackageSize("");
			task.setPackageType("");
			task.setPass(0);
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setTaskData(json);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板377任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_377_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_377_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String weather = (String) morphDynaBean.get("weather");
			logger.info("天气="+weather);
			String Factor = (String) morphDynaBean.get("Factor");
			logger.info("137CS校准因子="+Factor);
			String cargoName = (String) morphDynaBean.get("cargoName");
			logger.info("货物名称="+cargoName);
			String packageNum = (String) morphDynaBean.get("packageNum");
			logger.info("货包批号="+packageNum);
			String packageType = (String) morphDynaBean.get("packageType");
			logger.info("货包类型="+packageType);
			String packageSize = (String) morphDynaBean.get("packageSize");
			logger.info("货包件数="+packageSize);
			String packageActivity = (String) morphDynaBean.get("packageActivity");
			logger.info("货包总放射性活度="+packageActivity);
			String nuclideName = (String) morphDynaBean.get("NuclideName");
			logger.info("核素名称="+nuclideName);
			String physicalState = (String) morphDynaBean.get("physicalState");
			logger.info("物理状态="+physicalState);
			String rayType = (String) morphDynaBean.get("rayType");
			logger.info("射线类型="+rayType);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setCreatetime(sdf.parse(createtime));
			task.setInserttime(datetime);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setWeather(weather==null?"":weather);
			task.setNote(note==null?"":note);
			task.setNuclideName(nuclideName==null?"":nuclideName);
			task.setCargoName(cargoName==null?"":cargoName);
			task.setPackageNum(packageNum==null?"":packageNum);
			task.setPhysicalState(physicalState==null?"":physicalState);
			task.setPackageActivity(packageActivity==null?"":packageActivity);
			task.setPackageSize(packageSize==null?"":packageSize);
			task.setPackageType(packageType==null?"":packageType);
			task.setRayType(rayType==null?"":rayType);
			task.setPass(0);
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板378任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_378_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_378_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter(); 
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			String projectNum = (String) morphDynaBean.get("projectNum");
			logger.info("项目编号="+projectNum);
			String checkUnitName = (String) morphDynaBean.get("checkUnitName");
			logger.info("受检单位名称="+checkUnitName);
			String checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			logger.info("受检单位地址="+checkUnitAddress);
			String place = (String) morphDynaBean.get("place");
			logger.info("检测场所="+place);
			String standard = (String) morphDynaBean.get("standard");
			logger.info("检测依据="+standard);
			String weather = (String) morphDynaBean.get("weather");
			logger.info("天气="+weather);
			String activityResponse = (String) morphDynaBean.get("activityResponse");
			logger.info("表面活度响应="+activityResponse);
			String cargoName = (String) morphDynaBean.get("cargoName");
			logger.info("货物名称="+cargoName);
			String packageNum = (String) morphDynaBean.get("packageNum");
			logger.info("货包批号="+packageNum);
			String packageType = (String) morphDynaBean.get("packageType");
			logger.info("货包类型="+packageType);
			String packageSize = (String) morphDynaBean.get("packageSize");
			logger.info("货包件数="+packageSize);
			String packageActivity = (String) morphDynaBean.get("packageActivity");
			logger.info("货包总放射性活度="+packageActivity);
			String nuclideName = (String) morphDynaBean.get("NuclideName");
			logger.info("核素名称="+nuclideName);
			String physicalState = (String) morphDynaBean.get("physicalState");
			logger.info("物理状态="+physicalState);
			String rayType = (String) morphDynaBean.get("rayType");
			logger.info("射线类型="+rayType);
			String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String temperature = (String) morphDynaBean.get("temperature");
			logger.info("温度="+temperature);
			String humidity = (String) morphDynaBean.get("humidity");
			logger.info("湿度="+humidity);
			String createtime = (String) morphDynaBean.get("createtime");
			logger.info("测量时间="+createtime);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String taskId = (String) morphDynaBean.get("id");
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setCreatetime(sdf.parse(createtime));
			task.setActivityResponse(activityResponse==null?"":activityResponse);
			task.setInserttime(datetime);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setWeather(weather==null?"":weather);
			task.setNote(note==null?"":note);
			task.setNuclideName(nuclideName==null?"":nuclideName);
			task.setCargoName(cargoName==null?"":cargoName);
			task.setPackageNum(packageNum==null?"":packageNum);
			task.setPhysicalState(physicalState==null?"":physicalState);
			task.setPackageActivity(packageActivity==null?"":packageActivity);
			task.setPackageSize(packageSize==null?"":packageSize);
			task.setPackageType(packageType==null?"":packageType);
			task.setRayType(rayType==null?"":rayType);
			task.setPass(0);
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setPressure(pressure==null?0:Float.parseFloat(pressure));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setTaskData(json);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板379任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_379_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_379_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
		      logger.info("额定容量=" + nominalCapacity);
		      String sidDeixis = (String)morphDynaBean.get("sidDeixis");
		      logger.info("有无SID指示=" + sidDeixis);
		      String radiometricControl = (String)morphDynaBean.get("radiometricControl");
		      logger.info("自照射量控制=" + radiometricControl);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setRadiometricControl(radiometricControl == null?"":radiometricControl);
		      task.setSidDeixis(sidDeixis == null?"":sidDeixis);
		      task.setPass(0);
			  task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			  task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			  task.setTaskData(json);
			  
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 模板380任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_380_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_380_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String factor = (String)morphDynaBean.get("Factor");
		      logger.info("137Cs校准因子=" + factor);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
		      logger.info("额定容量=" + nominalCapacity);
		      String conditions = (String)morphDynaBean.get("conditions");
		      logger.info("检测条件=" + conditions);
		      String pressure = (String)morphDynaBean.get("pressure");
		      logger.info("气压=" + pressure);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setPass(0);
		      task.setFactor(factor==null?0:Float.parseFloat(factor));
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板381任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_381_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_381_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
		      logger.info("额定容量=" + nominalCapacity);
		      String exposureControl = (String)morphDynaBean.get("exposureControl");
		      logger.info("自照曝光控制=" + exposureControl);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setExposureControl(exposureControl == null?"":exposureControl);
		      task.setPass(0);
			  task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			  task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			  task.setTaskData(json);
			  
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板382任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_382_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_382_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
		      logger.info("额定容量=" + nominalCapacity);
		      String imageIntensifier = (String)morphDynaBean.get("imageIntensifier");
		      logger.info("有无影像增强器=" + imageIntensifier);
		      String brightnessControl = (String)morphDynaBean.get("brightnessControl");
		      logger.info("有无自动亮度控制=" + brightnessControl);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setImageIntensifier(imageIntensifier == null?"":imageIntensifier);
		      task.setBrightnessControl(brightnessControl == null?"":brightnessControl);
		      task.setPass(0);
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板383任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_383_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_383_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
		      logger.info("额定容量=" + nominalCapacity);
		      String timeDeixis = (String)morphDynaBean.get("timeDeixis");
		      logger.info("有无时间指示=" + timeDeixis);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setTimeDeixis(timeDeixis == null?"":timeDeixis);
		      task.setPass(0);
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板384任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_384_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_384_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String testingProject = (String)morphDynaBean.get("testingProject");
		      logger.info("检测项目=" + testingProject);
		      String reportNum = (String)morphDynaBean.get("reportNum");
		      logger.info("相关联摄影机性能检测报告号=" + reportNum);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setTestingProject(testingProject == null?"":testingProject);
		      task.setReportNum(reportNum == null?"":reportNum);
		      task.setPass(0);
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板383任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_385_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_385_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
		      logger.info("额定容量=" + nominalCapacity);
		      String sidDeixis = (String)morphDynaBean.get("sidDeixis");
		      logger.info("有无SID指示=" + sidDeixis);
		      String radiometricControl = (String)morphDynaBean.get("radiometricControl");
		      logger.info("自照射量控制=" + radiometricControl);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String note = (String) morphDynaBean.get("note");
		      logger.info("备注="+note);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setSidDeixis(sidDeixis == null?"":sidDeixis);
		      task.setRadiometricControl(radiometricControl == null?"":radiometricControl);
		      task.setPass(0);
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setNote(note == null?"":note);
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板386任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_386_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_386_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String sourcesSpecies = (String)morphDynaBean.get("sourcesSpecies");
		      logger.info("治疗源核数种类=" + sourcesSpecies);
		      String sourcesVender = (String)morphDynaBean.get("sourcesVender");
		      logger.info("治疗源生产厂家=" + sourcesVender);
		      String pressure = (String)morphDynaBean.get("pressure");
		      logger.info("气压=" + pressure);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setSourcesSpecies(sourcesSpecies == null?"":sourcesSpecies);
		      task.setSourcesVender(sourcesVender == null?"":sourcesVender);
		      task.setPass(0);
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setCheckDeviceModel("");
		      task.setCheckDeviceName("");
		      task.setCheckDeviceNum("");
		      task.setCheckDeviceVender("");
		      task.setSourcesActivity("");
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板387任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_387_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_387_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String testingWay = (String)morphDynaBean.get("testingWay");
		      logger.info("检测方式=" + testingWay);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setPass(0);
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setTestingWay(testingWay == null?"":testingWay);
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板388任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_388_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_388_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String Factor = (String) morphDynaBean.get("Factor");
		      logger.info("校准因子="+Factor);
		      String note = (String) morphDynaBean.get("note");
		      logger.info("备注="+note);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setPass(0);
		      task.setStandard(standard == null?"":standard);
		      task.setFactor(Factor==null?0:Float.parseFloat(Factor));
		      task.setNote(note == null?"":note);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板389任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("deprecation")
	public String app_389_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_389_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      Pattern p = Pattern.compile("\\s*|\t|\r|\n");
		      Matcher m = p.matcher(json);
		      json = m.replaceAll("");
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String probeCrystal = (String)morphDynaBean.get("probeCrystal");
		      logger.info("探头晶体厚度=" + probeCrystal);
		      String checkDeviceProbe = (String)morphDynaBean.get("checkDeviceProbe");
		      logger.info("被检设备探头个数=" + checkDeviceProbe);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String createtime = (String)morphDynaBean.get("inserttime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      Date date1 = new Date(Long.parseLong(createtime));
		      task.setCreatetime(sdf.parse(sdf.format(date1)));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setPass(0);
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setProbeCrystal(probeCrystal == null?"":probeCrystal);
		      task.setCheckDeviceProbe(checkDeviceProbe==null?0:Integer.parseInt(checkDeviceProbe));
		      task.setStandard(standard == null?"":standard);
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板390任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_390_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_390_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String standard = (String) morphDynaBean.get("standard");
		      logger.info("检测依据="+standard);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);		      
		      String checkComputerRoom = (String)morphDynaBean.get("checkComputerRoom");
		      logger.info("受检机房名称=" + checkComputerRoom);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String pressure = (String) morphDynaBean.get("pressure");
			  logger.info("气压="+pressure);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setStandard(standard == null?"":standard);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setPass(0);
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setCheckComputerRoom(checkComputerRoom == null?"":checkComputerRoom);
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板391任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_391_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_391_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String testingProject = (String)morphDynaBean.get("testingProject");
		      logger.info("检测项目=" + testingProject);
		      String deviceFactor = (String) morphDynaBean.get("DeviceFactor");
		      logger.info("检测仪器校准因子="+deviceFactor);
		      String factor = (String) morphDynaBean.get("Factor");
		      logger.info("137CS校准因子="+factor);
		      String standard = (String) morphDynaBean.get("standard");
		      logger.info("检测依据="+standard);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
		      logger.info("额定容量=" + nominalCapacity);
		      String nominalCapacity1 = (String)morphDynaBean.get("nominalCapacity1");
		      logger.info("额定容量1=" + nominalCapacity1);
		      String conditions = (String)morphDynaBean.get("conditions");
		      logger.info("检测条件=" + conditions);
		      String conditions1 = (String)morphDynaBean.get("conditions1");
		      logger.info("检测条件1=" + conditions1);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String pressure = (String) morphDynaBean.get("pressure");
			  logger.info("气压="+pressure);
			  String upstairs = (String) morphDynaBean.get("upstairs");
			  logger.info("楼上="+upstairs);
			  String downstairs = (String) morphDynaBean.get("downstairs");
			  logger.info("楼下="+downstairs);
			  String note = (String) morphDynaBean.get("note");
			  logger.info("备注="+note);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setTestingProject(testingProject == null?"":testingProject);
		      task.setPlace(place == null?"":place);
		      task.setStandard(standard == null?"":standard);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setUpstairs(upstairs == null?"":upstairs);
		      task.setDownstairs(downstairs == null?"":downstairs);
		      task.setPass(0);
		      task.setFactor(factor==null?0:Float.parseFloat(factor));
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setNote(note==null?"":note);
		      task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
		      task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		      task.setNominalCapacity1(nominalCapacity1 == null?"":nominalCapacity1);
		      task.setConditions(conditions == null?"":conditions);
		      task.setConditions1(conditions1 == null?"":conditions1);
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板392任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_392_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_392_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String standard = (String) morphDynaBean.get("standard");
		      logger.info("检测依据="+standard);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String checkComputerRoom = (String)morphDynaBean.get("checkComputerRoom");
		      logger.info("受检机房名称=" + checkComputerRoom);
		      String sourcesSpecies = (String)morphDynaBean.get("sourcesSpecies");
		      logger.info("治疗源核数种类=" + sourcesSpecies);
		      String sourcesVender = (String)morphDynaBean.get("sourcesVender");
		      logger.info("治疗源生产厂家=" + sourcesVender);
		      String sourcesActivity = (String)morphDynaBean.get("sourcesActivity");
		      logger.info("治疗源当前总活度=" + sourcesActivity);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String pressure = (String) morphDynaBean.get("pressure");
			  logger.info("气压="+pressure);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setStandard(standard == null?"":standard);
		      task.setSourcesActivity(sourcesActivity == null?"":sourcesActivity);
		      task.setSourcesSpecies(sourcesSpecies == null?"":sourcesSpecies);
		      task.setSourcesVender(sourcesVender == null?"":sourcesVender);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setPass(0);
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setCheckComputerRoom(checkComputerRoom == null?"":checkComputerRoom);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setPlace("");
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板393任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_393_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_393_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String testingProject = (String)morphDynaBean.get("testingProject");
		      logger.info("检测项目=" + testingProject);
		      String factor = (String) morphDynaBean.get("Factor");
		      logger.info("137CS校准因子="+factor);
		      String standard = (String) morphDynaBean.get("standard");
		      logger.info("检测依据="+standard);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String sourcesSpecies = (String)morphDynaBean.get("sourcesSpecies");
		      logger.info("治疗源核数种类=" + sourcesSpecies);
		      String sourcesVender = (String)morphDynaBean.get("sourcesVender");
		      logger.info("治疗源生产厂家=" + sourcesVender);
		      String sourcesActivity = (String)morphDynaBean.get("sourcesActivity");
		      logger.info("治疗源当前总活度=" + sourcesActivity);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String pressure = (String) morphDynaBean.get("pressure");
			  logger.info("气压="+pressure);
			  String upstairs = (String) morphDynaBean.get("upstairs");
			  logger.info("楼上="+upstairs);
			  String downstairs = (String) morphDynaBean.get("downstairs");
			  logger.info("楼下="+downstairs);
			  String note = (String) morphDynaBean.get("note");
			  logger.info("备注="+note);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setTestingProject(testingProject == null?"":testingProject);
		      task.setPlace(place == null?"":place);
		      task.setStandard(standard == null?"":standard);
		      task.setSourcesActivity(sourcesActivity == null?"":sourcesActivity);
		      task.setSourcesSpecies(sourcesSpecies == null?"":sourcesSpecies);
		      task.setSourcesVender(sourcesVender == null?"":sourcesVender);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setUpstairs(upstairs == null?"":upstairs);
		      task.setDownstairs(downstairs == null?"":downstairs);
		      task.setPass(0);
		      task.setFactor(factor==null?0:Float.parseFloat(factor));
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setNote(note==null?"":note);
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板394任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_394_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_394_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String standard = (String) morphDynaBean.get("standard");
		      logger.info("检测依据="+standard);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String sourcesSpecies = (String)morphDynaBean.get("sourcesSpecies");
		      logger.info("治疗源核数种类=" + sourcesSpecies);
		      String sourcesVender = (String)morphDynaBean.get("sourcesVender");
		      logger.info("治疗源生产厂家=" + sourcesVender);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String pressure = (String) morphDynaBean.get("pressure");
			  logger.info("气压="+pressure);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setPlace(place == null?"":place);
		      task.setStandard(standard == null?"":standard);
		      task.setSourcesSpecies(sourcesSpecies == null?"":sourcesSpecies);
		      task.setSourcesVender(sourcesVender == null?"":sourcesVender);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setPass(0);
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setSourcesActivity("");
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板395任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_395_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_395_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String testingProject = (String)morphDynaBean.get("testingProject");
		      logger.info("检测项目=" + testingProject);
		      String standard = (String) morphDynaBean.get("standard");
		      logger.info("检测依据="+standard);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String sourcesSpecies = (String)morphDynaBean.get("sourcesSpecies");
		      logger.info("治疗源核数种类=" + sourcesSpecies);
		      String sourcesVender = (String)morphDynaBean.get("sourcesVender");
		      logger.info("治疗源生产厂家=" + sourcesVender);
		      String sourcesActivity = (String)morphDynaBean.get("sourcesActivity");
		      logger.info("治疗源当前总活度=" + sourcesActivity);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String pressure = (String) morphDynaBean.get("pressure");
			  logger.info("气压="+pressure);
			  String note = (String) morphDynaBean.get("note");
			  logger.info("备注="+note);
			  String sourcesLoading = (String) morphDynaBean.get("sourcesLoading");
			  logger.info("治疗源装源活度="+sourcesLoading);
			  String activityTime = (String) morphDynaBean.get("activityTime");
			  logger.info("活度刻度时间="+activityTime);
			  String sourcesNuclideNum = (String) morphDynaBean.get("sourcesNuclideNum");
			  logger.info("治疗源核数编码="+sourcesNuclideNum);
			  String testingWay = (String) morphDynaBean.get("testingWay");
			  logger.info("检测方式="+testingWay);
			  String activityResponse = (String) morphDynaBean.get("activityResponse");
			  logger.info("表面活度响应="+activityResponse);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setTestingProject(testingProject == null?"":testingProject);
		      task.setPlace(place == null?"":place);
		      task.setStandard(standard == null?"":standard);
		      task.setSourcesActivity(sourcesActivity == null?"":sourcesActivity);
		      task.setSourcesSpecies(sourcesSpecies == null?"":sourcesSpecies);
		      task.setSourcesVender(sourcesVender == null?"":sourcesVender);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setPass(0);
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setActivityTime(activityTime == null?"":activityTime);
		      task.setSourcesLoading(sourcesLoading == null?"":sourcesLoading);
		      task.setSourcesNuclideNum(sourcesNuclideNum == null?"":sourcesNuclideNum);
		      task.setNote(note == null?"":note);
		      task.setActivityResponse(activityResponse == null?"":activityResponse);
		      task.setTestingWay(testingWay == null?"":testingWay);
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板396任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_396_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_396_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String testingProject = (String)morphDynaBean.get("testingProject");
		      logger.info("检测项目=" + testingProject);
		      String factor = (String) morphDynaBean.get("Factor");
		      logger.info("137CS校准因子="+factor);
		      String standard = (String) morphDynaBean.get("standard");
		      logger.info("检测依据="+standard);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String sourcesSpecies = (String)morphDynaBean.get("sourcesSpecies");
		      logger.info("治疗源核数种类=" + sourcesSpecies);
		      String sourcesVender = (String)morphDynaBean.get("sourcesVender");
		      logger.info("治疗源生产厂家=" + sourcesVender);
		      String sourcesActivity = (String)morphDynaBean.get("sourcesActivity");
		      logger.info("治疗源当前总活度=" + sourcesActivity);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String pressure = (String) morphDynaBean.get("pressure");
			  logger.info("气压="+pressure);
			  String upstairs = (String) morphDynaBean.get("upstairs");
			  logger.info("楼上="+upstairs);
			  String downstairs = (String) morphDynaBean.get("downstairs");
			  logger.info("楼下="+downstairs);
			  String sourcesLoading = (String) morphDynaBean.get("sourcesLoading");
			  logger.info("治疗源装源活度="+sourcesLoading);
			  String activityTime = (String) morphDynaBean.get("activityTime");
			  logger.info("活度刻度时间="+activityTime);
			  String sourcesNuclideNum = (String) morphDynaBean.get("sourcesNuclideNum");
			  logger.info("治疗源核数编码="+sourcesNuclideNum);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setTestingProject(testingProject == null?"":testingProject);
		      task.setPlace(place == null?"":place);
		      task.setStandard(standard == null?"":standard);
		      task.setSourcesActivity(sourcesActivity == null?"":sourcesActivity);
		      task.setSourcesSpecies(sourcesSpecies == null?"":sourcesSpecies);
		      task.setSourcesVender(sourcesVender == null?"":sourcesVender);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setUpstairs(upstairs == null?"":upstairs);
		      task.setDownstairs(downstairs == null?"":downstairs);
		      task.setPass(0);
		      task.setFactor(factor==null?0:Float.parseFloat(factor));
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setActivityTime(activityTime == null?"":activityTime);
		      task.setSourcesLoading(sourcesLoading == null?"":sourcesLoading);
		      task.setSourcesNuclideNum(sourcesNuclideNum == null?"":sourcesNuclideNum);
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板398任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_398_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_398_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String testingProject = (String)morphDynaBean.get("testingProject");
		      logger.info("检测项目=" + testingProject);
		      String deviceFactor = (String)morphDynaBean.get("DeviceFactor");
		      logger.info("检测仪器校准因子=" + deviceFactor);
		      String deviceFactor1 = (String)morphDynaBean.get("DeviceFactor1");
		      logger.info("检测仪器校准因子1=" + deviceFactor1);
		      String factor = (String)morphDynaBean.get("Factor");
		      logger.info("137Cs校准因子=" + factor);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
		      logger.info("受检设备型号=" + checkDeviceModel);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
		      logger.info("额定容量=" + nominalCapacity);
		      String nominalCapacity1 = (String)morphDynaBean.get("nominalCapacity1");
		      logger.info("额定容量1=" + nominalCapacity1);
		      String conditions = (String)morphDynaBean.get("conditions");
		      logger.info("检测条件=" + conditions);
		      String conditions1 = (String)morphDynaBean.get("conditions1");
		      logger.info("检测条件1=" + conditions1);
		      String pressure = (String)morphDynaBean.get("pressure");
		      logger.info("气压=" + pressure);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String upstairs = (String) morphDynaBean.get("upstairs");
			  logger.info("楼上="+upstairs);
			  String downstairs = (String) morphDynaBean.get("downstairs");
			  logger.info("楼下="+downstairs);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String note = (String)morphDynaBean.get("note");
		      logger.info("备注=" + note);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setConditions(conditions == null?"":conditions);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setNote(note == null?"":note);
		      task.setPass(0);
		      task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
		      task.setFactor(factor==null?0:Float.parseFloat(factor));
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setDeviceFactor1(deviceFactor1==null?0:Float.parseFloat(deviceFactor1));
		      task.setNominalCapacity1(nominalCapacity1 == null?"":conditions1);
		      task.setConditions1(conditions1 == null?"":conditions1);
		      task.setUpstairs(upstairs == null?"":upstairs);
		      task.setDownstairs(downstairs == null?"":downstairs);
		      task.setTestingProject(testingProject == null?"":testingProject);
				
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板399任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_399_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_399_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			  String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		      logger.info("json=" + json);
		      String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("检测人签名照路径="+recordUrl);
			  String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			  logger.info("复核人签名照路径="+checkUrl);
			  if (json.equals("") || json.equals("[]")) {
				  jsonString="{'success':false,'msg':'没有数据'}";
				  out.write(jsonString);
				  logger.info(jsonString);
				  out.flush();
				  out.close();
			      return null;
			  }
		      JSONObject a = null;
		      Object bean = null;
		      JSONArray array = JSONArray.fromObject(json);
		      Object[] objArray = array.toArray();
		      System.out.println("array length--- " + objArray.length);
		      a = JSONObject.fromObject(objArray[0]);
		      bean = JSONObject.toBean(a);
		      MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		      String projectNum = (String)morphDynaBean.get("projectNum");
		      logger.info("项目编号=" + projectNum);
		      String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		      logger.info("受检单位名称=" + checkUnitName);
		      String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		      logger.info("受检单位地址=" + checkUnitAddress);
		      String monitorType = (String)morphDynaBean.get("monitorType");
		      logger.info("检测类型=" + monitorType);
		      String place = (String)morphDynaBean.get("place");
		      logger.info("检测场所=" + place);
		      String testingProject = (String)morphDynaBean.get("testingProject");
		      logger.info("检测项目=" + testingProject);
		      String deviceFactor = (String)morphDynaBean.get("DeviceFactor");
		      logger.info("检测仪器校准因子=" + deviceFactor);
		      String factor = (String)morphDynaBean.get("Factor");
		      logger.info("137Cs校准因子=" + factor);
		      String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		      logger.info("受检设备名称=" + checkDeviceName);
		      String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		      logger.info("受检设备编号=" + checkDeviceNum);
		      String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		      logger.info("受检设备厂家=" + checkDeviceVender);
		      String standard = (String)morphDynaBean.get("standard");
		      logger.info("检测依据=" + standard);
		      String exposureDeviceModel = (String)morphDynaBean.get("exposureDeviceModel");
		      logger.info("辐照装置类型=" + exposureDeviceModel);
		      String nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
		      logger.info("额定容量=" + nominalCapacity);
		      String conditions = (String)morphDynaBean.get("conditions");
		      logger.info("检测条件=" + conditions);
		      String pressure = (String)morphDynaBean.get("pressure");
		      logger.info("气压=" + pressure);
		      String temperature = (String)morphDynaBean.get("temperature");
		      logger.info("温度=" + temperature);
		      String humidity = (String)morphDynaBean.get("humidity");
		      logger.info("湿度=" + humidity);
		      String createtime = (String)morphDynaBean.get("createtime");
		      logger.info("测量时间=" + createtime);
		      String note = (String)morphDynaBean.get("note");
		      logger.info("备注=" + note);
		      String taskId = (String)morphDynaBean.get("id");
		      logger.info("任务id=" + taskId);
		      
		      ROMS_SZ_TASK task = romssztaskService.query(taskId);
		      if (task == null)
		      {
		        this.jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		      }
		      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		      Date date = new Date();
		      String time = sdf.format(date);
		      Date datetime = sdf.parse(time);
		      logger.info("当前时间=" + datetime);
		      
		      task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		      task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		      task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		      task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		      task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		      task.setConditions(conditions == null?"":conditions);
		      task.setCreatetime(sdf.parse(createtime));
		      task.setInserttime(datetime);
		      task.setMonitorType(monitorType == null?"":monitorType);
		      task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		      task.setPlace(place == null?"":place);
		      task.setProjectNum(projectNum == null?"":projectNum);
		      task.setStandard(standard == null?"":standard);
		      task.setNote(note == null?"":note);
		      task.setPass(0);
		      task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
		      task.setFactor(factor==null?0:Float.parseFloat(factor));
		      task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		      task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		      task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		      task.setTestingProject(testingProject == null?"":testingProject);
		      task.setExposureDeviceModel(exposureDeviceModel == null?"":exposureDeviceModel);
		      task.setTaskData(json);
		      
		      if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		      }
		      if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		      }
		      romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板400任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_400_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_400_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
			    return null;
			}
		    JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    String projectNum = (String)morphDynaBean.get("projectNum");
		    logger.info("项目编号=" + projectNum);
		    String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		    logger.info("受检单位名称=" + checkUnitName);
		    String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		    logger.info("受检单位地址=" + checkUnitAddress);
		    String monitorType = (String)morphDynaBean.get("monitorType");
		    logger.info("检测类型=" + monitorType);
		    String place = (String)morphDynaBean.get("place");
		    logger.info("检测场所=" + place);
		    String testingProject = (String)morphDynaBean.get("testingProject");
		    logger.info("检测项目=" + testingProject);
		    String standard = (String) morphDynaBean.get("standard");
		    logger.info("检测依据="+standard);
		    String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		    logger.info("受检设备名称=" + checkDeviceName);
		    String checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
		    logger.info("受检设备编号=" + checkDeviceNum);
		    String checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    String temperature = (String)morphDynaBean.get("temperature");
		    logger.info("温度=" + temperature);
		    String humidity = (String)morphDynaBean.get("humidity");
		    logger.info("湿度=" + humidity);
		    String pressure = (String) morphDynaBean.get("pressure");
			logger.info("气压="+pressure);
			String note = (String) morphDynaBean.get("note");
			logger.info("备注="+note);
			String testingWay = (String) morphDynaBean.get("testingWay");
			logger.info("检测方式="+testingWay);
			String activityResponse = (String) morphDynaBean.get("activityResponse");
			logger.info("表面活度响应="+activityResponse);
			String nuclideName = (String) morphDynaBean.get("NuclideName");
			logger.info("核素名称="+nuclideName);
			String maxActivity = (String) morphDynaBean.get("maxActivity");
			logger.info("最大装填活度="+maxActivity);
			String exposureDeviceModel = (String) morphDynaBean.get("exposureDeviceModel");
			logger.info("辐照装置类型="+exposureDeviceModel);
			String source = (String) morphDynaBean.get("source");
			logger.info("贮源放射="+source);
			String nuclideVender = (String) morphDynaBean.get("nuclideVender");
			logger.info("核素生产厂家="+nuclideVender);
			String currentActivity = (String) morphDynaBean.get("currentActivity");
			logger.info("当前装填活度="+currentActivity);
		    String createtime = (String)morphDynaBean.get("createtime");
		    logger.info("测量时间=" + createtime);
		    String taskId = (String)morphDynaBean.get("id");
		    logger.info("任务id=" + taskId);
		    
		    ROMS_SZ_TASK task = romssztaskService.query(taskId);
		    if (task == null){
		    	jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		    }
		    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setTestingProject(testingProject == null?"":testingProject);
		    task.setPlace(place == null?"":place);
		    task.setStandard(standard == null?"":standard);
		    task.setCreatetime(sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setPass(0);
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setNote(note == null?"":note);
		    task.setActivityResponse(activityResponse == null?"":activityResponse);
		    task.setTestingWay(testingWay == null?"":testingWay);
		    task.setNuclideName(nuclideName == null?"":nuclideName);
		    task.setMaxActivity(maxActivity == null?"":maxActivity);
		    task.setExposureDeviceModel(exposureDeviceModel == null?"":exposureDeviceModel);
		    task.setSource(source == null?"":source);
		    task.setNuclideVender(nuclideVender == null?"":nuclideVender);
		    task.setCurrentActivity(currentActivity == null?"":currentActivity);
		    task.setTaskData(json);
		    
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		    	task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		    	task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		    
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	/**
	 * 模板401任务和数据添加接口
	 * @return
	 * @throws Exception 
	 * @throws Exception
	 */
	public String app_401_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_401_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
			}
		    JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    String projectNum = (String)morphDynaBean.get("projectNum");
		    logger.info("项目编号=" + projectNum);
		    String checkUnitName = (String)morphDynaBean.get("checkUnitName");
		    logger.info("受检单位名称=" + checkUnitName);
		    String checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
		    logger.info("受检单位地址=" + checkUnitAddress);
		    String monitorType = (String)morphDynaBean.get("monitorType");
		    logger.info("检测类型=" + monitorType);
		    String place = (String)morphDynaBean.get("place");
		    logger.info("检测场所=" + place);
		    String deviceFactor = (String)morphDynaBean.get("DeviceFactor");
		    logger.info("检测仪器校准因子=" + deviceFactor);
		    String factor = (String)morphDynaBean.get("Factor");
		    logger.info("137Cs校准因子=" + factor);
		    String standard = (String)morphDynaBean.get("standard");
		    logger.info("检测依据=" + standard);
		    String checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
		    logger.info("受检设备名称=" + checkDeviceName);
		    String exposureDeviceModel = (String)morphDynaBean.get("exposureDeviceModel");
		    logger.info("辐照装置类型=" + exposureDeviceModel);
		    String source = (String)morphDynaBean.get("source");
		    logger.info("贮源放射=" + source);
		    String nuclideName = (String)morphDynaBean.get("NuclideName");
		    logger.info("核素名称=" + nuclideName);
		    String nuclideVender = (String)morphDynaBean.get("nuclideVender");
		    logger.info("核素生产厂家=" + nuclideVender);
		    String maxActivity = (String)morphDynaBean.get("maxActivity");
		    logger.info("最大装填活度=" + maxActivity);
		    String currentActivity = (String)morphDynaBean.get("currentActivity");
		    logger.info("当前装填活度=" + currentActivity);
		    String pressure = (String)morphDynaBean.get("pressure");
		    logger.info("气压=" + pressure);
		    String temperature = (String)morphDynaBean.get("temperature");
		    logger.info("温度=" + temperature);
		    String humidity = (String)morphDynaBean.get("humidity");
		    logger.info("湿度=" + humidity);
		    String createtime = (String)morphDynaBean.get("createtime");
		    logger.info("测量时间=" + createtime);
		    String note = (String)morphDynaBean.get("note");
		    logger.info("备注=" + note);
		    String taskId = (String)morphDynaBean.get("id");
		    logger.info("任务id=" + taskId);
		    
		    ROMS_SZ_TASK task = romssztaskService.query(taskId);
		    if (task == null){
		    	jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		    }
		    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		      
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setCreatetime(sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setPlace(place == null?"":place);
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setStandard(standard == null?"":standard);
		    task.setNote(note == null?"":note);
		    task.setPass(0);
		    task.setExposureDeviceModel(exposureDeviceModel == null?"":exposureDeviceModel);
		    task.setNuclideName(nuclideName == null?"":nuclideName);
		    task.setMaxActivity(maxActivity == null?"":maxActivity);
		    task.setCurrentActivity(currentActivity == null?"":currentActivity);
		    task.setSource(source == null?"":source);
		    task.setNuclideVender(nuclideVender == null?"":nuclideVender);
		    task.setNuclideNum("");
		    task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
		    task.setFactor(factor==null?0:Float.parseFloat(factor));
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setPressure(pressure==null?0:Float.parseFloat(pressure));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setTaskData(json);
		    
			if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		    	task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		    
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString = "{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板418任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_418_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_418_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
			    return null;
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
		    String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String taskId = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String xRayNum = "";
			String nominalCapacity = "";
			String nominalCapacity1 = "";
			String timeDeixis = "";
			int aceSize = 0;
			
		    JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    if (a.containsKey("projectNum")) {
		    	projectNum = (String)morphDynaBean.get("projectNum");
			}
		    logger.info("项目编号=" + projectNum);
		    if (a.containsKey("checkUnitName")) {
		    	checkUnitName = (String)morphDynaBean.get("checkUnitName");
			}
		    logger.info("受检单位名称=" + checkUnitName);
		    if (a.containsKey("checkUnitAddress")) {
		    	checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
			}
		    logger.info("受检单位地址=" + checkUnitAddress);
		    if (a.containsKey("monitorType")) {
		    	monitorType = (String)morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
		    if (a.containsKey("address")) {
		    	address = (String)morphDynaBean.get("address");
			}
		    logger.info("检测地点=" + address);
		    if (a.containsKey("checkDeviceName")) {
		    	checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
			}
		    logger.info("受检设备名称=" + checkDeviceName);
		    if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
		    if (a.containsKey("checkDeviceModel")) {
		    	checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
			}
		    logger.info("受检设备型号=" + checkDeviceModel);
		    if (a.containsKey("checkDeviceVender")) {
		    	checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
			}
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    if (a.containsKey("xRayNum")) {
		    	xRayNum = (String) morphDynaBean.get("xRayNum");
			}
		    logger.info("x射线管编号="+xRayNum);
		    if (a.containsKey("place")) {
		    	place = (String)morphDynaBean.get("place");
			}
		    logger.info("检测场所=" + place);
		    if (a.containsKey("standard")) {
		    	standard = (String)morphDynaBean.get("standard");
			}
		    logger.info("检测依据=" + standard);
		    if (a.containsKey("temperature")) {
		    	temperature = (String)morphDynaBean.get("temperature");
			}
		    logger.info("温度=" + temperature);
		    if (a.containsKey("humidity")) {
		    	humidity = (String)morphDynaBean.get("humidity");
			}
		    logger.info("湿度=" + humidity);
		    if (a.containsKey("nominalCapacity")) {
		    	nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
			}
		    logger.info("额定容量电压=" + nominalCapacity);
		    if (a.containsKey("nominalCapacity1")) {
		    	nominalCapacity1 = (String)morphDynaBean.get("nominalCapacity1");
			}
		    logger.info("额定容量1=" + nominalCapacity1);
		    if (a.containsKey("timeDeixis")) {
		    	timeDeixis = (String)morphDynaBean.get("timeDeixis");
			}
		    logger.info("曝光时间指示 =" + timeDeixis);
		    if (a.containsKey("aceSize")) {
		    	aceSize = (Integer)morphDynaBean.get("aceSize");
			}
		    logger.info("AEC电离室数量=" + aceSize);
		    if (a.containsKey("createtime")) {
		    	createtime = (String)morphDynaBean.get("createtime");
			}
		    logger.info("测量时间=" + createtime);
		    if (a.containsKey("id")) {
		    	taskId = (String)morphDynaBean.get("id");
			}
		    logger.info("任务id=" + taskId);
		    
		    ROMS_SZ_TASK task = romssztaskService.query(taskId);
		    if (task == null){
		    	jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		    }
		    
		    task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		    task.setNominalCapacity1(nominalCapacity1 == null?"":nominalCapacity1);
		    task.setPlace(place == null?"":place);
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setStandard(standard == null?"":standard);
		    task.setPass(0);
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setAddress(address == null?"":address);
		    task.setxRayNum(xRayNum == null?"":xRayNum);
		    task.setAceSize(aceSize);
		    task.setTimeDeixis(timeDeixis == null?"":timeDeixis);
		    task.setTaskData(json);
		    
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		    	task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		    	task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		      
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板419任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_419_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_419_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
			    return null;
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
		    String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String taskId = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String xRayNum = "";
			String nominalCapacity = "";
			String nominalCapacity1 = "";
			String timeDeixis = "";
			String exposureControl = "";
			
		    JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    if (a.containsKey("projectNum")) {
		    	projectNum = (String)morphDynaBean.get("projectNum");
			}
		    logger.info("项目编号=" + projectNum);
		    if (a.containsKey("checkUnitName")) {
		    	checkUnitName = (String)morphDynaBean.get("checkUnitName");
			}
		    logger.info("受检单位名称=" + checkUnitName);
		    if (a.containsKey("checkUnitAddress")) {
		    	checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
			}
		    logger.info("受检单位地址=" + checkUnitAddress);
		    if (a.containsKey("monitorType")) {
		    	monitorType = (String)morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
		    if (a.containsKey("address")) {
		    	address = (String)morphDynaBean.get("address");
			}
		    logger.info("检测地点=" + address);
		    if (a.containsKey("checkDeviceName")) {
		    	checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
			}
		    logger.info("受检设备名称=" + checkDeviceName);
		    if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
		    if (a.containsKey("checkDeviceModel")) {
		    	checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
			}
		    logger.info("受检设备型号=" + checkDeviceModel);
		    if (a.containsKey("checkDeviceVender")) {
		    	checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
			}
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    if (a.containsKey("xRayNum")) {
		    	xRayNum = (String) morphDynaBean.get("xRayNum");
			}
		    logger.info("x射线管编号="+xRayNum);
		    if (a.containsKey("place")) {
		    	place = (String)morphDynaBean.get("place");
			}
		    logger.info("检测场所=" + place);
		    if (a.containsKey("standard")) {
		    	standard = (String)morphDynaBean.get("standard");
			}
		    logger.info("检测依据=" + standard);
		    if (a.containsKey("temperature")) {
		    	temperature = (String)morphDynaBean.get("temperature");
			}
		    logger.info("温度=" + temperature);
		    if (a.containsKey("humidity")) {
		    	humidity = (String)morphDynaBean.get("humidity");
			}
		    logger.info("湿度=" + humidity);
		    if (a.containsKey("nominalCapacity")) {
		    	nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
			}
		    logger.info("额定容量电压=" + nominalCapacity);
		    if (a.containsKey("nominalCapacity1")) {
		    	nominalCapacity1 = (String)morphDynaBean.get("nominalCapacity1");
			}
		    logger.info("额定容量1=" + nominalCapacity1);
		    if (a.containsKey("timeDeixis")) {
		    	timeDeixis = (String)morphDynaBean.get("timeDeixis");
			}
		    logger.info("曝光时间指示=" + timeDeixis);
		    if (a.containsKey("exposureControl")) {
		    	exposureControl = (String)morphDynaBean.get("exposureControl");
			}
		    logger.info("自照曝光控制=" + exposureControl);
		    if (a.containsKey("createtime")) {
		    	createtime = (String)morphDynaBean.get("createtime");
			}
		    logger.info("测量时间=" + createtime);
		    if (a.containsKey("id")) {
		    	taskId = (String)morphDynaBean.get("id");
			}
		    logger.info("任务id=" + taskId);
		    
		    ROMS_SZ_TASK task = romssztaskService.query(taskId);
		    if (task == null){
		    	jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		    }
		    
		    task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		    task.setNominalCapacity1(nominalCapacity1 == null?"":nominalCapacity1);
		    task.setPlace(place == null?"":place);
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setStandard(standard == null?"":standard);
		    task.setTimeDeixis(timeDeixis == null?"":timeDeixis);
		    task.setPass(0);
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setAddress(address == null?"":address);
		    task.setxRayNum(xRayNum == null?"":xRayNum);
		    task.setExposureControl(exposureControl == null?"":exposureControl);
		    task.setTaskData(json);
		    
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		    	task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		    	task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		      
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板421任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_421_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_421_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
		    String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String address = "";
			String standard = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceModel = "";
			String nominalCapacity = "";
			String place = "";
			String deviceType="";
			String createtime = time;
			String checkDeviceVender = "";
			String checkDeviceNum = "";
			String xRayNum = "";
			String timeDeixis = "";
			String temperature = "";
			String humidity = "";
			String taskId = "";
			String item2 = "";
		    JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    if (a.containsKey("projectNum")) {
		    	projectNum = (String)morphDynaBean.get("projectNum");
			}
		    logger.info("项目编号=" + projectNum);
		    if (a.containsKey("checkUnitName")) {
		    	checkUnitName = (String)morphDynaBean.get("checkUnitName");
			}
		    logger.info("受检单位名称=" + checkUnitName);
		    if (a.containsKey("checkUnitAddress")) {
		    	checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
			}
		    logger.info("受检单位地址=" + checkUnitAddress);
		    if (a.containsKey("address")) {
		    	address = (String)morphDynaBean.get("address");
			}
		    logger.info("检测地点=" + address);
		    if (a.containsKey("monitorType")) {
		    	monitorType = (String)morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
		    if (a.containsKey("checkDeviceName")) {
		    	checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
			}
		    logger.info("受检设备名称=" + checkDeviceName);
		    if (a.containsKey("checkDeviceModel")) {
		    	checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
			}
		    logger.info("受检设备型号=" + checkDeviceModel);
		    if (a.containsKey("nominalCapacity")) {
		    	nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
			}
		    logger.info("额定容量电压=" + nominalCapacity);
		    if (a.containsKey("place")) {
		    	place = (String)morphDynaBean.get("place");
			}
		    logger.info("检测场所=" + place);
		    if (a.containsKey("deviceType")) {
		    	deviceType = (String)morphDynaBean.get("deviceType");
			}
		    logger.info("设备类型=" + deviceType);
		    if (a.containsKey("createtime")) {
		    	createtime = (String)morphDynaBean.get("createtime");
			}
		    logger.info("测量时间=" + createtime);
		    if (a.containsKey("checkDeviceVender")) {
		    	checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
			}
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
		    if (a.containsKey("xRayNum")) {
		    	xRayNum = (String) morphDynaBean.get("xRayNum");
			}
		    logger.info("x射线管编号="+xRayNum);
		    if (a.containsKey("timeDeixis")) {
		    	timeDeixis = (String)morphDynaBean.get("timeDeixis");
			}
		    logger.info("有无时间指示=" + timeDeixis);
		    if (a.containsKey("temperature")) {
		    	temperature = (String)morphDynaBean.get("temperature");
			}
		    logger.info("温度=" + temperature);
		    if (a.containsKey("humidity")) {
		    	humidity = (String)morphDynaBean.get("humidity");
			}
		    logger.info("湿度=" + humidity);
		    if (a.containsKey("standard")) {
		    	standard = (String)morphDynaBean.get("standard");
			}
		    logger.info("检测依据=" + standard);
		    if (a.containsKey("item2")) {
		    	item2 = (String) morphDynaBean.get("item2");
			}
		    logger.info("设备用途="+item2);
		    
		    if (a.containsKey("id")) {
		    	taskId = (String)morphDynaBean.get("id");
			}
		    logger.info("任务id=" + taskId);
		    
		    ROMS_SZ_TASK task = romssztaskService.query(taskId);
		    if (task == null){
		    	jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		    }
		    
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setAddress(address == null?"":address);
		    task.setStandard(standard == null?"":standard);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		    task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		    task.setPlace(place == null?"":place);
		    task.setDeviceType(deviceType ==null?"":deviceType);
		    task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setxRayNum(xRayNum == null?"":xRayNum);
		    task.setTimeDeixis(timeDeixis == null?"":timeDeixis);
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setInserttime(datetime);
		    task.setPass(0);
		    task.setItem2(item2 == null?"":item2);
		    task.setTaskData(json);
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		    	task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		      
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板422任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_422_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_422_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
			    return null;
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
		    String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String taskId = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String xRayNum = "";
			String nominalCapacity = "";
			String nominalCapacity1 = "";
			String item2 = "";
			String brightnessControl = "";
			String imageIntensifier = "";
			
		    JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    if (a.containsKey("projectNum")) {
		    	projectNum = (String)morphDynaBean.get("projectNum");
			}
		    logger.info("项目编号=" + projectNum);
		    if (a.containsKey("checkUnitName")) {
		    	checkUnitName = (String)morphDynaBean.get("checkUnitName");
			}
		    logger.info("受检单位名称=" + checkUnitName);
		    if (a.containsKey("checkUnitAddress")) {
		    	checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
			}
		    logger.info("受检单位地址=" + checkUnitAddress);
		    if (a.containsKey("monitorType")) {
		    	monitorType = (String)morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
		    if (a.containsKey("address")) {
		    	address = (String)morphDynaBean.get("address");
			}
		    logger.info("检测地点=" + address);
		    if (a.containsKey("checkDeviceName")) {
		    	checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
			}
		    logger.info("受检设备名称=" + checkDeviceName);
		    if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
		    if (a.containsKey("checkDeviceModel")) {
		    	checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
			}
		    logger.info("受检设备型号=" + checkDeviceModel);
		    if (a.containsKey("checkDeviceVender")) {
		    	checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
			}
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    if (a.containsKey("xRayNum")) {
		    	xRayNum = (String) morphDynaBean.get("xRayNum");
			}
		    logger.info("x射线管编号="+xRayNum);
		    if (a.containsKey("place")) {
		    	place = (String)morphDynaBean.get("place");
			}
		    logger.info("检测场所=" + place);
		    if (a.containsKey("standard")) {
		    	standard = (String)morphDynaBean.get("standard");
			}
		    logger.info("检测依据=" + standard);
		    if (a.containsKey("temperature")) {
		    	temperature = (String)morphDynaBean.get("temperature");
			}
		    logger.info("温度=" + temperature);
		    if (a.containsKey("humidity")) {
		    	humidity = (String)morphDynaBean.get("humidity");
			}
		    logger.info("湿度=" + humidity);
		    if (a.containsKey("nominalCapacity")) {
		    	nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
			}
		    logger.info("额定容量电压=" + nominalCapacity);
		    if (a.containsKey("nominalCapacity1")) {
		    	nominalCapacity1 = (String)morphDynaBean.get("nominalCapacity1");
			}
		    logger.info("额定容量1=" + nominalCapacity1);
		    if (a.containsKey("brightnessControl")) {
		    	brightnessControl = (String)morphDynaBean.get("brightnessControl");
			}
		    logger.info("有无自动亮度控制=" + brightnessControl);
		    if (a.containsKey("imageIntensifier")) {
		    	imageIntensifier = (String)morphDynaBean.get("imageIntensifier");
			}
		    logger.info("有无影像接收器=" + imageIntensifier);
		    if (a.containsKey("item2")) {
		    	item2 = (String) morphDynaBean.get("item2");
			}
		    logger.info("设备用途="+item2);
		    if (a.containsKey("createtime")) {
		    	createtime = (String)morphDynaBean.get("createtime");
			}
		    logger.info("测量时间=" + createtime);
		    if (a.containsKey("id")) {
		    	taskId = (String)morphDynaBean.get("id");
			}
		    logger.info("任务id=" + taskId);
		    
		    ROMS_SZ_TASK task = romssztaskService.query(taskId);
		    if (task == null){
		    	jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		    }
		    
		    task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		    task.setNominalCapacity1(nominalCapacity1 == null?"":nominalCapacity1);
		    task.setPlace(place == null?"":place);
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setStandard(standard == null?"":standard);
		    task.setPass(0);
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setAddress(address == null?"":address);
		    task.setxRayNum(xRayNum == null?"":xRayNum);
		    task.setImageIntensifier(imageIntensifier == null?"":imageIntensifier);
		    task.setBrightnessControl(brightnessControl == null?"":brightnessControl);
		    task.setItem2(item2 == null?"":item2);
		    task.setTaskData(json);
		    
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		    	task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		    
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板424任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_424_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_424_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
			    return null;
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
		    String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String taskId = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String xRayNum = "";
			String nominalCapacity = "";
			String nominalCapacity1 = "";
			String exposureControl = "";
			
		    JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    if (a.containsKey("projectNum")) {
		    	projectNum = (String)morphDynaBean.get("projectNum");
			}
		    logger.info("项目编号=" + projectNum);
		    if (a.containsKey("checkUnitName")) {
		    	checkUnitName = (String)morphDynaBean.get("checkUnitName");
			}
		    logger.info("受检单位名称=" + checkUnitName);
		    if (a.containsKey("checkUnitAddress")) {
		    	checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
			}
		    logger.info("受检单位地址=" + checkUnitAddress);
		    if (a.containsKey("monitorType")) {
		    	monitorType = (String)morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
		    if (a.containsKey("address")) {
		    	address = (String)morphDynaBean.get("address");
			}
		    logger.info("检测地点=" + address);
		    if (a.containsKey("checkDeviceName")) {
		    	checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
			}
		    logger.info("受检设备名称=" + checkDeviceName);
		    if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
		    if (a.containsKey("checkDeviceModel")) {
		    	checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
			}
		    logger.info("受检设备型号=" + checkDeviceModel);
		    if (a.containsKey("checkDeviceVender")) {
		    	checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
			}
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    if (a.containsKey("xRayNum")) {
		    	xRayNum = (String) morphDynaBean.get("xRayNum");
			}
		    logger.info("x射线管编号="+xRayNum);
		    if (a.containsKey("place")) {
		    	place = (String)morphDynaBean.get("place");
			}
		    logger.info("检测场所=" + place);
		    if (a.containsKey("standard")) {
		    	standard = (String)morphDynaBean.get("standard");
			}
		    logger.info("检测依据=" + standard);
		    if (a.containsKey("temperature")) {
		    	temperature = (String)morphDynaBean.get("temperature");
			}
		    logger.info("温度=" + temperature);
		    if (a.containsKey("humidity")) {
		    	humidity = (String)morphDynaBean.get("humidity");
			}
		    logger.info("湿度=" + humidity);
		    if (a.containsKey("nominalCapacity")) {
		    	nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
			}
		    logger.info("额定容量电压=" + nominalCapacity);
		    if (a.containsKey("nominalCapacity1")) {
		    	nominalCapacity1 = (String)morphDynaBean.get("nominalCapacity1");
			}
		    logger.info("额定容量1=" + nominalCapacity1);
		    if (a.containsKey("exposureControl")) {
		    	exposureControl = (String)morphDynaBean.get("exposureControl");
			}
		    logger.info("自照曝光控制=" + exposureControl);
		    if (a.containsKey("createtime")) {
		    	createtime = (String)morphDynaBean.get("createtime");
			}
		    logger.info("测量时间=" + createtime);
		    if (a.containsKey("id")) {
		    	taskId = (String)morphDynaBean.get("id");
			}
		    logger.info("任务id=" + taskId);
		    
		    ROMS_SZ_TASK task = romssztaskService.query(taskId);
		    if (task == null){
		    	jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		    }
		    
		    task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		    task.setNominalCapacity1(nominalCapacity1 == null?"":nominalCapacity1);
		    task.setPlace(place == null?"":place);
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setStandard(standard == null?"":standard);
		    task.setPass(0);
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setAddress(address == null?"":address);
		    task.setxRayNum(xRayNum == null?"":xRayNum);
		    task.setExposureControl(exposureControl == null?"":exposureControl);
		    task.setTaskData(json);
		    
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		        task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		    
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板451任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_451_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_451_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
		    String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String taskId = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String xRayNum = "";
			String nominalCapacity = "";
			String nominalCapacity1 = "";
			String exposureControl = "";
			String timeDeixis = "";
			
		    JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    if (a.containsKey("projectNum")) {
		    	projectNum = (String)morphDynaBean.get("projectNum");
			}
		    logger.info("项目编号=" + projectNum);
		    if (a.containsKey("checkUnitName")) {
		    	checkUnitName = (String)morphDynaBean.get("checkUnitName");
			}
		    logger.info("受检单位名称=" + checkUnitName);
		    if (a.containsKey("checkUnitAddress")) {
		    	checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
			}
		    logger.info("受检单位地址=" + checkUnitAddress);
		    if (a.containsKey("monitorType")) {
		    	monitorType = (String)morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
		    if (a.containsKey("address")) {
		    	address = (String)morphDynaBean.get("address");
			}
		    logger.info("检测地点=" + address);
		    if (a.containsKey("checkDeviceName")) {
		    	checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
			}
		    logger.info("受检设备名称=" + checkDeviceName);
		    if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
		    if (a.containsKey("checkDeviceModel")) {
		    	checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
			}
		    logger.info("受检设备型号=" + checkDeviceModel);
		    if (a.containsKey("checkDeviceVender")) {
		    	checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
			}
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    if (a.containsKey("xRayNum")) {
		    	xRayNum = (String) morphDynaBean.get("xRayNum");
			}
		    logger.info("x射线管编号="+xRayNum);
		    if (a.containsKey("place")) {
		    	place = (String)morphDynaBean.get("place");
			}
		    logger.info("检测场所=" + place);
		    if (a.containsKey("standard")) {
		    	standard = (String)morphDynaBean.get("standard");
			}
		    logger.info("检测依据=" + standard);
		    if (a.containsKey("temperature")) {
		    	temperature = (String)morphDynaBean.get("temperature");
			}
		    logger.info("温度=" + temperature);
		    if (a.containsKey("humidity")) {
		    	humidity = (String)morphDynaBean.get("humidity");
			}
		    logger.info("湿度=" + humidity);
		    if (a.containsKey("nominalCapacity")) {
		    	nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
			}
		    logger.info("额定容量电压=" + nominalCapacity);
		    if (a.containsKey("nominalCapacity1")) {
		    	nominalCapacity1 = (String)morphDynaBean.get("nominalCapacity1");
			}
		    logger.info("额定容量1=" + nominalCapacity1);
		    if (a.containsKey("timeDeixis")) {
		    	timeDeixis = (String)morphDynaBean.get("timeDeixis");
			}
		    logger.info("曝光时间指示=" + timeDeixis);
		    if (a.containsKey("exposureControl")) {
		    	exposureControl = (String)morphDynaBean.get("exposureControl");
			}
		    logger.info("自照曝光控制=" + exposureControl);
		    if (a.containsKey("createtime")) {
		    	createtime = (String)morphDynaBean.get("createtime");
			}
		    logger.info("测量时间=" + createtime);
		    if (a.containsKey("id")) {
		    	taskId = (String)morphDynaBean.get("id");
			}
		    logger.info("任务id=" + taskId);
		    
		    ROMS_SZ_TASK task = romssztaskService.query(taskId);
		    if (task == null){
		    	jsonString = "{'success':false,'msg':'没有该任务'}";
		        out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
		    }
		    
		    task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		    task.setNominalCapacity1(nominalCapacity1 == null?"":nominalCapacity1);
		    task.setPlace(place == null?"":place);
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setStandard(standard == null?"":standard);
		    task.setTimeDeixis(timeDeixis == null?"":timeDeixis);
		    task.setPass(0);
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setAddress(address == null?"":address);
		    task.setxRayNum(xRayNum == null?"":xRayNum);
		    task.setExposureControl(exposureControl == null?"":exposureControl);
		    task.setTaskData(json);
		    
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		    	task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		        task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		    
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 模板488任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_488_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_488_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = formatString(new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8")).replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String objectWork = "";
			String standard = "";
			String place = "";
			String address = "";
			String testingProject = "";
			String deviceFactor = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String note = "";
			String taskId = "";
			
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			if (a.containsKey("projectNum")) {
				projectNum = (String) morphDynaBean.get("projectNum");
			}
			logger.info("项目编号="+projectNum);
			if (a.containsKey("checkUnitName")) {
				checkUnitName = (String) morphDynaBean.get("checkUnitName");
			}
			logger.info("受检单位名称="+checkUnitName);
			if (a.containsKey("checkUnitAddress")) {
				checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			}
			logger.info("受检单位地址="+checkUnitAddress);
			if (a.containsKey("objectWork")) {
				objectWork = (String) morphDynaBean.get("objectWork");
			}
			logger.info("检测对象及工况="+objectWork);
			if (a.containsKey("standard")) {
				standard = (String) morphDynaBean.get("standard");
			}
			logger.info("检测依据="+standard);
			if (a.containsKey("place")) {
				place = (String) morphDynaBean.get("place");
			}
			logger.info("检测场所="+place);
			if (a.containsKey("address")) {
				address = (String) morphDynaBean.get("address");
			}
			logger.info("检测地点="+address);
			if (a.containsKey("testingProject")) {
				testingProject = (String) morphDynaBean.get("testingProject");
			}
			logger.info("检测项目="+testingProject);
			if (a.containsKey("DeviceFactor")) {
				deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			}
			logger.info("检测仪器校准因子="+deviceFactor);
			if (a.containsKey("temperature")) {
				temperature = (String) morphDynaBean.get("temperature");
			}
			logger.info("温度="+temperature);
			if (a.containsKey("humidity")) {
				humidity = (String) morphDynaBean.get("humidity");
			}
			logger.info("湿度="+humidity);
			if (a.containsKey("createtime")) {
				createtime = (String) morphDynaBean.get("createtime");
			}
			logger.info("测量时间="+createtime);
			if (a.containsKey("note")) {
				note = (String) morphDynaBean.get("note");
			}
			logger.info("备注="+note);
			if (a.containsKey("id")) {
				taskId = (String) morphDynaBean.get("id");
			}
			logger.info("任务id="+taskId);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
			task.setInserttime(datetime);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setNote(note==null?"":note);
			task.setPass(0);
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setAddress(address==null?"":address);
			task.setObjectWork(objectWork==null?"":objectWork);
			task.setTestingProject(testingProject==null?"":testingProject);
			task.setMonitorType("本底检测");
			task.setNominalCapacity("");
			task.setCheckDeviceNum("");
			task.setTaskData(json);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	
	/**
	 * 模板493任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_493_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_493_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"),"utf-8").replaceAll("[\\t\\n\\r]", "");
			logger.info("json="+json);
			String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			//获取当前时间进行转换，因为阿里云服务器直接获取当前时间的话时间会获取不正确
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date=new Date();
			String time = sdf.format(date);
			Date datetime = sdf.parse(time);
			logger.info("当前时间="+datetime);
			
			String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String testingProject = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String note = "";
			String taskId = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String factor = "";
			String xRayNum = "";
			String xRayNum1 = "";
			String nominalCapacity = "";
			String nominalCapacity1 = "";
			String conditions1 = "";
			String conditions = "";
			String deviceFactor = "";
			String deviceFactor1 = "";
			String voltage = "";
			String current = "";
			String seconds = "";
			String mSeconds = "";
			String voltageRange1 = "";
			String current1 = "";
			String exposureTimeRange1 = "";
			String weekWork = "";
			String shooting1 = "";
			String item2 = "";
			String item3 = "";
			String item4 = "";
			String item5 = "";
			String item6 = "";
			String other = "";
			
			JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(json);
			Object[] objArray = array.toArray();
			System.out.println("array length--- "+objArray.length);
			a = JSONObject.fromObject(objArray[0]);
			bean = JSONObject.toBean(a);
			MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
			if (a.containsKey("projectNum")) {
				projectNum = (String) morphDynaBean.get("projectNum");
			}
			logger.info("项目编号="+projectNum);
			if (a.containsKey("checkUnitName")) {
				checkUnitName = (String) morphDynaBean.get("checkUnitName");
			}
			logger.info("受检单位名称="+checkUnitName);
			if (a.containsKey("checkUnitAddress")) {
				checkUnitAddress = (String) morphDynaBean.get("checkUnitAddress");
			}
			logger.info("受检单位地址="+checkUnitAddress);
			if (a.containsKey("monitorType")) {
				monitorType = (String) morphDynaBean.get("monitorType");
			}
			logger.info("检测类型="+monitorType);
			if (a.containsKey("standard")) {
				standard = (String) morphDynaBean.get("standard");
			}
			logger.info("检测依据="+standard);
			if (a.containsKey("address")) {
				address = (String) morphDynaBean.get("address");
			}
			logger.info("检测地点="+address);
			if (a.containsKey("testingProject")) {
				testingProject = (String) morphDynaBean.get("testingProject");
			}
			logger.info("检测项目="+testingProject);
			if (a.containsKey("xRayNum1")) {
				xRayNum1 = (String) morphDynaBean.get("xRayNum1");
			}
			logger.info("x射线管编号(摄影)="+xRayNum1);
			if (a.containsKey("xRayNum")) {
				xRayNum = (String) morphDynaBean.get("xRayNum");
			}
			logger.info("x射线管编号(透视)="+xRayNum);
			if (a.containsKey("checkDeviceName")) {
				checkDeviceName = (String) morphDynaBean.get("checkDeviceName");
			}
			logger.info("受检设备名称="+checkDeviceName);
			if (a.containsKey("checkDeviceNum")) {
				checkDeviceNum = (String) morphDynaBean.get("checkDeviceNum");
			}
			logger.info("受检设备编号="+checkDeviceNum);
			if (a.containsKey("checkDeviceModel")) {
				checkDeviceModel = (String) morphDynaBean.get("checkDeviceModel");
			}
			logger.info("受检设备型号="+checkDeviceModel);
			if (a.containsKey("checkDeviceVender")) {
				checkDeviceVender = (String) morphDynaBean.get("checkDeviceVender");
			}
			logger.info("受检设备厂家="+checkDeviceVender);
			if (a.containsKey("DeviceFactor1")) {
				deviceFactor1 = (String) morphDynaBean.get("DeviceFactor1");
			}
			logger.info("摄影检测仪器校准因子="+deviceFactor1);
			if (a.containsKey("DeviceFactor")) {
				deviceFactor = (String) morphDynaBean.get("DeviceFactor");
			}
			logger.info("透视检测仪器校准因子="+deviceFactor);
			if (a.containsKey("Factor")) {
				factor = (String) morphDynaBean.get("Factor");
			}
			logger.info("137Cs校准因子="+factor);
			if (a.containsKey("nominalCapacity1")) {
				nominalCapacity1 = (String) morphDynaBean.get("nominalCapacity1");
			}
			logger.info("额定容量（摄影）="+nominalCapacity1);
			if (a.containsKey("nominalCapacity")) {
				nominalCapacity = (String) morphDynaBean.get("nominalCapacity");
			}
			logger.info("额定容量（透视）="+nominalCapacity);
			if (a.containsKey("conditions1")) {
				conditions1 = (String) morphDynaBean.get("conditions1");
			}
			logger.info("检测条件（摄影）="+conditions1);
			if (a.containsKey("conditions")) {
				conditions = (String) morphDynaBean.get("conditions");
			}
			logger.info("检测条件（摄影）="+conditions);
			if (a.containsKey("place")) {
				place = (String) morphDynaBean.get("place");
			}
			logger.info("检测场所="+place);
			if (a.containsKey("temperature")) {
				temperature = (String) morphDynaBean.get("temperature");
			}
			logger.info("温度="+temperature);
			if (a.containsKey("humidity")) {
				humidity = (String) morphDynaBean.get("humidity");
			}
			logger.info("湿度="+humidity);
			if (a.containsKey("createtime")) {
				createtime = (String) morphDynaBean.get("createtime");
			}
			logger.info("测量时间="+createtime);
			if (a.containsKey("note")) {
				note = (String) morphDynaBean.get("note");
			}
			logger.info("备注="+note);
			if (a.containsKey("exposureTimeRange1")) {
				exposureTimeRange1 = (String) morphDynaBean.get("exposureTimeRange1");
			}
			logger.info("单次最长曝光时间="+exposureTimeRange1);
			if (a.containsKey("weekWork")) {
				weekWork = (String) morphDynaBean.get("weekWork");
			}
			logger.info("每周工作天数="+weekWork);
			if (a.containsKey("shooting1")) {
				shooting1 = (String) morphDynaBean.get("shooting1");
			}
			logger.info("每天最多曝光="+shooting1);
			if (a.containsKey("id")) {
				taskId = (String) morphDynaBean.get("id");
			}
			logger.info("任务id="+taskId);
			if (a.containsKey("voltage")) {
				voltage = (String) morphDynaBean.get("voltage");
			}
			logger.info("电压="+voltage);
			if (a.containsKey("current")) {
				current = (String) morphDynaBean.get("current");
			}
			logger.info("电流="+current);
			if (a.containsKey("seconds")) {
				seconds = (String) morphDynaBean.get("seconds");
			}
			logger.info("对应检测条件的s="+seconds);
			if (a.containsKey("mSeconds")) {
				mSeconds = (String) morphDynaBean.get("mSeconds");
			}
			logger.info("对应检测条件的mAs="+mSeconds);
			if (a.containsKey("item2")) {
				item2 = (String) morphDynaBean.get("item2");
			}
			logger.info("设备用途="+item2);
			if (a.containsKey("item3")) {
				item3 = (String) morphDynaBean.get("item3");
			}
			logger.info("摄影模式="+item3);
			if (a.containsKey("item4")) {
				item4 = (String) morphDynaBean.get("item4");
			}
			logger.info("方向1="+item4);
			if (a.containsKey("item5")) {
				item5 = (String) morphDynaBean.get("item5");
			}
			logger.info("方向2="+item5);
			if (a.containsKey("item6")) {
				item6 = (String) morphDynaBean.get("item6");
			}
			logger.info("方向3="+item6);
			if (a.containsKey("other")) {
				other = (String) morphDynaBean.get("other");
			}
			logger.info("其他="+other);
			
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			if (task == null) {
				jsonString="{'success':false,'msg':'没有该任务'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
				return null;
			}
			
			task.setCheckDeviceModel(checkDeviceModel==null?"":checkDeviceModel);
			task.setCheckDeviceName(checkDeviceName==null?"":checkDeviceName);
			task.setCheckDeviceNum(checkDeviceNum==null?"":checkDeviceNum);
			task.setCheckDeviceVender(checkDeviceVender==null?"":checkDeviceVender);
			task.setCheckUnitAddress(checkUnitAddress==null?"":checkUnitAddress);
			task.setCheckUnitName(checkUnitName==null?"":checkUnitName);
			task.setConditions1(conditions1==null?"":conditions1);	
			task.setConditions(conditions==null?"":conditions);
			task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
			task.setInserttime(datetime);
			task.setMonitorType(monitorType==null?"":monitorType);
			task.setNominalCapacity(nominalCapacity1==null?"":nominalCapacity1);
			task.setNominalCapacity(nominalCapacity==null?"":nominalCapacity);
			task.setPlace(place==null?"":place);
			task.setProjectNum(projectNum==null?"":projectNum);
			task.setStandard(standard==null?"":standard);
			task.setVoltageRange1(voltageRange1==null?"":voltageRange1);
			task.setCurrent1(current1==null?"":current1);
			task.setExposureTimeRange1(exposureTimeRange1==null?"":exposureTimeRange1);
			task.setWeekWork(weekWork==null?"":weekWork);
			task.setShooting1(shooting1==null?"":shooting1);
			task.setNote(note==null?"":note);
			task.setPass(0);
			task.setDeviceFactor(deviceFactor1==null?0:Float.parseFloat(deviceFactor1));
			task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
			task.setFactor(factor==null?0:Float.parseFloat(factor));
			task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
			task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
			task.setAddress(address==null?"":address);
			task.setTestingProject(testingProject==null?"":testingProject);
			task.setxRayNum(xRayNum1==null?"":xRayNum1);
			task.setxRayNum(xRayNum==null?"":xRayNum);
			task.setItem2(item2==null?"":item2);
			task.setItem3(item3==null?"":item3);
			task.setItem4(item4==null?"":item4);
			task.setItem5(item5==null?"":item5);
			task.setItem6(item6==null?"":item6);
			task.setOther(other==null?"":other);
			task.setTaskData(json);
			
			//判断是否有存签名照，有的话就表示该次请求是更新
			if (task.getRecordUrl() == null || task.getRecordUrl().equals("")) {
				task.setRecordUrl(recordUrl==null?"":recordUrl);
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().equals("")) {
				task.setCheckUrl(checkUrl==null?"":checkUrl);
			}
			romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	
	
	
	/**
	 * 模板495任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_495_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_495_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
			    return null;
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
			String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String testingProject = "";
			String deviceFactor = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String other = "";
			String taskId = "";
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String xRayNum = "";
			String nominalCapacity = "";
			String conditions = "";
			String factor = "";
			String voltage = "";
			String current = "";
			String item2 = "";
			String item3 = "";
			String item4 = "";
			String item5 = "";
			String item6 = "";
			String item7 = "";
			String item8 = "";
			String item9 = "";
			
			JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    if (a.containsKey("projectNum")) {
		    	projectNum = (String)morphDynaBean.get("projectNum");
		    }
		    logger.info("项目编号=" + projectNum);
		    if (a.containsKey("checkUnitName")) {
		    	checkUnitName = (String)morphDynaBean.get("checkUnitName");
			}
		    logger.info("受检单位名称=" + checkUnitName);
		    if (a.containsKey("checkUnitAddress")) {
		    	checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
			}
		    logger.info("受检单位地址=" + checkUnitAddress);
		    if (a.containsKey("monitorType")) {
		    	monitorType = (String)morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
		    if (a.containsKey("standard")) {
		    	standard = (String)morphDynaBean.get("standard");
			}
		    logger.info("检测依据=" + standard);
		    if (a.containsKey("address")) {
		    	address = (String) morphDynaBean.get("address");
			}
			logger.info("检测地点="+address);
			if (a.containsKey("testingProject")) {
				testingProject = (String) morphDynaBean.get("testingProject");
			}
			logger.info("检测项目="+testingProject);
			if (a.containsKey("place")) {
				place = (String)morphDynaBean.get("place");
			}
		    logger.info("检测场所=" + place);
		    if (a.containsKey("checkDeviceName")) {
		    	checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
			}
		    logger.info("受检设备名称=" + checkDeviceName);
		    if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
		    if (a.containsKey("checkDeviceModel")) {
		    	checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
			}
		    logger.info("受检设备型号=" + checkDeviceModel);
		    if (a.containsKey("checkDeviceVender")) {
		    	checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
			}
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    if (a.containsKey("xRayNum")) {
		    	xRayNum = (String) morphDynaBean.get("xRayNum");
			}
			logger.info("x射线管编号="+xRayNum);
			if (a.containsKey("nominalCapacity")) {
				nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
			}
		    logger.info("额定容量=" + nominalCapacity);
		    if (a.containsKey("conditions")) {
		    	conditions = (String)morphDynaBean.get("conditions");
			}
		    logger.info("检测条件=" + conditions);
		    if (a.containsKey("DeviceFactor")) {
		    	deviceFactor = (String)morphDynaBean.get("DeviceFactor");
			}
		    logger.info("检测仪器校准因子=" + deviceFactor);
		    if (a.containsKey("Factor")) {
		    	factor = (String)morphDynaBean.get("Factor");
			}
		    logger.info("137Cs校准因子=" + factor);
		    if (a.containsKey("temperature")) {
		    	temperature = (String)morphDynaBean.get("temperature");
			}
		    logger.info("温度=" + temperature);
		    if (a.containsKey("humidity")) {
		    	humidity = (String)morphDynaBean.get("humidity");
			}
		    logger.info("湿度=" + humidity);
		    if (a.containsKey("createtime")) {
		    	createtime = (String)morphDynaBean.get("createtime");
			}
		    logger.info("测量时间=" + createtime);
		    if (a.containsKey("other")) {
		    	other = (String)morphDynaBean.get("other");
			}
		    logger.info("其他=" + other);
		    if (a.containsKey("id")) {
		    	taskId = (String)morphDynaBean.get("id");
			}
		    logger.info("任务id=" + taskId);
		    if (a.containsKey("voltage")) {
		    	voltage = (String) morphDynaBean.get("voltage");
			}
			logger.info("电压="+voltage);
			if (a.containsKey("current")) {
				current = (String) morphDynaBean.get("current");
			}
			logger.info("电流="+current);
			if (a.containsKey("item2")) {
				item2 = (String) morphDynaBean.get("item2");
			}
			logger.info("设备用途="+item2);
			if (a.containsKey("item3")) {
				item3 = (String) morphDynaBean.get("item3");
			}
			logger.info("射线照射方向1="+item3);
			if (a.containsKey("item4")) {
				item4 = (String) morphDynaBean.get("item4");
			}
			logger.info("射线照射方向2="+item4);
			if (a.containsKey("item5")) {
				item5 = (String) morphDynaBean.get("item5");
			}
			logger.info("射线照射方向3="+item5);
			
			ROMS_SZ_TASK task = this.romssztaskService.query(taskId);
			if (task == null) {
				jsonString = "{'success':false,'msg':'没有该任务'}";
				out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
			}
			
		    String value = "";
		    if (!voltage.equals("")) {
		    	value += ","+voltage+"kv";
			}
			if (!current.equals("")) {
				value += ","+current+"mA";
			}
			
			
			task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setConditions(conditions+value);
		    task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		    task.setPlace(place == null?"":place);
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setStandard(standard == null?"":standard);
		    task.setOther(other == null?"":other);
		    task.setPass(0);
		    task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
		    task.setFactor(factor==null?0:Float.parseFloat(factor));
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setAddress(address == null?"":address);
		    task.setTestingProject(testingProject == null?"":testingProject);
		    task.setxRayNum(xRayNum == null?"":xRayNum);
		    task.setItem2(item2 == null?"":item2);
		    task.setItem3(item3 == null?"":item3);
		    task.setItem4(item4 == null?"":item4);
		    task.setItem5(item5 == null?"":item5);
		    task.setItem6(item6 == null?"":item6);
		    task.setTaskData(json);
		    
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		    	task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		    	task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	
	/**
	 * 模板497任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_497_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_497_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
			    return null;
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
			String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String monitorType = "";
			String standard = "";
			String address = "";
			String testingProject = "";
			String carNum="";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			String xRayNum = "";
			String nominalCapacity = "";
			String conditions = "";
			String factor = "";
			String deviceFactor = "";
			String createtime = time;
			String temperature = "";
			String humidity = "";
			String other = "";
			String taskId = "";
			String item2 = "";
			String item3 = "";
			String item4 = "";
			String item5 = "";
			String item6 = "";
			String item7 = "";
			String item8 = "";
			String item9 = "";
			
			JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    if (a.containsKey("projectNum")) {
		    	projectNum = (String)morphDynaBean.get("projectNum");
		    }
		    logger.info("项目编号=" + projectNum);
		    if (a.containsKey("checkUnitName")) {
		    	checkUnitName = (String)morphDynaBean.get("checkUnitName");
			}
		    logger.info("受检单位名称=" + checkUnitName);
		    if (a.containsKey("checkUnitAddress")) {
		    	checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
			}
		    logger.info("受检单位地址=" + checkUnitAddress);
		    if (a.containsKey("monitorType")) {
		    	monitorType = (String)morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
		    if (a.containsKey("standard")) {
		    	standard = (String)morphDynaBean.get("standard");
			}
		    logger.info("检测依据=" + standard);
		    if (a.containsKey("address")) {
		    	address = (String) morphDynaBean.get("address");
			}
			logger.info("检测地点="+address);
			if (a.containsKey("testingProject")) {
				testingProject = (String) morphDynaBean.get("testingProject");
			}
			logger.info("检测项目="+testingProject);
			if (a.containsKey("carNum")) {
				carNum = (String) morphDynaBean.get("carNum");
			}
			logger.info("受检车牌号码="+carNum);
			
		    if (a.containsKey("checkDeviceName")) {
		    	checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
			}
		    logger.info("受检设备名称=" + checkDeviceName);
		    if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
		    if (a.containsKey("checkDeviceModel")) {
		    	checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
			}
		    logger.info("受检设备型号=" + checkDeviceModel);
		    if (a.containsKey("checkDeviceVender")) {
		    	checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
			}
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    if (a.containsKey("xRayNum")) {
		    	xRayNum = (String) morphDynaBean.get("xRayNum");
			}
			logger.info("x射线管编号="+xRayNum);
			if (a.containsKey("nominalCapacity")) {
				nominalCapacity = (String)morphDynaBean.get("nominalCapacity");
			}
		    logger.info("额定容量=" + nominalCapacity);
		    if (a.containsKey("conditions")) {
		    	conditions = (String)morphDynaBean.get("conditions");
			}
		    logger.info("检测条件=" + conditions);
		    if (a.containsKey("DeviceFactor")) {
		    	deviceFactor = (String)morphDynaBean.get("DeviceFactor");
			}
		    logger.info("检测仪器校准因子=" + deviceFactor);
		    if (a.containsKey("Factor")) {
		    	factor = (String)morphDynaBean.get("Factor");
			}
		    logger.info("137Cs校准因子=" + factor);
		    if (a.containsKey("temperature")) {
		    	temperature = (String)morphDynaBean.get("temperature");
			}
		    logger.info("温度=" + temperature);
		    if (a.containsKey("humidity")) {
		    	humidity = (String)morphDynaBean.get("humidity");
			}
		    logger.info("湿度=" + humidity);
		    if (a.containsKey("createtime")) {
		    	createtime = (String)morphDynaBean.get("createtime");
			}
		    logger.info("测量时间=" + createtime);
		    if (a.containsKey("other")) {
		    	other = (String)morphDynaBean.get("other");
			}
		    logger.info("其他=" + other);
		    if (a.containsKey("id")) {
		    	taskId = (String)morphDynaBean.get("id");
			}
		    logger.info("任务id=" + taskId);
		   
			if (a.containsKey("item2")) {
				item2 = (String) morphDynaBean.get("item2");
			}
			logger.info("设备用途="+item2);
			if (a.containsKey("item3")) {
				item3 = (String) morphDynaBean.get("item3");
			}
			logger.info("其他="+item3);
			if (a.containsKey("item5")) {
				item5 = (String) morphDynaBean.get("item5");
			}
			logger.info("射线照射方向="+item5);
			ROMS_SZ_TASK task = this.romssztaskService.query(taskId);
			if (task == null) {
				jsonString = "{'success':false,'msg':'没有该任务'}";
				out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
			}
			
		   
		 
			
			task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setConditions(conditions == null?"":conditions);
		    task.setCarNum(carNum == null?"":carNum);
		    task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setNominalCapacity(nominalCapacity == null?"":nominalCapacity);
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setStandard(standard == null?"":standard);
		    task.setOther(other == null?"":other);
		    task.setPass(0);
		    task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
		    task.setFactor(factor==null?0:Float.parseFloat(factor));
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setAddress(address == null?"":address);
		    task.setTestingProject(testingProject == null?"":testingProject);
		    task.setxRayNum(xRayNum == null?"":xRayNum);
		    task.setItem2(item2 == null?"":item2);
		    task.setItem3(item3 == null?"":item3);
		    task.setItem4(item4 == null?"":item4);
		    task.setItem5(item5 == null?"":item5);
		    task.setItem6(item6 == null?"":item6);
		    task.setItem7(item7 == null?"":item7);
		    task.setItem8(item8 == null?"":item8);
		    task.setItem9(item9 == null?"":item9);
		    task.setTaskData(json);
		    
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		    	task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		    	task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	
	/**
	 * 模板508任务和数据添加接口
	 * @return
	 * @throws Exception
	 */
	public String app_508_add() throws Exception{
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("app_508_add()函数");
		HttpServletRequest request = ServletActionContext.getRequest();
		HttpServletResponse response = ServletActionContext.getResponse();
		response.setContentType("text/html");
		response.setContentType("text/html;charset=utf-8");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		PrintWriter out = response.getWriter();
		try {
			String json = new String(request.getParameter("data").getBytes("ISO-8859-1"), "utf-8").replaceAll("[\\t\\n\\r]", "");
		    logger.info("json=" + json);
		    String recordUrl = new String(request.getParameter("recordUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("检测人签名照路径="+recordUrl);
			String checkUrl = new String(request.getParameter("checkUrl").getBytes("ISO-8859-1"),"utf-8");
			logger.info("复核人签名照路径="+checkUrl);
			if (json.equals("") || json.equals("[]")) {
				jsonString="{'success':false,'msg':'没有数据'}";
				out.write(jsonString);
				logger.info(jsonString);
				out.flush();
				out.close();
			    return null;
			}
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    Date date = new Date();
		    String time = sdf.format(date);
		    Date datetime = sdf.parse(time);
		    logger.info("当前时间=" + datetime);
		    
			String projectNum = "";
			String checkUnitName = "";
			String checkUnitAddress = "";
			String standard = "";
			String place = "";
			String address = "";
			String testingProject = "";
			String deviceFactor = "";
			String temperature = "";
			String humidity = "";
			String createtime = time;
			String other = "";
			String taskId = "";	
			String monitorType = "";
			String checkDeviceName = "";
			String checkDeviceNum = "";
			String checkDeviceModel = "";
			String checkDeviceVender = "";
			
			String nominalCapacity = "";
			
			String nuclideName = "";			
			String currentActivity = "";
			String nuclideTime = "";
			String nuclideNum = "";
			String nuclideVender = "";
			
			
			String factor = "";
			String voltage = "";
			String current = "";
			String seconds = "";
			String mSeconds = "";
			
			String item3 = "";
		
			
			JSONObject a = null;
		    Object bean = null;
		    JSONArray array = JSONArray.fromObject(json);
		    Object[] objArray = array.toArray();
		    System.out.println("array length--- " + objArray.length);
		    a = JSONObject.fromObject(objArray[0]);
		    bean = JSONObject.toBean(a);
		    MorphDynaBean morphDynaBean = (MorphDynaBean)bean;
		    if (a.containsKey("projectNum")) {
		    	projectNum = (String)morphDynaBean.get("projectNum");
		    }
		    logger.info("项目编号=" + projectNum);
		    if (a.containsKey("checkUnitName")) {
		    	checkUnitName = (String)morphDynaBean.get("checkUnitName");
			}
		    logger.info("受检单位名称=" + checkUnitName);
		    if (a.containsKey("checkUnitAddress")) {
		    	checkUnitAddress = (String)morphDynaBean.get("checkUnitAddress");
			}
		    logger.info("受检单位地址=" + checkUnitAddress);
		    if (a.containsKey("monitorType")) {
		    	monitorType = (String)morphDynaBean.get("monitorType");
			}
		    logger.info("检测类型=" + monitorType);
		    if (a.containsKey("standard")) {
		    	standard = (String)morphDynaBean.get("standard");
			}
		    logger.info("检测依据=" + standard);
		    if (a.containsKey("address")) {
		    	address = (String) morphDynaBean.get("address");
			}
			logger.info("检测地点="+address);
			if (a.containsKey("testingProject")) {
				testingProject = (String) morphDynaBean.get("testingProject");
			}
			logger.info("检测项目="+testingProject);
			if (a.containsKey("place")) {
				place = (String)morphDynaBean.get("place");
			}
		    logger.info("检测场所=" + place);
		    if (a.containsKey("checkDeviceName")) {
		    	checkDeviceName = (String)morphDynaBean.get("checkDeviceName");
			}
		    logger.info("受检设备名称=" + checkDeviceName);
		    if (a.containsKey("checkDeviceNum")) {
		    	checkDeviceNum = (String)morphDynaBean.get("checkDeviceNum");
			}
		    logger.info("受检设备编号=" + checkDeviceNum);
		    if (a.containsKey("checkDeviceModel")) {
		    	checkDeviceModel = (String)morphDynaBean.get("checkDeviceModel");
			}
		    logger.info("受检设备型号=" + checkDeviceModel);
		    if (a.containsKey("checkDeviceVender")) {
		    	checkDeviceVender = (String)morphDynaBean.get("checkDeviceVender");
			}
		    logger.info("受检设备厂家=" + checkDeviceVender);
		    if (a.containsKey("nuclideName")) {
		    	nuclideName = (String) morphDynaBean.get("nuclideName");
			}
			logger.info("核素名称"+nuclideName);
			if (a.containsKey("currentActivity")) {
				nominalCapacity = (String)morphDynaBean.get("currentActivity");
			}
		    logger.info("核素出厂活度" + currentActivity);
		    if (a.containsKey("nuclideTime")) {
		    	nuclideTime = (String)morphDynaBean.get("nuclideTime");
			}
		    logger.info("核素出厂日期" + nuclideTime);
		    if (a.containsKey("nuclideNum")) {
		    	nuclideNum = (String)morphDynaBean.get("nuclideNum");
			}
		    logger.info("核素编码" + nuclideNum);
		    if (a.containsKey("nuclideVender")) {
		    	nuclideVender = (String)morphDynaBean.get("nuclideVender");
			}
		    logger.info("核素生产厂家" + nuclideVender);
		    if (a.containsKey("DeviceFactor")) {
		    	deviceFactor = (String)morphDynaBean.get("DeviceFactor");
			}
		    logger.info("检测仪器校准因子=" + deviceFactor);
		    if (a.containsKey("Factor")) {
		    	factor = (String)morphDynaBean.get("Factor");
			}
		    logger.info("137Cs校准因子=" + factor);
		    if (a.containsKey("temperature")) {
		    	temperature = (String)morphDynaBean.get("temperature");
			}
		    logger.info("温度=" + temperature);
		    if (a.containsKey("humidity")) {
		    	humidity = (String)morphDynaBean.get("humidity");
			}
		    logger.info("湿度=" + humidity);
		    if (a.containsKey("createtime")) {
		    	createtime = (String)morphDynaBean.get("createtime");
			}
		    logger.info("测量时间=" + createtime);
		    if (a.containsKey("other")) {
		    	other = (String)morphDynaBean.get("other");
			}
		    logger.info("其他=" + other);
		    if (a.containsKey("id")) {
		    	taskId = (String)morphDynaBean.get("id");
			}
		    logger.info("任务id=" + taskId);
		    if (a.containsKey("voltage")) {
		    	voltage = (String) morphDynaBean.get("voltage");
			}
			logger.info("电压="+voltage);
			if (a.containsKey("current")) {
				current = (String) morphDynaBean.get("current");
			}
			logger.info("电流="+current);
			if (a.containsKey("seconds")) {
				seconds = (String) morphDynaBean.get("seconds");
			}
			logger.info("对应检测条件的s="+seconds);
			if (a.containsKey("mSeconds")) {
				mSeconds = (String) morphDynaBean.get("mSeconds");
			}
			logger.info("对应检测条件的mAs="+mSeconds);
			if (a.containsKey("item3")) {
				mSeconds = (String) morphDynaBean.get("item3");
			}
			logger.info("γ射线工业CT="+item3);
			
			ROMS_SZ_TASK task = this.romssztaskService.query(taskId);
			if (task == null) {
				jsonString = "{'success':false,'msg':'没有该任务'}";
				out.write(this.jsonString);
		        logger.info(this.jsonString);
		        out.flush();
		        out.close();
		        return null;
			}
			
		    String value = "";
		    if (!voltage.equals("")) {
		    	value += ","+voltage+"kv";
			}
			if (!current.equals("")) {
				value += ","+current+"mA";
			}
			if (!seconds.equals("")) {
				value += ","+seconds+"s";
			}
			if (!mSeconds.equals("")) {
				value += ","+mSeconds+"mAs";
			}
			
			task.setCheckDeviceModel(checkDeviceModel == null?"":checkDeviceModel);
		    task.setCheckDeviceName(checkDeviceName == null?"":checkDeviceName);
		    task.setCheckDeviceNum(checkDeviceNum == null?"":checkDeviceNum);
		    task.setCheckDeviceVender(checkDeviceVender == null?"":checkDeviceVender);
		    task.setCheckUnitAddress(checkUnitAddress == null?"":checkUnitAddress);
		    task.setCheckUnitName(checkUnitName == null?"":checkUnitName);
		    task.setCreatetime(createtime==null?datetime:sdf.parse(createtime));
		    task.setInserttime(datetime);
		    task.setMonitorType(monitorType == null?"":monitorType);
		    task.setPlace(place == null?"":place);
		    task.setProjectNum(projectNum == null?"":projectNum);
		    task.setStandard(standard == null?"":standard);
		    task.setOther(other == null?"":other);
		    task.setPass(0);
		    task.setDeviceFactor(deviceFactor==null?0:Float.parseFloat(deviceFactor));
		    task.setFactor(factor==null?0:Float.parseFloat(factor));
		    task.setHumidity(humidity==null?0:Float.parseFloat(humidity));
		    task.setTemperature(temperature==null?0:Float.parseFloat(temperature));
		    task.setAddress(address == null?"":address);
		    task.setTestingProject(testingProject == null?"":testingProject);
		    task.setNuclideName(nuclideName == null?"":nuclideName);
		    task.setCurrentActivity(currentActivity == null?"":currentActivity);
		   // task.setNuclideTime(nuclideTime = null?"":nuclideTime);
		   // task.setNuclideTime(nuclideTime ==null?"":nuclideTime);
		    task.setNuclideVender(nuclideVender == null?"":nuclideVender);
		    task.setTaskData(json);
		    task.setItem3(item3 == null?"":item3);
		   
		    
		    if ((task.getRecordUrl() == null) || (task.getRecordUrl().equals(""))) {
		    	task.setRecordUrl(recordUrl == null?"":recordUrl);
		    }
		    if ((task.getCheckUrl() == null) || (task.getCheckUrl().equals(""))) {
		    	task.setCheckUrl(checkUrl == null?"":checkUrl);
		    }
		    romssztaskService.update(task);
		} catch (Exception e) {
			e.printStackTrace();
			jsonString="{'errcode':0,'success':false,'msg':'添加失败'}";
			out.write(jsonString);
			logger.info(jsonString);
			out.flush();
			out.close();
			return null;
		}
		jsonString="{'success':true,'msg':'添加成功'}";
		out.write(jsonString);
		logger.info(jsonString);
		out.flush();
		out.close();
		return null;
	}
	
	/**
	 * 生成编号为284的原始数据表
	 * @return
	 */
	public String upload_284_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_284_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			SimpleDateFormat H_sdf = new SimpleDateFormat("HH");//时
			SimpleDateFormat m_sdf = new SimpleDateFormat("mm");//分
			SimpleDateFormat s_sdf = new SimpleDateFormat("ss");//秒
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("employUnit",task.getEmployUnit());//用人单位
		    dataMap.put("sound",task.getSoundCalibratorModel());//声校准器型号/编号
		    dataMap.put("standard",standard);//测量依据
		    dataMap.put("colibr",task.getCalibrationValue());//校准值[dB(A)]
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//风度
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	//获取仪器
		    	String device = taskDevices.get(i).getDevice().getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		device = taskDevices.get(i).getDevice().getDeviceName()+"/"+taskDevices.get(i).getDevice().getDeviceModel()+"/"+taskDevices.get(i).getDevice().getDeviceNum();
				}
		    	logger.info("仪器="+device);
		    	dataMap.put("device",device);
			}
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				String item1 = (String) morphDynaBean.get("item1");
				logger.info("item1="+item1);
				String item2 = (String) morphDynaBean.get("item2");
				logger.info("item2="+item2);
				String item3 = (String) morphDynaBean.get("item3");
				logger.info("item3="+item3);
				String item4 = (String) morphDynaBean.get("item4");
				logger.info("item4="+item4);
				String item5 = (String) morphDynaBean.get("item5");
				logger.info("item5="+item5);
				String item6 = (String) morphDynaBean.get("item6");
				logger.info("item6="+item6);
				String item7 = (String) morphDynaBean.get("item7");
				logger.info("item7="+item7);
				String item8 = (String) morphDynaBean.get("item8");
				logger.info("item8="+item8);
				String item9 = (String) morphDynaBean.get("item9");
				logger.info("item9="+item9);
				Date createtime = sdf.parse((String) morphDynaBean.get("createtime"));
				logger.info("createtime="+createtime);
				
				String time = H_sdf.format(createtime)+":"+m_sdf.format(createtime);
				if (i == 0) {
					dataMap.put("item1",item1);
					dataMap.put("item2",time);
					dataMap.put("item3",item3);
					dataMap.put("item4",item4);
					dataMap.put("item5",item5);
					dataMap.put("item6",item6);
					dataMap.put("item7",item7);
					dataMap.put("item8",item8);
					dataMap.put("item9",item9);
				}else{
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setItem1(item1);
					pointData.setItem2(time);
					pointData.setItem3(item3);
					pointData.setItem4(item4);
					pointData.setItem5(item5);
					pointData.setItem6(item6);
					pointData.setItem7(item7);
					pointData.setItem8(item8);
					pointData.setItem9(item9);
					
					pointDatas.add(pointData);
				}
			}
			//补空值
			if (objArray.length == 0) {
				dataMap.put("item1","");
				dataMap.put("item2","");
				dataMap.put("item3","");
				dataMap.put("item4","");
				dataMap.put("item5","");
				dataMap.put("item6","");
				dataMap.put("item7","");
				dataMap.put("item8","");
				dataMap.put("item9","");
				
				ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
				pointData.setItem1("");
				pointData.setItem2("");
				pointData.setItem3("");
				pointData.setItem4("");
				pointData.setItem5("");
				pointData.setItem6("");
				pointData.setItem7("");
				pointData.setItem8("");
				pointData.setItem9("");
				
				pointDatas.add(pointData);
			}
			
			dataMap.put("pointDatas",pointDatas);//数据
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/284.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	/**
	 * 生成编号为366的原始数据表
	 * @return
	 */
	public String upload_366_docx_old(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_366_docx_old()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("up",task.getUpstairs());//楼上
		    dataMap.put("down",task.getDownstairs());//楼下
		    dataMap.put("note",task.getNote());//备注
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	//获取仪器
		    	String device = taskDevices.get(i).getDevice().getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		device = taskDevices.get(i).getDevice().getDeviceNum()+"型"+taskDevices.get(i).getDevice().getDeviceName();
				}
		    	logger.info("仪器="+device);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(device);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record","");
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check","");
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit","");
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/366.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为366的原始数据表
	 * @return
	 */
	public String upload_366_docx_20180323(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_366_docx_20180323()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingWay",task.getTestingProject());//检测项目
		
		    //备注
			String[] str = task.getItem2().substring(1, task.getItem2().length() - 1).split("\\|");
			System.out.println("设备用途长度="+str.length);
		
			dataMap.put("d1","□");
			dataMap.put("d2","□");
			dataMap.put("d3","□");
			dataMap.put("d4","□");
			dataMap.put("d5","□");
			
			String deviceName = "";
			for (int i = 0; i < str.length; i++) {
				deviceName = str[i].toString();
				if (deviceName.equals("口内牙片摄影")) {
					dataMap.put("d1","■");
				}else if (deviceName.equals("头颅摄影")) {
					dataMap.put("d2","■");
				}else if (deviceName.equals("全景扫描")) {
					dataMap.put("d3","■");
				}else if (deviceName.equals("立位/站位口腔三维扫描")) {
					dataMap.put("d4","■");
				}else{
					dataMap.put("d5","■");
				}
			}
			dataMap.put("item3",task.getItem3());
			dataMap.put("item4",task.getItem4());
			dataMap.put("item5",task.getItem5());
			dataMap.put("item6",task.getItem6());
			dataMap.put("item7",task.getItem7());
			dataMap.put("item8",task.getItem8());
			dataMap.put("item9",task.getItem9());
			dataMap.put("item10",task.getItem10());
			dataMap.put("other",task.getOther());
			
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	//获取仪器
		    	String device = taskDevices.get(i).getDevice().getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		device = taskDevices.get(i).getDevice().getDeviceModel()+"/"+taskDevices.get(i).getDevice().getDeviceNum()+"型"+taskDevices.get(i).getDevice().getDeviceName();
				}
		    	logger.info("仪器="+device);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(device);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ArrayList<ROMS_SZ_POINTDATA>> pointDatas = new ArrayList<ArrayList<ROMS_SZ_POINTDATA>>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = null;
		    ArrayList<String> strList = new ArrayList<String>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				String locationType = (String) morphDynaBean.get("locationType");
				logger.info("出束模式/射线照射方向="+locationType);
				
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					
					if (type == 0) {
						pieces = (String) morphDynaBean1.get("pieces");
						logger.info("单位="+pieces);
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas1.add(pointData);
					}
				}
				
				if (type == 1) {
					strList.add(locationType);
					pointDatas.add(pointDatas1);
				}
				
				//补空值
				if (objects.length == 0) {
					dataMap.put("locat1","出束模式/射线照射方向："+"");
					dataMap.put("locat2","出束模式/射线照射方向："+"");
					dataMap.put("locat3","出束模式/射线照射方向："+"");
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						for (int j = 0; j < 3; j++) {
							ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
							pointData.setP("");
							pointData.setDepict("");
							pointData.setV1("");
							pointData.setV2("");
							pointData.setV3("");
							pointData.setAvg("");
							pointData.setDocv("");
							pointData.setBzc("");
							
							pointDatas1.add(pointData);
						}
						pointDatas.add(pointDatas1);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			
			logger.info("方向数量="+pointDatas.size());
			if (pointDatas.size() == 1) {
				dataMap.put("pointDatas1",pointDatas.get(0));//数据1
				dataMap.put("locat1","出束模式/射线照射方向："+strList.get(0));
			}else if (pointDatas.size() == 2) {
				dataMap.put("pointDatas1",pointDatas.get(0));//数据1
				dataMap.put("locat1","出束模式/射线照射方向："+strList.get(0));
				dataMap.put("pointDatas2",pointDatas.get(1));//数据2
				dataMap.put("locat2","出束模式/射线照射方向："+strList.get(1));
			}else{
				dataMap.put("pointDatas1",pointDatas.get(0));//数据1
				dataMap.put("locat1","出束模式/射线照射方向："+strList.get(0));
				dataMap.put("pointDatas2",pointDatas.get(1));//数据2
				dataMap.put("locat2","出束模式/射线照射方向："+strList.get(1));
				dataMap.put("pointDatas3",pointDatas.get(2));//数据3
				dataMap.put("locat3","出束模式/射线照射方向："+strList.get(2));
			}
			
//			//测试
//			dataMap.put("device","");
//			dataMap.put("p","");
//			dataMap.put("depict","");
//			dataMap.put("v1","");
//			dataMap.put("v2","");
//			dataMap.put("v3","");
//			dataMap.put("avg","");
//			dataMap.put("docv","");
//			dataMap.put("bzc","");
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			String ftl = "/366_1.ftl";
			if (pointDatas.size() == 1) {
				ftl = "/366_1.ftl";
			}else if (pointDatas.size() == 2) {
				ftl = "/366_2.ftl";
			}else{
				ftl = "/366_3.ftl";
			}
			System.out.println("========"+ftl);
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, ftl,paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为366的原始数据表
	 * @return
	 */
	public String upload_366_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_366_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingWay",task.getTestingProject());//检测项目
		
		    //备注
			String[] str = task.getItem2().substring(1, task.getItem2().length() - 1).split("\\|");
			System.out.println("设备用途长度="+str.length);
		
			dataMap.put("d1","☒");
			dataMap.put("d2","☒");
			dataMap.put("d3","☒");
			dataMap.put("d4","☒");
			dataMap.put("d5","☒");
			
			String deviceName = "";
			for (int i = 0; i < str.length; i++) {
				deviceName = str[i].toString();
				if (deviceName.equals("口内牙片摄影")) {
					dataMap.put("d1","☑");
				}else if (deviceName.equals("头颅摄影")) {
					dataMap.put("d2","☑");
				}else if (deviceName.equals("全景扫描")) {
					dataMap.put("d3","☑");
				}else if (deviceName.equals("立位/站位口腔三维扫描")) {
					dataMap.put("d4","☑");
				}else{
					dataMap.put("d5","☑");
				}
			}
			dataMap.put("item3",task.getItem3());
			dataMap.put("item4",task.getItem4());
			dataMap.put("item5",task.getItem5());
			dataMap.put("item6",task.getItem6());
			dataMap.put("item7",task.getItem7());
			dataMap.put("item8",task.getItem8());
			dataMap.put("item9",task.getItem9());
			dataMap.put("item10",task.getItem10());
			dataMap.put("other",task.getOther());
			
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName1 = device.getDeviceName();
		    	
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!device.getDeviceNum().equals("")) {
		    		//名称/型号/编号
		    		deviceName1 = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName1);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName1);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				String locationType = (String) morphDynaBean.get("locationType");
				logger.info("出束模式/射线照射方向="+locationType);
				
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					
					if (type == 0) {
						pieces = (String) morphDynaBean1.get("pieces");
						logger.info("单位="+pieces);
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas1.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas1.size() == 14) {
							pointData = new ROMS_SZ_POINTDATA();
							if (locationType.length() >= 5) {
								pointData.setItem1(locationType);
							}else{
								pointData.setItem1("");
							}
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == objects.length-1) {
							pointData = new ROMS_SZ_POINTDATA();
							if (locationType.length() >= 5) {
								pointData.setItem1(locationType);
							}else{
								pointData.setItem1("");
							}
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
						}
					}
				}
			
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						for (int j = 0; j < 1; j++) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setP("");
							pointData.setDepict("");
							pointData.setV1("");
							pointData.setV2("");
							pointData.setV3("");
							pointData.setAvg("");
							pointData.setDocv("");
							pointData.setBzc("");
							
							pointDatas1.add(pointData);
						}
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas1);
						pointData.setItem1("");
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			
			//判断是否有数据
			if (pointDatas.size() > 0) {
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				dataMap.put("dire2",pointDatas.get(pointDatas.size()-1).getItem1());
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("pointDatas",pointDatas);//数据1
			}else{
				dataMap.put("dire2","");
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("pointDatas",pointDatas);//数据1
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/366.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为3661的原始数据表（全景机）
	 * @return
	 */
	public String upload_3661_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_3661_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//全景扫描检测条件
		    dataMap.put("conditions1",task.getConditions1());//头颅摄影检测条件
		    dataMap.put("deviceFactor",task.getDeviceFactor());//全景扫描校准因子
		    dataMap.put("deviceFactor1",task.getDeviceFactor1());//头颅摄影校准因子
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
//			dataMap.put("other",task.getOther());//其他
		    
			//备注
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		    note.setNote(task.getNote());
		    notes.add(note);
		    dataMap.put("notes",notes);
		
		    //设备用途
		    String item22 = task.getItem2();
		    for (int i = 0; i < 2; i++) {
		    	if (item22.substring(i, i+1).equals("1")) {
			    	dataMap.put("d"+(i+1),"☑");
				}else{
					dataMap.put("d"+(i+1),"☒");
				}
			}
		   
		    //射线照射方向
		    String item33 = task.getItem3();
		    if (item33.substring(0, 1).equals("1")) {
		    	dataMap.put("s1","☑");
		    	dataMap.put("s11",task.getItem4());
			}else{
				dataMap.put("s1","☒");
				dataMap.put("s11","");
			}
		    if (item33.substring(1, 2).equals("1")) {
		    	dataMap.put("s2","☑");
		    	dataMap.put("s21",task.getItem5()+"→"+task.getItem6()+"→"+task.getItem7()+"→"+task.getItem8());
			}else{
				dataMap.put("s2","☒");
				dataMap.put("s21","");
			}
		    
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
		    	
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!device.getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceModel()+"/"+device.getDeviceNum()+"型"+device.getDeviceName();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceLower","");//检测仪器探测下限
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				String locationType = (String) morphDynaBean.get("locationType");
				logger.info("出束模式/射线照射方向="+locationType);
				
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					
					if (type == 0) {
						pieces = (String) morphDynaBean1.get("pieces");
						logger.info("单位="+pieces);
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8+"±"+item9);//平均值
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);
						pointData.setV2(item2);
						pointData.setV3(item3);
						pointData.setV4(item4);
						pointData.setV5(item5);
						pointData.setV6(item6);
						pointData.setV7(item7);
						pointData.setV8(item8);
						
						pointDatas1.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas1.size() == 14) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setItem1(locationType);
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == objects.length-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setItem1(locationType);
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
						}
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","±");//平均值
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setV4("");
						pointData.setV5("");
						pointData.setV6("");
						pointData.setV7("");
						pointData.setV8("");
						
						pointDatas1.add(pointData);
						
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setItem1("");
						pointData.setPointDatas(pointDatas1);
						pointDatas.add(pointData);
					}
				}
				
//				//拼到另一个集合里面去
//				if (type == 1) {
//					pointData = new ROMS_SZ_POINTDATA();
//					pointData.setItem1(locationType);
//					pointData.setPointDatas(pointDatas1);
//					pointDatas.add(pointData);
//				}
			}
			
			//测试
			dataMap.put("device","");
			dataMap.put("note","");
//			dataMap.put("b_v1","");
//			dataMap.put("b_v2","");
//			dataMap.put("b_v3","");
//			dataMap.put("b_v4","");
//			dataMap.put("b_v5","");
//			dataMap.put("range","~");//范围（最小值+最大值）
//			dataMap.put("b_avg","±");//平均值
//			dataMap.put("item1","");
			dataMap.put("v1","");
			dataMap.put("v2","");
			dataMap.put("v3","");
			dataMap.put("v4","");
			dataMap.put("v5","");
			dataMap.put("v6","");
			dataMap.put("v7","");
			dataMap.put("v8","");
			
		    dataMap.put("pieces",pieces);//单位
		    if (pointDatas.size() >= 2) {
		    	dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				dataMap.put("item1",pointDatas.get(pointDatas.size()-1).getItem1());
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				
				dataMap.put("pointDatas",pointDatas);//数据
			}else{
				dataMap.put("pointDatas2",pointDatas.get(0).getPointDatas());//数据2
				dataMap.put("item1",pointDatas.get(0).getItem1());
				
				dataMap.put("pointDatas",pointDatas2);//数据
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/3661.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为367的原始数据表
	 * @return
	 */
	public String upload_367_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_367_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("irr",task.getIrradiation());//照射野
		    dataMap.put("up",task.getUpstairs());//楼上
		    dataMap.put("down",task.getDownstairs());//楼下
		    dataMap.put("voltageRange",task.getVoltageRange1()+"~"+task.getVoltageRange2());//常用电压范围
		    dataMap.put("current",task.getCurrent1()+"~"+task.getCurrent2());//常用电流
		    dataMap.put("etr",task.getExposureTimeRange1()+"~"+task.getExposureTimeRange2());//曝光时间范围
		    dataMap.put("weekWork",task.getWeekWork());//每周工作天数
		    dataMap.put("shooting",task.getShooting1()+"~"+task.getShooting2());//每天拍片
		    dataMap.put("note",task.getNote());//备注
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					
					//判断有单位才赋值
					if (pieces1 != null && !pieces1.equals("")) {
						pieces = pieces1;
					}
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
			if (task.getConfirmUrl() == null || task.getConfirmUrl().length() == 0) {
				dataMap.put("confirm",getImageStr(pas+white));
			}else{
				//确认人签名照
				dataMap.put("confirm", getImageStr(pas+task.getConfirmUrl()));
			}
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/367.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}
	
	/**
	 * 生成编号为368的原始数据表
	 * @return
	 */
	public String upload_368_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_368_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("up",task.getUpstairs());//楼上
		    dataMap.put("down",task.getDownstairs());//楼下
		    dataMap.put("note",task.getNote());//备注
		    dataMap.put("wire",task.getWireHarness1());//有用线束朝向
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					
					//判断有单位才赋值
					if (pieces1 != null && !pieces1.equals("")) {
						pieces = pieces1;
					}
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/368.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}
	
	/**
	 * 生成编号为369的原始数据表
	 * @return
	 */
	public String upload_369_docx_old(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_369_docx_old()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("wire1",task.getWireHarness1());//有用线束朝向1
		    dataMap.put("wire2",task.getWireHarness2());//有用线束朝向2
		    dataMap.put("wire3",task.getWireHarness3());//有用线束朝向3
		    dataMap.put("irr",task.getIrradiation());//照射野
		    dataMap.put("up",task.getUpstairs());//楼上
		    dataMap.put("down",task.getDownstairs());//楼下
//		    dataMap.put("volt",task.getVoltageRange1()+"~"+task.getVoltageRange2());//常用电压范围
//		    dataMap.put("current",task.getCurrent1()+"~"+task.getCurrent2());//常用电流
//		    dataMap.put("expos",task.getExposureTimeRange1()+"~"+task.getExposureTimeRange2());//曝光时间范围
		    dataMap.put("week",task.getWeekWork());//每周工作天数
//		    dataMap.put("shooting",task.getShooting1()+"~"+task.getShooting2());//每天拍片
		    dataMap.put("note",task.getNote());//备注
		    
		    //判断哪个朝向有值
		    String wire = "";
		    if (!task.getWireHarness1().equals("")) {
		    	wire = task.getWireHarness1();
			}else if (!task.getWireHarness2().equals("")) {
				wire = task.getWireHarness2();
			}else if (!task.getWireHarness3().equals("")) {
				wire = task.getWireHarness3();
			}
		    dataMap.put("wire",wire);//有用线束朝向
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	//获取仪器
		    	String device = taskDevices.get(i).getDevice().getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		device = taskDevices.get(i).getDevice().getDeviceNum()+"型"+taskDevices.get(i).getDevice().getDeviceName();
				}
		    	logger.info("仪器="+device);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(device);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record","");
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check","");
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit","");
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
			if (task.getConfirmUrl() == null || task.getConfirmUrl().length() == 0) {
				dataMap.put("confirm","");
			}else{
				//确认人签名照
				dataMap.put("confirm", getImageStr(pas+task.getConfirmUrl()));
			}
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/369.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}

	/**
	 * 生成编号为369的原始数据表
	 * @return
	 */
	public String upload_369_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_369_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("volt",task.getVoltageRange1());//常用最大管电压
		    dataMap.put("current",task.getCurrent1());//常用最大管电流
		    dataMap.put("expos",task.getExposureTimeRange1());//单次最长曝光时间
		    dataMap.put("week",task.getWeekWork());//每周工作天数
		    dataMap.put("shooting",task.getShooting1());//每天最多曝光
		    dataMap.put("other",task.getNote());//其他
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ROMS_SZ_DEVICE device = null;
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
		    	
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceLower","");//检测仪器探测下限
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //设备用途
		    String item22 = task.getItem2();
		    if (item22.equals("DR摄影")) {
		    	dataMap.put("s1","■");
		    	dataMap.put("s2","□");
				dataMap.put("s3","□");
			}else if (item22.equals("CR摄影")) {
				dataMap.put("s1","□");
				dataMap.put("s2","■");
				dataMap.put("s3","□");
			}else if (item22.equals("屏片摄影")) {
				dataMap.put("s1","□");
				dataMap.put("s2","□");
				dataMap.put("s3","■");
			}else{
				dataMap.put("s1","□");
				dataMap.put("s2","□");
				dataMap.put("s3","□");
			}

		    //摄影模式
		    String item33 = task.getItem3();
		    System.out.println(item33);
		    
		    if (item33.substring(0, 1).equals("1")) {
		    	dataMap.put("y1","■");
		    	dataMap.put("y11",task.getItem4());
		    	dataMap.put("y12",task.getItem5());
			}else{
				dataMap.put("y1","□");
				dataMap.put("y11","");
		    	dataMap.put("y12","");
			}
		    if (item33.substring(1, 2).equals("1")) {
		    	dataMap.put("y2","■");
		    	dataMap.put("y21",task.getItem6());
			}else{
				dataMap.put("y2","□");
				dataMap.put("y21","");
			}
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
//		    ArrayList<ROMS_SZ_POINTDATA> points = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				String location = (String) morphDynaBean.get("location");
				logger.info("射线照射方向="+location);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					
					if (type == 0) {
						pieces = (String) morphDynaBean1.get("pieces");
						logger.info("单位="+pieces);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8+"±"+item9);//平均值
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);
						pointData.setV2(item2);
						pointData.setV3(item3);
						pointData.setV4(item4);
						pointData.setV5(item5);
						pointData.setV6(item6);
						pointData.setV7(item7);
						pointData.setV8(item8);
						pointData.setV9(item9);
						
						pointDatas1.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas1.size() == 15) {
							pointData = new ROMS_SZ_POINTDATA();
							if (location.length() >= 5) {
								pointData.setItem1(location.substring(4, location.length()));
							}else{
								pointData.setItem1("");
							}
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == objects.length-1) {
							pointData = new ROMS_SZ_POINTDATA();
							if (location.length() >= 5) {
								pointData.setItem1(location.substring(4, location.length()));
							}else{
								pointData.setItem1("");
							}
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
						}
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","±");//平均值
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setV4("");
						pointData.setV5("");
						pointData.setV6("");
						pointData.setV7("");
						pointData.setV8("");
						pointData.setV9("");
						
						pointDatas1.add(pointData);
					}
				}
				
//				//循环往大集合里面插数据
//				if (type == 1) {
//					point = new ROMS_SZ_POINTDATA();
//					if (locationType.length() >= 5) {
//						point.setItem1(locationType.substring(4, locationType.length()));
//					}else{
//						point.setItem1("");
//					}
//					point.setPointDatas(pointDatas1);
//					pointDatas.add(point);
//				}
			}
			
//			dataMap.put("b_v1","");
//			dataMap.put("b_v2","");
//			dataMap.put("b_v3","");
//			dataMap.put("b_v4","");
//			dataMap.put("b_v5","");
//			dataMap.put("range","~");//范围（最小值+最大值）
//			dataMap.put("b_avg","±");//平均值
//			
//			String locationType = "";
//			for (int i = 0; i < 3; i++) {
//				if (i == 0) {
//					locationType = "1111111111111";
//				}else if (i == 1) {
//					locationType = "2222222222222";
//				}else{
//					locationType = "3333333333333";
//				}
//				
//				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
//				for (int j = 0; j < 20; j++) {
//					pointData = new ROMS_SZ_POINTDATA();
//					pointData.setV1("");
//					pointData.setV2("");
//					pointData.setV3("");
//					pointData.setV4("");
//					pointData.setV5("");
//					pointData.setV6("");
//					pointData.setV7("");
//					pointData.setV8("");
//					pointData.setV9("");
//					
//					pointDatas1.add(pointData);
//					
//					//规定pointDatas大小等于***就放入另外一个points
//					if (pointDatas1.size() == 15) {
//						pointData = new ROMS_SZ_POINTDATA();
//						if (locationType.length() >= 5) {
//							pointData.setItem1(locationType.substring(4, locationType.length()));
//						}else{
//							pointData.setItem1("");
//						}
//						pointData.setPointDatas(pointDatas1);
//						pointDatas.add(pointData);
//						
//						//把pointDatas重新置空
//						pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
//					}else if (j == 20-1) {
//						pointData = new ROMS_SZ_POINTDATA();
//						if (locationType.length() >= 5) {
//							pointData.setItem1(locationType.substring(4, locationType.length()));
//						}else{
//							pointData.setItem1("");
//						}
//						pointData.setPointDatas(pointDatas1);
//						pointDatas.add(pointData);
//					}
//				}
//			}
			dataMap.put("device","");
			dataMap.put("item1","");
			dataMap.put("v1","");
			dataMap.put("v2","");
			dataMap.put("v3","");
			dataMap.put("v4","");
			dataMap.put("v5","");
			dataMap.put("v6","");
			dataMap.put("v7","");
			dataMap.put("v8","");
			dataMap.put("v9","");
			dataMap.put("pieces",pieces);//单位
			
			//判断是否有数据
			if (pointDatas.size() > 0) {
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				dataMap.put("dire2",pointDatas.get(pointDatas.size()-1).getItem1());
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("pointDatas",pointDatas);//数据1
			}else{
				dataMap.put("dire2","");
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("pointDatas",pointDatas);//数据1
			}
			System.out.println("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/369.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}
	
	/**
	 * 生成编号为370的原始数据表
	 * @return
	 */
	public String upload_370_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_370_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("computerRoom",task.getComputerRoom());//机房防护检测条件
		    dataMap.put("performer",task.getPerformer());//术者检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("wire1",task.getWireHarness1());//有用线束朝向1
		    dataMap.put("wire2",task.getWireHarness2());//有用线束朝向2
		    dataMap.put("up",task.getUpstairs());//楼上
		    dataMap.put("down",task.getDownstairs());//楼下
		    dataMap.put("note",task.getNote());//备注
		    
		    //判断哪个朝向有值
		    String wire = "";
		    if (!task.getWireHarness1().equals("")) {
		    	wire = task.getWireHarness1();
			}else if (!task.getWireHarness2().equals("")) {
				wire = task.getWireHarness2();
			}
		    dataMap.put("wire",wire);//有用线束朝向
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					
					//判断有单位才赋值
					if (pieces1 != null && !pieces1.equals("")) {
						pieces = pieces1;
					}
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record","");
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check","");
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit","");
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/370.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}
	
	/**
	 * 生成编号为371的原始数据表
	 * @return
	 */
	public String upload_371_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_371_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    dataMap.put("nuclideNum",task.getNuclideNum());//核素编码
		    dataMap.put("nuclideVender",task.getNuclideVender());//核素生产厂家
		    dataMap.put("currentActivity",task.getCurrentActivity());//机房防护检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("note",task.getNote());//备注
		    
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String item10 = (String) morphDynaBean1.get("item10");
					logger.info("item10="+item10);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					
					//判断有单位才赋值
					if (pieces1 != null && !pieces1.equals("")) {
						pieces = pieces1;
					}
					
					if (type == 0) {
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("b_avg",item6);//平均值
						dataMap.put("b_bzc",item7);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setV4(item6);
						pointData.setV5(item7);
						pointData.setAvg(item8);
						pointData.setDocv(item9);
						pointData.setBzc(item10);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point",getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/371.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}
	
	/**
	 * 生成编号为372的原始数据表
	 * @return
	 */
	public String upload_372_docx_old(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_372_docx_old()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    dataMap.put("nuclideNum",task.getNuclideNum());//核素编码
		    dataMap.put("nuclideVender",task.getNuclideVender());//核素生产厂家
		    dataMap.put("currentActivity",task.getCurrentActivity());//当前装填活度
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("note",task.getNote());//备注
		    
		  //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	//获取仪器
		    	String device = taskDevices.get(i).getDevice().getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		device = taskDevices.get(i).getDevice().getDeviceNum()+"型"+taskDevices.get(i).getDevice().getDeviceName();
				}
		    	logger.info("仪器="+device);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(device);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record","");
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check","");
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit","");
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/372.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}
	
	/**
	 * 生成编号为372的原始数据表
	 * @return
	 */
	public String upload_372_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_372_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			SimpleDateFormat H_sdf = new SimpleDateFormat("HH");//时
			SimpleDateFormat m_sdf = new SimpleDateFormat("mm");//分
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
//		    H_sdf.format(task.getCreatetime())+"时"+
//		    m_sdf.format(task.getCreatetime())+"分";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
		    
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("objectWork",task.getObjectWork());//检测对象及工况
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
//		    dataMap.put("note",task.getNote());//备注
		    
		    //备注
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		    note.setNote(task.getNote());
		    notes.add(note);
		    dataMap.put("notes",notes);
		    
		  //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> points = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				pieces = (String) morphDynaBean.get("pieces");
				logger.info("单位="+pieces);
				
				if (type == 1) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item2 = (String) morphDynaBean1.get("item2");
						logger.info("item2="+item2);
						String item3 = (String) morphDynaBean1.get("item3");
						logger.info("item3="+item3);
						String item4 = (String) morphDynaBean1.get("item4");
						logger.info("item4="+item4);
						String item5 = (String) morphDynaBean1.get("item5");
						logger.info("item5="+item5);
						String item6 = (String) morphDynaBean1.get("item6");
						logger.info("item6="+item6);
						String item7 = (String) morphDynaBean1.get("item7");
						logger.info("item7="+item7);
						String item8 = (String) morphDynaBean1.get("item8");
						logger.info("item8="+item8);
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("item9="+item9);
						String item10 = (String) morphDynaBean1.get("item10");
						logger.info("item10="+item10);
						String item11 = (String) morphDynaBean1.get("item11");
						logger.info("item11="+item11);
						
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);
						pointData.setV2(item2);
						pointData.setV3(item3);
						pointData.setV4(item4);
						pointData.setV5(item5);
						pointData.setV6(item6);
						pointData.setV7(item7);
						pointData.setV8(item8);
						pointData.setV9(item9);
						pointData.setV10(item10);
						pointData.setV11(item11);
						
						pointDatas.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas.size() == 16) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas);
							points.add(pointData);
							
							//把pointDatas重新置空
							pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == objects.length-1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas);
							points.add(pointData);
						}
					}
					
					//补空值
					if (objects.length == 0) {
						if (type == 1) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setV1("");
							pointData.setV2("");
							pointData.setV3("");
							pointData.setV4("");
							pointData.setV5("");
							pointData.setV6("");
							pointData.setV7("");
							pointData.setV8("");
							pointData.setV9("");
							pointData.setV10("");
							pointData.setV11("");
							
							pointDatas.add(pointData);
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas);
							points.add(pointData);
						}
					}
				}
			}
//		  for (int i = 0; i < 20; i++) {
//	    	pointData = new ROMS_SZ_POINTDATA();
//	    	pointData.setV1("");
//			pointData.setV2("");
//			pointData.setV3("");
//			pointData.setV4("");
//			pointData.setV5("");
//			pointData.setV6("");
//			pointData.setV7("");
//			pointData.setV8("");
//			pointData.setV9("");
//			pointData.setV10("");
//			pointData.setV11("");
//			pointDatas.add(pointData);
//			
//			//规定pointDatas大小等于***就放入另外一个points
//			if (pointDatas.size() == 16) {
//				pointData = new ROMS_SZ_POINTDATA();
//				pointData.setPointDatas(pointDatas);
//				points.add(pointData);
//				
//				//把pointDatas重新置空
//				pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
//			}else if (i == 20-1) {
//				pointData = new ROMS_SZ_POINTDATA();
//				pointData.setPointDatas(pointDatas);
//				points.add(pointData);
//			}
//		  }
		    dataMap.put("note","");
		    dataMap.put("device","");
		    dataMap.put("v1","");
		    dataMap.put("v2","");
		    dataMap.put("v3","");
		    dataMap.put("v4","");
		    dataMap.put("v5","");
		    dataMap.put("v6","");
		    dataMap.put("v7","");
		    dataMap.put("v8","");
		    dataMap.put("v9","");
		    dataMap.put("v10","");
		    dataMap.put("v11","");
			dataMap.put("pieces",pieces);//单位
			dataMap.put("points",points);//数据
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/372.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		    //往原始记录文件夹里再存一份
		    String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		    outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		    logger.info("文档路径及名称="+outFile);
		     
		    WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		    wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     
		    logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
			File f2 = new File(path);
	    	File s2[] = f2.listFiles();
	    	for(int j=0;j<s2.length;j++) {
	    		String name=s2[j].getName();
	    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
	    			s2[j].delete();
	    		}
	    	}
				     
		    //传docx地址转PDF
	    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			logger.info(cmd);
			cmdRun(cmd);
					
		    //获取web.xml配置的一个默认地址
		    String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		    //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		    url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		    logger.info("返回下载地址="+url);
		     
		    logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}
	
	/**
	 * 生成编号为3721的原始数据表
	 * @return
	 */
	public String upload_3721_docx_old(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_3721_docx_old()函数");  
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			String nuclideTime = y_sdf.format(task.getNuclideTime())+"年"+
		    M_sdf.format(task.getNuclideTime())+"月"+
		    d_sdf.format(task.getNuclideTime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    dataMap.put("nuclideNum",task.getNuclideNum());//核素编码
		    dataMap.put("nuclideVender",task.getNuclideVender());//核素生产厂家
		    dataMap.put("currentActivity",task.getCurrentActivity());//当前装填活度
		    dataMap.put("nuclideTime",nuclideTime);//核素出厂日期
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
//		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("other",task.getOther());//其他
		    dataMap.put("item3",task.getItem3());
		    //设备用途
		    String item22 = task.getItem2();
		    for (int i = 0; i < 6; i++) {
		    	if (item22.substring(i, i+1).equals("1")) {
			    	dataMap.put("d"+(i+1),"■");
				}else{
					dataMap.put("d"+(i+1),"□");
				}
			}
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();//最后一次循环放的（最后一页的数据）
		    ArrayList<ROMS_SZ_POINTDATA> points = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
			
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("源闸开关="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					//判断有单位才赋值
					if (pieces1 != null) {
						pieces = pieces1;
					}
					
					if (type == 0) {
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8+"±"+item9);//平均值+标准差
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);
						pointData.setV2(item2);
						pointData.setV3(item3);
						pointData.setV4(item4);
						pointData.setV5(item5);
						pointData.setV6(item6);
						pointData.setV7(item7);
						pointData.setV8(item8);
						pointData.setV9(item9);
						
						pointDatas.add(pointData);
						
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas.size() == 15) {
							pointData = new ROMS_SZ_POINTDATA();
							if (item3.length() >= 2) {
								pointData.setV3(item3.substring(2, item3.length()));
							}else{
								pointData.setV3("");
							}
							pointData.setPointDatas(pointDatas);
							points.add(pointData);
							
							//把pointDatas重新置空
							pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == objects.length-1) {
							//最后一次循环（因为最后数量是不确定的）就放入另外一个points
							pointDatas1 = pointDatas;
							if (item3.length() >= 2) {
								pointData.setV3(item3.substring(2, item3.length()));
							}else{
								pointData.setV3("");
							}
						}
					}	
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值+标准差
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setV4("");
						pointData.setV5("");
						pointData.setV6("");
						pointData.setV7("");
						pointData.setV8("");
						pointData.setV9("");
						pointDatas1.add(pointData);
					}
				}
			}
			dataMap.put("v1","");
			dataMap.put("v2","");
			dataMap.put("v3","");
			dataMap.put("v4","");
			dataMap.put("v5","");
			dataMap.put("v6","");
			dataMap.put("v7","");
			dataMap.put("v8","");
			dataMap.put("v9","");
			dataMap.put("device","");
			//保证最后数据的list是有值的
			if (pointDatas1.size() == 0 && points.size() != 0) {
				dataMap.put("pointDatas1",points.get(points.size()-1).getPointDatas());//最后一页数据
				//把最后一个对象数据赋给另外一个list，然后把最后一个数据删除
				points.remove(points.get(points.size()-1));
			}else{
				dataMap.put("pointDatas1",pointDatas1);//最后一页数据
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("points",points);//数据
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/3721.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		    //往原始记录文件夹里再存一份
		    String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
		    File s1[] = f1.listFiles();
		    for(int j=0;j<s1.length;j++) {
		    	String name=s1[j].getName();
		    	if(taskauth.getTemplate().getNum().equals(name)){
		    		s1[j].delete();
		    	}
		    }
		    // 输出文档路径及名称
			outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			logger.info("文档路径及名称="+outFile);
			     
			WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
			File f2 = new File(path);
			File s2[] = f2.listFiles();
			for(int j=0;j<s2.length;j++) {
				String name=s2[j].getName();
				if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		   			s2[j].delete();
		   		}
			}
				     
			//传docx地址转PDF
			String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			logger.info(cmd);
			cmdRun(cmd);
					
		    //获取web.xml配置的一个默认地址
		    String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		    //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		    url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+taskauth.getTemplate().getNum();
		    logger.info("返回下载地址="+url);
		     
		    logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
		
	
	/**
		 * 生成编号为3721的原始数据表
		 * @return
		 */
		public String upload_3721_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
			org.apache.log4j.Logger logger = org.apache.log4j.Logger
			.getLogger(ROMS_SZ_TASKAction.class);
			logger.info("upload_3721_docx()函数");  
			
			String url = "";
			try {
				ROMS_SZ_TASK task = romssztaskService.query(taskId);
				
				SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
				SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
				SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
				
				String datetime = y_sdf.format(task.getCreatetime())+"年"+
			    M_sdf.format(task.getCreatetime())+"月"+
			    d_sdf.format(task.getCreatetime())+"日";
				
				String nuclideTime = y_sdf.format(task.getNuclideTime())+"年"+
			    M_sdf.format(task.getNuclideTime())+"月"+
			    d_sdf.format(task.getNuclideTime())+"日";
				
				//检测依据
				String standard = "";
				if (task.getStandard() != null) {
					String standard1 = task.getStandard();
				    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
				    for (int i = 0; i < standardObject.length; i++) {
						if (i != 0) {
							standard += "，";
						}
						standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
					}
				}
				
				// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
			    Map<String,Object> dataMap = new HashMap<String,Object>();
			    dataMap.put("projectNum",task.getProjectNum());//项目编号
			    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
			    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
			    dataMap.put("monitorType",task.getMonitorType());//检测类型
			    dataMap.put("standard",standard);//检测依据
			    dataMap.put("address",task.getAddress());//检测地点
			    dataMap.put("testingProject",task.getTestingProject());//检测项目
			    dataMap.put("place",task.getPlace());//检测场所
			    dataMap.put("nuclideName",task.getNuclideName());//核素名称
			    dataMap.put("nuclideNum",task.getNuclideNum());//核素编码
			    dataMap.put("nuclideVender",task.getNuclideVender());//核素生产厂家
			    dataMap.put("currentActivity",task.getCurrentActivity());//当前装填活度
			    dataMap.put("nuclideTime",nuclideTime);//核素出厂日期
			    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
			    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
			    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
			    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
//			    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
			    dataMap.put("factor",task.getFactor());//137Cs校准因子
			    dataMap.put("time",datetime);//检测日期
			    dataMap.put("tem",task.getTemperature());//温度
			    dataMap.put("hum",task.getHumidity());//湿度
			    dataMap.put("other",task.getOther());//其他
			    dataMap.put("item3",task.getItem3());
			    //设备用途
			    String item22 = task.getItem2();
			    for (int i = 0; i < 6; i++) {
			    	if (item22.substring(i, i+1).equals("1")) {
				    	dataMap.put("d"+(i+1),"■");
					}else{
						dataMap.put("d"+(i+1),"□");
					}
				}
			    //查询任务下仪器
			    String where = " and taskId='"+taskId+"' and deviceId is not null";
			    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
			    logger.info("任务关联仪器数量="+taskDevices.size());
			    
			    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
			    ROMS_SZ_DEVICE device = null;
			    for (int i = 0; i < taskDevices.size(); i++) {
			    	device = taskDevices.get(i).getDevice();
			    	//获取仪器
			    	String deviceName = device.getDeviceName();
			    	//判断仪器是否有编号，有的话就拼上
			    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
			    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
					}
			    	logger.info("仪器="+deviceName);
			    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
			    	deviceData.setDevice(deviceName);
			    	
			    	deviceDatas.add(deviceData);
				}
			    //防止没有绑定仪器而文档无法打开
			    if (taskDevices.size() == 0) {
			    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
			    	deviceData.setDevice("");
			    	
			    	deviceDatas.add(deviceData);
				}
			    dataMap.put("deviceDatas",deviceDatas);//仪器
			    
			    //解析测点和数据json
			    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
			    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
			    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();//最后一次循环放的（最后一页的数据）
			    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
			    ArrayList<ROMS_SZ_POINTDATA> points = new ArrayList<ROMS_SZ_POINTDATA>();
			    
			    String data = task.getData();
			    logger.info("任务测点json="+data);
			    
			    String pieces = "";
			    JSONObject a = null;
				Object bean = null;
				JSONArray array = JSONArray.fromObject(data);
				Object[] objArray = array.toArray();
				logger.info("测点数量="+objArray.length);
				for (int i = 0; i < objArray.length; i++) {
					a = JSONObject.fromObject(objArray[i]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
					int type = Integer.parseInt((String) morphDynaBean.get("type"));
					logger.info("0是本底测点，1是测点="+type);
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
				
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item2 = (String) morphDynaBean1.get("item2");
						logger.info("item2="+item2);
						String item3 = (String) morphDynaBean1.get("item3");
						logger.info("源闸开关="+item3);
						String item4 = (String) morphDynaBean1.get("item4");
						logger.info("item4="+item4);
						String item5 = (String) morphDynaBean1.get("item5");
						logger.info("item5="+item5);
						String item6 = (String) morphDynaBean1.get("item6");
						logger.info("item6="+item6);
						String item7 = (String) morphDynaBean1.get("item7");
						logger.info("item7="+item7);
						String item8 = (String) morphDynaBean1.get("item8");
						logger.info("item8="+item8);
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("item9="+item9);
						String pieces1 = (String) morphDynaBean1.get("pieces");
						logger.info("单位="+pieces1);
						
						//判断有单位才赋值
						if (pieces1 != null && !pieces1.equals("")) {
							pieces = pieces1;
						}
						
						if (type == 0) {
							dataMap.put("b_v1",item1);
							dataMap.put("b_v2",item2);
							dataMap.put("b_v3",item3);
							dataMap.put("b_v4",item4);
							dataMap.put("b_v5",item5);
							dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
							dataMap.put("b_avg",item8+"±"+item9);//平均值+标准差
						}else if(!item3.equals("") && !item7.equals("")) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setV1(item1);
							pointData.setV2(item2);
							pointData.setV3(item3);
							pointData.setV4(item4);
							pointData.setV5(item5);
							pointData.setV6(item6);
							pointData.setV7(item7);
							pointData.setV8(item8);
							pointData.setV9(item9);
							
							if (item3.equals("开启")) {
								pointDatas1.add(pointData);
							}else if(item3.equals("关闭")){
								pointDatas2.add(pointData);
							}
						}	
					}
					
					//补空值
					if (objects.length == 0) {
						if (type == 0) {
							dataMap.put("b_v1","");
							dataMap.put("b_v2","");
							dataMap.put("b_v3","");
							dataMap.put("b_v4","");
							dataMap.put("b_v5","");
							dataMap.put("range","~");//范围（最小值+最大值）
							dataMap.put("b_avg","");//平均值+标准差
						}else{
//							pointData = new ROMS_SZ_POINTDATA();
//							pointData.setV1("");
//							pointData.setV2("");
//							pointData.setV3("");
//							pointData.setV4("");
//							pointData.setV5("");
//							pointData.setV6("");
//							pointData.setV7("");
//							pointData.setV8("");
//							pointData.setV9("");
//							if (pointDatas1.size() == 0) {
//								pointDatas1.add(pointData);
//							}else{
//								pointDatas2.add(pointData);
//							}
						}
					}
				}
				
				for (int k = 0; k < pointDatas1.size(); k++) {
					pointDatas.add(pointDatas1.get(k));
					
					//规定pointDatas大小等于***就放入另外一个points
					if (pointDatas.size() == 15) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas);
						points.add(pointData);
					
						pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
					}else if (k == pointDatas1.size()-1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas);
						points.add(pointData);
				}
			}
					pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int k = 0; k < pointDatas2.size(); k++) {
					pointDatas.add(pointDatas2.get(k));
					
					if (pointDatas.size() == 15) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas);
						points.add(pointData);
						
						pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
						//最后一次循环	
					}else if (k == pointDatas2.size()-1) {   
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas);
						points.add(pointData); 
				}
			}
				dataMap.put("v1","");
				dataMap.put("v2","");
				dataMap.put("v3","");
				dataMap.put("v4","");
				dataMap.put("v5","");
				dataMap.put("v6","");
				dataMap.put("v7","");
				dataMap.put("v8","");
				dataMap.put("v9","");
				dataMap.put("device","");
				
				//保证最后数据的list是有值的
				if (points.size() != 0) {
					dataMap.put("pointDatas1",points.get(points.size()-1).getPointDatas());//最后一页数据
					//把最后一个对象数据赋给另外一个list，然后把最后一个数据删除
					points.remove(points.get(points.size()-1));
					logger.info("point.size打印了多少份："+points.size());
				}else{
					dataMap.put("pointDatas1",pointDatas1);//最后一页数据
				}
				dataMap.put("pieces",pieces);//单位
				dataMap.put("points",points);//数据
				logger.info("====="+JSONObject.fromObject(dataMap));
				
				String path = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
				System.out.println("服务器路径=" + path);
				File dir = new File(path);
				if (!dir.exists()){
					dir.mkdirs();// 创建个文件夹
				}
				File f = new File(path);
		    	File s[] = f.listFiles();
		    	for(int j=0;j<s.length;j++) {
		    		String name=s[j].getName();
		    		//删除同名的重测任务
		    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
		    			s[j].delete();
					}
		    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
		    			//s[j].delete();
		    			String rootPath = s[j].getParent();
		    			System.out.println("根路径是："+rootPath);
		    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
		    			System.out.println("修改后文件名称是："+newFile.getName());
	    			    if (s[j].renameTo(newFile)){
	    			    	System.out.println("修改成功!");
	    			    }else{
	    			    	System.out.println("修改失败");
	    			    }
		    		}
		    	}
				File outFile = null;
				
				String pas = ServletActionContext.getServletContext().getRealPath(
						"");
				//判断图片路径是否为空，为空就不上传
				if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
					dataMap.put("point", getImageStr(pas+white));
				}else{
					//点位图
					dataMap.put("point", getImageStr(pas+task.getPointUrl()));
				}
				if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
					for (int i = 0; i < 3; i++) {
						dataMap.put("record"+i,getImageStr(pas+white));
					}
				}else{
					//检测人签名照
					String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
					logger.info("检测人数量="+recordUrl.length);
					for (int i = 0; i < recordUrl.length; i++) {
						dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
					}
					//如果人数不够就插空白图片
					for (int i = recordUrl.length; i < 3; i++) {
						dataMap.put("record"+i, getImageStr(pas+white));
					}
				}
				if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
					dataMap.put("check",getImageStr(pas+white));
				}else{
					//复核人签名照
					String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
					logger.info("复核人数量="+checkUrl.length);
					dataMap.put("check", getImageStr(pas+checkUrl[0]));
				}
				if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
					dataMap.put("unit",getImageStr(pas+white));
				}else{
					//受检单位人签名照
					dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
				}
			    
				String paths = ServletActionContext.getServletContext().getRealPath(
						uploadDir);
				logger.info("ftl文件存放路径=" + paths);
				
				File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/3721.ftl",paths);
	
				// 输出文档路径及名称
			     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
		    	//这样你就能得到你想要的xml
		    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
		    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
		    	
			    //往原始记录文件夹里再存一份
			    String pass1 = ServletActionContext.getServletContext().getRealPath(
							uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
			    File s1[] = f1.listFiles();
			    for(int j=0;j<s1.length;j++) {
			    	String name=s1[j].getName();
			    	if(taskauth.getTemplate().getNum().equals(name)){
			    		s1[j].delete();
			    	}
			    }
			    // 输出文档路径及名称
				outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
				logger.info("文档路径及名称="+outFile);
				     
				WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
				wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
				    	
				logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				File f2 = new File(path);
				File s2[] = f2.listFiles();
				for(int j=0;j<s2.length;j++) {
					String name=s2[j].getName();
					if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			   			s2[j].delete();
			   		}
				}
					     
				//传docx地址转PDF
				String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				logger.info(cmd);
				cmdRun(cmd);
						
			    //获取web.xml配置的一个默认地址
			    String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
			    //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
			    url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
			    logger.info("返回下载地址="+url);
			     
			    logger.info("成功");
			} catch (Exception e) {
				e.printStackTrace();
				logger.info("失败");
			}
			
			return url;
		}
	/**
	 * 生成编号为373的原始数据表
	 * @return
	 */
	public String upload_373_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_373_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("activityResponse",task.getActivityResponse());//表面活度响应
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    dataMap.put("nuclideNum",task.getNuclideNum());//核素编码
		    dataMap.put("nuclideVender",task.getNuclideVender());//核素生产厂家
		    dataMap.put("currentActivity",task.getCurrentActivity());//当前装填活度
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("note",task.getNote());//备注
		    
		  //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String item10 = (String) morphDynaBean1.get("item10");
					logger.info("item10="+item10);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					
					//判断有单位才赋值
					if (pieces1 != null && !pieces1.equals("")) {
						pieces = pieces1;
					}
					
					if (type == 0) {
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("b_avg",item6);//平均值
						dataMap.put("b_docv",item7);//报告值
						dataMap.put("b_bzc",item8);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setV4(item6);
						pointData.setV5(item7);
						pointData.setAvg(item8);
						pointData.setDocv(item9);
						pointData.setBzc(item10);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_docv","");//报告值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setV4("");
						pointData.setV5("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record","");
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check","");
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit","");
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/373.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}
	
	/**
	 * 生成编号为374的原始数据表
	 * @return
	 */
	public String upload_374_docx_old(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_374_docx_old()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("wire1",task.getWireHarness1());//有用线束朝向1
		    dataMap.put("wire2",task.getWireHarness2());//有用线束朝向2
		    dataMap.put("wire3",task.getWireHarness3());//有用线束朝向3
		    dataMap.put("irr",task.getIrradiation());//照射野
		    dataMap.put("up",task.getUpstairs());//楼上
		    dataMap.put("down",task.getDownstairs());//楼下
		    dataMap.put("note",task.getNote());//备注
		    //判断哪个朝向有值
		    String wire = "";
		    if (!task.getWireHarness1().equals("")) {
		    	wire = task.getWireHarness1();
			}else if (!task.getWireHarness2().equals("")) {
				wire = task.getWireHarness2();
			}else if (!task.getWireHarness3().equals("")) {
				wire = task.getWireHarness3();
			}
		    dataMap.put("wire",wire);//有用线束朝向
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	//获取仪器
		    	String device = taskDevices.get(i).getDevice().getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		device = taskDevices.get(i).getDevice().getDeviceNum()+"型"+taskDevices.get(i).getDevice().getDeviceName();
				}
		    	logger.info("仪器="+device);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(device);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record","");
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check","");
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit","");
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/374.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	
	/**
	 * 生成编号为374的原始数据表
	 * @return
	 */
	public String upload_374_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_374_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//X射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("other",task.getOther());//其他
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ROMS_SZ_DEVICE device = null;
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	dataMap.put("deviceLower","");//检测仪器探测下限
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //设备用途
		    String item22 = task.getItem2();
		    for (int i = 0; i < 9; i++) {
		    	if (item22.substring(i, i+1).equals("1")) {
			    	dataMap.put("s"+(i+1),"■");
				}else{
					dataMap.put("s"+(i+1),"□");
				}
			}
		    if (item22.substring(9, 10).equals("1")) {
		    	dataMap.put("s10","■");
		    	dataMap.put("s11",task.getItem3());
			}else{
				dataMap.put("s10","□");
				dataMap.put("s11","");
			}
		   
		    //摄影模式
		    dataMap.put("dire","");
		    String item44 = task.getItem4();
		    if (item44.substring(0, 1).equals("1")) {
		    	dataMap.put("y1","■");
		    	dataMap.put("y11",task.getItem5());
		    	dataMap.put("dire",task.getItem5());
			}else{
				dataMap.put("y1","□");
				dataMap.put("y11","");
			}
		    if (item44.substring(1, 2).equals("1")) {
		    	dataMap.put("y2","■");
		    	dataMap.put("y21",task.getItem6());
		    	dataMap.put("dire",task.getItem6());
			}else{
				dataMap.put("y2","□");
				dataMap.put("y21","");
			}
		    if (item44.substring(2, 3).equals("1")) {
		    	dataMap.put("y3","■");
		    	dataMap.put("y31",task.getItem7());
		    	dataMap.put("dire",task.getItem7());
			}else{
				dataMap.put("y3","□");
				dataMap.put("y31","");
			}
		    if (item44.substring(3, 4).equals("1")) {
		    	dataMap.put("y4","■");
		    	dataMap.put("y41",task.getItem8());
		    	dataMap.put("dire",task.getItem8());
			}else{
				dataMap.put("y4","□");
				dataMap.put("y41","");
			}
		    if (item44.substring(4, 5).equals("1")) {
		    	dataMap.put("y5","■");
		    	dataMap.put("y51",task.getItem9());
		    	dataMap.put("dire",task.getItem9());
			}else{
				dataMap.put("y5","□");
				dataMap.put("y51","");
			}
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				String locationType = (String) morphDynaBean.get("locationType");
				logger.info("射线照射方向="+locationType);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					
					if (type == 0) {
						pieces = (String) morphDynaBean1.get("pieces");
						logger.info("单位="+pieces);
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8+"±"+item9);//平均值
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1(item1);
						pointData.setV2(item2);
						pointData.setV3(item3);
						pointData.setV4(item4);
						pointData.setV5(item5);
						pointData.setV6(item6);
						pointData.setV7(item7);
						pointData.setV8(item8);
						
						pointDatas1.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas1.size() == 15) {
							pointData = new ROMS_SZ_POINTDATA();
							if (locationType.length() >= 5) {
								pointData.setItem1(locationType.substring(locationType.indexOf(":")+1, locationType.length()));
							}else{
								pointData.setItem1("");
							}
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
							
							//把pointDatas重新置空
							pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == objects.length-1) {
							pointData = new ROMS_SZ_POINTDATA();
							if (locationType.length() >= 5) {
								pointData.setItem1(locationType.substring(locationType.indexOf(":")+1, locationType.length()));
							}else{
								pointData.setItem1("");
							}
							pointData.setPointDatas(pointDatas1);
							pointDatas.add(pointData);
						}
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","±");//平均值
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setV4("");
						pointData.setV5("");
						pointData.setV6("");
						pointData.setV7("");
						pointData.setV8("");
						
						pointDatas1.add(pointData);
					}
				}
				
//				if (type == 1) {
//					pointData = new ROMS_SZ_POINTDATA();
//					if (!locationType.equals("")) {
//						pointData.setItem1(locationType.substring(locationType.indexOf(":")+1, locationType.length()));
//					}else{
//						pointData.setItem1("");
//					}
//					pointData.setPointDatas(pointDatas1);
//					pointDatas.add(pointData);
//				}
			}
//		    dataMap.put("b_v1","");
//			dataMap.put("b_v2","");
//			dataMap.put("b_v3","");
//			dataMap.put("b_v4","");
//			dataMap.put("b_v5","");
//			dataMap.put("range","~");//范围（最小值+最大值）
//			dataMap.put("b_avg","±");//平均值
//		    pointData = new ROMS_SZ_POINTDATA();
//			pointData.setV1("1");
//			pointData.setV2("1");
//			pointData.setV3("1");
//			pointData.setV4("1");
//			pointData.setV5("1");
//			pointData.setV6("1");
//			pointData.setV7("1");
//			pointData.setV8("1");
//			pointDatas1.add(pointData);
//			pointData = new ROMS_SZ_POINTDATA();
//			pointData.setItem1("111");
//			pointData.setPointDatas(pointDatas1);
//			pointDatas.add(pointData);
		    
			dataMap.put("pieces",pieces);//单位
			//判断是否有数据
			if (pointDatas.size() > 0) {
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				dataMap.put("dire",pointDatas.get(pointDatas.size()-1).getItem1());
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("pointDatas",pointDatas);//数据
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("dire","");
				dataMap.put("pointDatas",pointDatas);//数据
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/374.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为375的原始数据表
	 * @return
	 */
	public String upload_375_docx_20180115(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_375_docx_20180115()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("note",task.getNote());//备注
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	//获取仪器
		    	String device = taskDevices.get(i).getDevice().getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		device = taskDevices.get(i).getDevice().getDeviceNum()+"型"+taskDevices.get(i).getDevice().getDeviceName();
				}
		    	logger.info("仪器="+device);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(device);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record","");
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check","");
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit","");
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/375.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为375的原始数据表
	 * @return
	 */
	public String upload_375_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_375_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("xRayNum",task.getxRayNum());//x射线管编号
		    dataMap.put("other",task.getOther());//其他
		    dataMap.put("item3",task.getItem3());
		    
		    //设备用途
		    String item22 = task.getItem2();
		    for (int i = 0; i < 8; i++) {
		    	if (item22.substring(i, i+1).equals("1")) {
			    	dataMap.put("d"+(i+1),"■");
				}else{
					dataMap.put("d"+(i+1),"□");
				}
			}
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();//最后一次循环放的（最后一页的数据）
		    ArrayList<ROMS_SZ_POINTDATA> points = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					
					//判断有单位才赋值
					if (pieces1 != null && !pieces1.equals("")) {
						pieces = pieces1;
					}
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8+"±"+item9);//平均值+标准差
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
						
						//规定pointDatas大小等于***就放入另外一个points
						if (pointDatas.size() == 15) {
							pointData = new ROMS_SZ_POINTDATA();
							pointData.setPointDatas(pointDatas);
							points.add(pointData);
							
							//把pointDatas重新置空
							pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
						}else if (j == objects.length-1) {
							//最后一次循环（因为最后数量是不确定的）就放入另外一个points
							pointDatas1 = pointDatas;
						}
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值+标准差
					}else{
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						pointDatas1.add(pointData);
					}
				}
			}
//			dataMap.put("b_v1","");
//			dataMap.put("b_v2","");
//			dataMap.put("b_v3","");
//			dataMap.put("b_v4","");
//			dataMap.put("b_v5","");
//			dataMap.put("range","~");//范围（最小值+最大值）
//			dataMap.put("b_avg","");//平均值+标准差
//			for (int i = 0; i < 17; i++) {
//				pointData = new ROMS_SZ_POINTDATA();
//				pointData.setP("");
//				pointData.setDepict("");
//				pointData.setV1("");
//				pointData.setV2("");
//				pointData.setV3("");
//				pointData.setAvg("");
//				pointData.setDocv("");
//				pointData.setBzc("");
//				pointDatas.add(pointData);
//				
//				//规定pointDatas大小等于***就放入另外一个points
//				if (pointDatas.size() == 15) {
//					pointData = new ROMS_SZ_POINTDATA();
//					pointData.setPointDatas(pointDatas);
//					points.add(pointData);
//					
//					//把pointDatas重新置空
//					pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
//				}else if (i == 17-1) {
//					//最后一次循环（因为最后数量是不确定的）就放入另外一个points
//					pointDatas1 = pointDatas;
//				}
//			}
			dataMap.put("device","");
			//保证最后数据的list是有值的
			if (pointDatas1.size() == 0 && points.size() != 0) {
				dataMap.put("pointDatas1",points.get(points.size()-1).getPointDatas());//最后一页数据
				//把最后一个对象数据赋给另外一个list，然后把最后一个数据删除
				points.remove(points.get(points.size()-1));
			}else{
				dataMap.put("pointDatas1",pointDatas1);//最后一页数据
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("points",points);//数据
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/375.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		    //往原始记录文件夹里再存一份
		    String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
		    File s1[] = f1.listFiles();
		    for(int j=0;j<s1.length;j++) {
		    	String name=s1[j].getName();
		    	if(taskauth.getTemplate().getNum().equals(name)){
		    		s1[j].delete();
		    	}
		    }
		    // 输出文档路径及名称
			outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			logger.info("文档路径及名称="+outFile);
			     
			WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
			File f2 = new File(path);
			File s2[] = f2.listFiles();
			for(int j=0;j<s2.length;j++) {
				String name=s2[j].getName();
				if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		   			s2[j].delete();
		   		}
			}
				     
			//传docx地址转PDF
			String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			logger.info(cmd);
			cmdRun(cmd);
					
		    //获取web.xml配置的一个默认地址
		    String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		    //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		    url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		    logger.info("返回下载地址="+url);
		     
		    logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为376的原始数据表
	 * @return
	 */
	public String upload_376_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_376_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("cargoName",task.getCargoName());//货物名称
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    dataMap.put("packageNum",task.getPackageNum());//货包批号
		    dataMap.put("currentActivity",task.getCurrentActivity());//核素活度
		    dataMap.put("physicacState",task.getPhysicalState());//物理状态
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("note",task.getNote());//备注
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String item10 = (String) morphDynaBean1.get("item10");
					logger.info("item10="+item10);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					
					//判断有单位才赋值
					if (pieces1 != null && !pieces1.equals("")) {
						pieces = pieces1;
					}
					
					if (type == 0) {
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("b_avg",item6);//平均值
						dataMap.put("b_bzc",item7);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setV4(item6);
						pointData.setV5(item7);
						pointData.setAvg(item8);
						pointData.setDocv(item9);
						pointData.setBzc(item10);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setV4("");
						pointData.setV5("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", "");
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record","");
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check","");
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit","");
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/376.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为377的原始数据表
	 * @return
	 */
	public String upload_377_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_377_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("factor",task.getFactor());//137CS校准因子
		    dataMap.put("cargoName",task.getCargoName());//货物名称
		    dataMap.put("packageNum",task.getPackageNum());//货包批号
		    dataMap.put("packageType",task.getPackageType());//货包类型
		    dataMap.put("packageSize",task.getPackageSize());//货包件数
		    dataMap.put("packageActivity",task.getPackageActivity());//货包总放射性活度
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    dataMap.put("physicalState",task.getPhysicalState());//物理状态
		    dataMap.put("rayType",task.getRayType());//射线类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("note",task.getNote());//备注
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					
					//判断有单位才赋值
					if (pieces1 != null && !pieces1.equals("")) {
						pieces = pieces1;
					}
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("item9="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","");
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/377.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为378的原始数据表
	 * @return
	 */
	public String upload_378_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_378_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("weather",task.getWeather());//天气
		    dataMap.put("activityResponse",task.getActivityResponse());//表面活度响应
		    dataMap.put("cargoName",task.getCargoName());//货物名称
		    dataMap.put("packageNum",task.getPackageNum());//货包批号
		    dataMap.put("packageType",task.getPackageType());//货包类型
		    dataMap.put("packageSize",task.getPackageSize());//货包件数
		    dataMap.put("packageActivity",task.getPackageActivity());//货包总放射性活度
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    dataMap.put("physicalState",task.getPhysicalState());//物理状态
		    dataMap.put("rayType",task.getRayType());//射线类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("note",task.getNote());//备注
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String item10 = (String) morphDynaBean1.get("item10");
					logger.info("item10="+item10);
					String pieces1 = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces1);
					
					//判断有单位才赋值
					if (pieces1 != null && !pieces1.equals("")) {
						pieces = pieces1;
					}
					
					if (type == 0) {
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("b_avg",item6);//平均值
						dataMap.put("b_docv",item7);//报告值
						dataMap.put("b_bzc",item8);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setV4(item6);
						pointData.setV5(item7);
						pointData.setAvg(item8);
						pointData.setDocv(item9);
						pointData.setBzc(item10);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setV4("");
						pointData.setV5("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/378.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	
	/**
	 * 生成编号为379的原始数据表
	 * @return
	 */
	public String upload_379_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_381_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额  定  容  量
		    dataMap.put("sidDeixis",task.getSidDeixis());//有无SID指示
		    dataMap.put("control",task.getRadiometricControl());//自照射量控制
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		   
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    String deviceName = "";
		    String deviceNum = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	
		    	//获取仪器名字和编号
		    	deviceName += "    "+taskDevices.get(i).getDevice().getDeviceName();
		    	deviceNum += "         "+taskDevices.get(i).getDevice().getDeviceNum();
			}
		    dataMap.put("deviceName",deviceName);//检测仪器名字
		    dataMap.put("deviceNum",deviceNum);//检测仪器编号
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是X射线管电压,1是线对分辨率，2是X射线透视入射空气比释动能率="+type);
				
				//X射线管电压
				if (type == 0) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p0","(X)");//检测项目
					}else{
						dataMap.put("p0","(√)");//检测项目
					}
					
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v0"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 8; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v0"+j+k+"="+item);
							
							dataMap.put("v0"+j+k,item);
						}
					}
					
					//1是线对分辨率
				}else if (type == 1) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p1","(X)");//检测项目
					}else{
						dataMap.put("p1","(√)");//检测项目
					}
					
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v1"+j+"="+item);
						
						dataMap.put("v1"+j,item);
					}
					
					//2是X射线透视入射空气比释动能率
				}else if (type == 2) {
					int conditions = Integer.parseInt((String) morphDynaBean.get("conditions"));
					logger.info("0是没打钩，1是打钩");
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断自动控制
					if (conditions == 0) {
						dataMap.put("c2","(X)");
					}else{
						dataMap.put("c2","(√)");
					}
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p2","(X)");//检测项目
					}else{
						dataMap.put("p2","(√)");//检测项目
					}
					
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v2"+j+"="+item);
						
						dataMap.put("v2"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v2"+j+k+"="+item);
							
							dataMap.put("v2"+j+k,item);
						}
					}
				}
			}
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/379.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	/**
	 * 生成编号为380的原始数据表
	 * @param taskId
	 * @param taskauth
	 * @return
	 */
	public String upload_380_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_380_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitortype",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    
		  //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0表示CTDIw，1表示诊断床定位精度，2表示水的CT值（HU）、均匀性（HU）及噪声* ，3表示定位光精度,mm，4表示重建层厚偏差，5表示高对比分辨力lp/cm，6表示低对比可探测能力，7表示CT值线性，HU="+type);
				
				if (type == 0) {
					int subType = Integer.parseInt((String) morphDynaBean.get("subType"));
					logger.info("0表示头部模体，1表示体部模体="+subType);
					
					if (subType == 0) {
						//测点信息
						for (int j = 1; j <= 10; j++) {
							String item = (String) morphDynaBean.get("item"+j);
							
							dataMap.put("v00"+j,item);
							logger.info("v00"+j+"="+dataMap.get("v00"+j));
							
						}
						
						//获取数据
						JSONArray jsonArray = a.getJSONArray("value");
						Object[] objects = jsonArray.toArray();
						logger.info("头部模体数据数量="+objects.length);
						
						for (int j = 0; j < objects.length; j++) {
							a = JSONObject.fromObject(objects[j]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							
							for (int k = 1; k <= 4; k++) {
								String item = (String) morphDynaBean1.get("item"+k);
								
								dataMap.put("v00"+j+k,item);
								logger.info("v00"+j+k+"="+dataMap.get("v00"+j+k));
							}
						}
					}else if (subType == 1) {
						//测点信息
						for (int j = 1; j <= 10; j++) {
							String item = (String) morphDynaBean.get("item"+j);
							
							dataMap.put("v01"+j,item);
							logger.info("v01"+j+"="+dataMap.get("v01"+j));
						}
						
						//获取数据
						JSONArray jsonArray = a.getJSONArray("value");
						Object[] objects = jsonArray.toArray();
						logger.info("体部模体数据数量="+objects.length);
						
						for (int j = 0; j < objects.length; j++) {
							a = JSONObject.fromObject(objects[j]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
							
							for (int k = 1; k <= 4; k++) {
								String item = (String) morphDynaBean1.get("item"+k);
								
								dataMap.put("v01"+j+k,item);
								logger.info("v01"+j+k+"="+dataMap.get("v01"+j+k));
							}
						}
					}
				}else if (type == 1) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("诊断床定位精度数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							
							dataMap.put("v1"+j+k,item);
							logger.info("v1"+j+k+"="+dataMap.get("v1"+j+k));
						}
					}
				}else if (type == 2) {
					//测点信息
					for (int j = 1; j <= 10; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						
						dataMap.put("v2"+j,item);
						logger.info("v2"+j+"="+dataMap.get("v2"+j));
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("水的CT值（HU）、均匀性（HU）及噪声数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 3; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							
							dataMap.put("v2"+j+k,item);
							logger.info("v2"+j+k+"="+dataMap.get("v2"+j+k));
						}
					}
				}else if (type == 3) {
					//测点信息
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						
						dataMap.put("v3"+j,item);
						logger.info("v3"+j+"="+dataMap.get("v3"+j));
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("定位光精度数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 13; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							
							dataMap.put("v3"+j+k,item);
							logger.info("v3"+j+k+"="+dataMap.get("v3"+j+k));
						}
					}
				}else if (type == 4) {
					//测点信息
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						
						dataMap.put("v4"+j,item);
						logger.info("v4"+j+"="+dataMap.get("v4"+j));
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("重建层厚偏差数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 12; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							
							dataMap.put("v4"+j+k,item);
							logger.info("v4"+j+k+"="+dataMap.get("v4"+j+k));
						}
					}
				}else if (type == 5) {
					//测点信息
					for (int j = 1; j <= 8; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						
						dataMap.put("v5"+j,item);
						logger.info("v5"+j+"="+dataMap.get("v5"+j));
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("高对比分辨力lp/cm数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 3; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							
							dataMap.put("v5"+j+k,item);
							logger.info("v5"+j+k+"="+dataMap.get("v5"+j+k));
						}
					}
				}else if (type == 6) {
					//测点信息
					for (int j = 1; j <= 9; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						
						dataMap.put("v6"+j,item);
						logger.info("v6"+j+"="+dataMap.get("v6"+j));
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("低对比可探测能力数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 10; k++) {
							String item = (String) morphDynaBean1.get("item"+(k+1));
							
							dataMap.put("v6"+j+k,item);
							logger.info("v6"+j+k+"="+dataMap.get("v6"+j+k));
						}
					}
				}else if (type == 7) {
					//测点信息
					for (int j = 1; j <= 12; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						
						dataMap.put("v7"+j,item);
						logger.info("v7"+j+"="+dataMap.get("v7"+j));
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("CT值线性数据数量="+objects.length);
					
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 4; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							
							dataMap.put("v7"+j+k,item);
							logger.info("v7"+j+k+"="+dataMap.get("v7"+j+k));
						}
					}
				}
			}
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/380.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		   //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			 logger.info("失败");
		}
		return url;
	}
	
	/**
	 * 生成编号为381的原始数据表
	 * @return
	 */
	public String upload_381_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_381_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额  定  容  量
		    dataMap.put("exposureControl",task.getExposureControl());//自照曝光控制
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		   
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    String deviceName = "";
		    String deviceNum = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	
		    	//获取仪器名字和编号
		    	deviceName += "    "+taskDevices.get(i).getDevice().getDeviceName();
		    	deviceNum += "         "+taskDevices.get(i).getDevice().getDeviceNum();
			}
		    dataMap.put("deviceName",deviceName);//检测仪器名字
		    dataMap.put("deviceNum",deviceNum);//检测仪器编号
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是标准照片密度,1是自动曝光控制，2是胸壁侧射野的准直，" +
						"3是胸壁侧射野与台边的准直，4是光野与照射野的一致性，5是高对比分辨率，6是辐射输出量重复性，" +
						"7是半值层（HVL），8是辐射输出量率，9是特定辐射输出量，10是管电压指示的偏离，" +
						"11是乳腺平均剂量，12是曝光时间指示的偏离，13是焦皮距="+type);
				
				//标准照片密度
				if (type == 0) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p0","(X)");//检测项目
					}else{
						dataMap.put("p0","(√)");//检测项目
					}
					
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v0"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					
					//1是自动曝光控制
				}else if (type == 1) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p1","(X)");//检测项目
					}else{
						dataMap.put("p1","(√)");//检测项目
					}
					
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v1"+j+"="+item);
						
						dataMap.put("v1"+j,item);
					}
					
					//2是胸壁侧射野的准直
				}else if (type == 2) {
					int note = Integer.parseInt((String) morphDynaBean.get("note"));
					logger.info("0是都没打钩，1是第一个打钩，2是第二个打钩");
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断备注
					if (note == 0) {
						dataMap.put("n21","(X)");//备注1
						dataMap.put("n22","(X)");//备注2
					}else if (note == 1) {
						dataMap.put("n21","(√)");//备注1
						dataMap.put("n22","(X)");//备注2
					}else if (note == 2) {
						dataMap.put("n21","(X)");//备注1
						dataMap.put("n22","(√)");//备注2
					}
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p2","(X)");//检测项目
					}else{
						dataMap.put("p2","(√)");//检测项目
					}
					
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v2"+j+"="+item);
						
						dataMap.put("v2"+j,item);
					}
					
					//3是胸壁侧射野与台边的准直
				}else if (type == 3) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p3","(X)");//检测项目
					}else{
						dataMap.put("p3","(√)");//检测项目
					}
					
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v3"+j+"="+item);
						
						dataMap.put("v3"+j,item);
					}
					
					//4是光野与照射野的一致性
				}else if (type == 4) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p4","(X)");//检测项目
					}else{
						dataMap.put("p4","(√)");//检测项目
					}
					
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v4"+j+"="+item);
						
						dataMap.put("v4"+j,item);
					}
					
					//5是高对比分辨率
				}else if (type == 5) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p5","(X)");//检测项目
					}else{
						dataMap.put("p5","(√)");//检测项目
					}
					
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v5"+j+"="+item);
						
						dataMap.put("v5"+j,item);
					}
					
					//6是辐射输出量重复性
				}else if (type == 6) {
					
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v6"+j+"="+item);
						
						dataMap.put("v6"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 5; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v6"+j+k+"="+item);
							
							dataMap.put("v6"+j+k,item);
						}
					}
					
					//7是半值层（HVL）
				}else if (type == 7) {
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v7"+j+"="+item);
						
						dataMap.put("v7"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 5; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v7"+j+k+"="+item);
							
							dataMap.put("v7"+j+k,item);
						}
					}
					
					//8是辐射输出量率
				}else if (type == 8) {
					for (int j = 1; j <= 7; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v8"+j+"="+item);
						
						dataMap.put("v8"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v8"+j+k+"="+item);
							
							dataMap.put("v8"+j+k,item);
						}
					}
					
					//9是特定辐射输出量
				}else if (type == 9) {
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v9"+j+"="+item);
						
						dataMap.put("v9"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v9"+j+k+"="+item);
							
							dataMap.put("v9"+j+k,item);
						}
					}
					
					//10是管电压指示的偏离
				}else if (type == 10) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 6; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v10"+j+k+"="+item);
							
							dataMap.put("v10"+j+k,item);
						}
					}
					
					//11是乳腺平均剂量
				}else if (type == 11) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p11","(X)");//检测项目
					}else{
						dataMap.put("p11","(√)");//检测项目
					}
					
					for (int j = 1; j <= 9; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v11"+j+"="+item);
						
						dataMap.put("v11"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v11"+j+k+"="+item);
							
							dataMap.put("v11"+j+k,item);
						}
					}
					
					//12是曝光时间指示的偏离
				}else if (type == 12) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p12","(X)");//检测项目
					}else{
						dataMap.put("p12","(√)");//检测项目
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 6; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v12"+j+k+"="+item);
							
							dataMap.put("v12"+j+k,item);
						}
					}
					
					//13是焦皮距
				}else{
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p13","(X)");//检测项目
					}else{
						dataMap.put("p13","(√)");//检测项目
					}
					
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v13"+j+"="+item);
						
						dataMap.put("v13"+j,item);
					}
				}
			}
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/381.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为382的原始数据表
	 * @return
	 */
	public String upload_382_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_382_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额  定  容  量
		    dataMap.put("imageIntensifier",task.getImageIntensifier());//有无影像增强器
		    dataMap.put("brightnessControl",task.getBrightnessControl());//有无自动亮度控制
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		   
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    String deviceName = "";
		    String deviceNum = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	
		    	//获取仪器名字和编号
		    	deviceName += "    "+taskDevices.get(i).getDevice().getDeviceName();
		    	deviceNum += "         "+taskDevices.get(i).getDevice().getDeviceNum();
			}
		    dataMap.put("deviceName",deviceName);//检测仪器名字
		    dataMap.put("deviceNum",deviceNum);//检测仪器编号
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是典型值,1是最大值，2是影像增强器入射屏前空气比释动能率，" +
						"3是低对比分辨力，4是高对比分辨力，5是亮度自动控制，6是透视荧光屏灵敏度，" +
						"7是有用线束半值层，8是过滤材料厚度(mmAl)，9是焦皮距，10是照射野与影像接收器中心偏差，" +
						"11是台屏距，12是透视影像小于影像增强器，13是透视方形野的长和宽="+type);
				
				//透视受检者入射体表空气比释动能率典型值
				if (type == 0) {
					int note = Integer.parseInt((String) morphDynaBean.get("note"));
					logger.info("0是都没打钩，1是第一个打钩，2是第二个打钩，3是都打钩");
					int conditions = Integer.parseInt((String) morphDynaBean.get("conditions"));
					logger.info("0是自动控制没打钩，1是自动控制打钩");
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("u0单位="+pieces);
					
					dataMap.put("u0",pieces);//单位
					//判断备注
					if (note == 0) {
						dataMap.put("n01","(X)");//备注1
						dataMap.put("n02","(X)");//备注2
					}else if (note == 1) {
						dataMap.put("n01","(√)");//备注1
						dataMap.put("n02","(X)");//备注2
					}else if (note == 2) {
						dataMap.put("n01","(X)");//备注1
						dataMap.put("n02","(√)");//备注2
					}else{
						dataMap.put("n01","(√)");//备注1
						dataMap.put("n02","(√)");//备注2
					}
					
					//判断检测条件
					if (conditions == 0) {
						dataMap.put("c0","(X)");//检测条件
					}else{
						dataMap.put("c0","(√)");//检测条件
					}
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p0","(X)");//检测项目
					}else{
						dataMap.put("p0","(√)");//检测项目
					}
					
					for (int j = 1; j <= 8; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v0"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					
					//透视受检者入射空气比释动能率最大值
				}else if (type == 1) {
					int conditions = Integer.parseInt((String) morphDynaBean.get("conditions"));
					logger.info("0是自动控制没打钩，1是自动控制打钩");
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("u1单位="+pieces);
					
					dataMap.put("u1",pieces);//单位
					
					//判断检测条件
					if (conditions == 0) {
						dataMap.put("c1","(X)");//检测条件
					}else{
						dataMap.put("c1","(√)");//检测条件
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p1","(X)");//检测项目
					}else{
						dataMap.put("p1","(√)");//检测项目
					}
					
					for (int j = 1; j <= 8; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v1"+j+"="+item);
						
						dataMap.put("v1"+j,item);
					}
					
					//影像增强器入射屏前空气比释动能率
				}else if (type == 2) {
					int conditions = Integer.parseInt((String) morphDynaBean.get("conditions"));
					logger.info("0是自动控制没打钩，1是自动控制打钩");
					int note = Integer.parseInt((String) morphDynaBean.get("note"));
					logger.info("0是都没打钩，1是第一个打钩，2是第二个打钩，3是都打钩");
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("u2单位="+pieces);
					
					dataMap.put("u2",pieces);//单位
					
					//判断备注
					if (note == 0) {
						dataMap.put("n21","(X)");//备注1
						dataMap.put("n22","(X)");//备注2
					}else if (note == 1) {
						dataMap.put("n21","(√)");//备注1
						dataMap.put("n22","(X)");//备注2
					}else if (note == 2) {
						dataMap.put("n21","(X)");//备注1
						dataMap.put("n22","(√)");//备注2
					}else{
						dataMap.put("n21","(√)");//备注1
						dataMap.put("n22","(√)");//备注2
					}
					//判断检测条件
					if (conditions == 0) {
						dataMap.put("c2","(X)");//检测条件
					}else{
						dataMap.put("c2","(√)");//检测条件
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p2","(X)");//检测项目
					}else{
						dataMap.put("p2","(√)");//检测项目
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v2"+j+k+"="+item);
							
							dataMap.put("v2"+j+k,item);
						}
					}
					
					//低对比分辨力
				}else if (type == 3) {
					int conditions = Integer.parseInt((String) morphDynaBean.get("conditions"));
					logger.info("0是自动控制没打钩，1是自动控制打钩");
					
					//判断检测条件
					if (conditions == 0) {
						dataMap.put("c3","(X)");//检测条件
					}else{
						dataMap.put("c3","(√)");//检测条件
					}
					
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v3"+j+"="+item);
						
						dataMap.put("v3"+j,item);
					}
					
					//高对比分辨力
				}else if (type == 4) {
					int conditions = Integer.parseInt((String) morphDynaBean.get("conditions"));
					logger.info("0是自动控制没打钩，1是自动控制打钩");
					
					//判断检测条件
					if (conditions == 0) {
						dataMap.put("c4","(X)");//检测条件
					}else{
						dataMap.put("c4","(√)");//检测条件
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 4; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v4"+j+k+"="+item);
							
							dataMap.put("v4"+j+k,item);
						}
					}
					
					//影像增强器系统亮度自动控制
				}else if (type == 5) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					int note = Integer.parseInt((String) morphDynaBean.get("note"));
					logger.info("0是都没打钩，1是第一个打钩，2是第二个打钩");
					int conditions = Integer.parseInt((String) morphDynaBean.get("conditions"));
					logger.info("0是都没打钩，1是第一个打钩，2是第二个打钩");
					
					//判断备注
					if (note == 0) {
						dataMap.put("n51","(X)");//备注1
						dataMap.put("n52","(X)");//备注2
					}else if (note == 1) {
						dataMap.put("n51","(√)");//备注1
						dataMap.put("n52","(X)");//备注2
						
						dataMap.put("c51","(√)");//管电流
						dataMap.put("c52","(√)");//管电压
					}else{
						dataMap.put("n51","(X)");//备注1
						dataMap.put("n52","(√)");//备注2
						
						dataMap.put("c51","(√)");//管电流
						dataMap.put("c52","(X)");//管电压
					}
					
					//判断条件
					if (conditions == 0) {
						dataMap.put("c51","(X)");//条件1
						dataMap.put("c52","(X)");//条件2
					}else if (conditions == 1) {
						dataMap.put("c51","(√)");//条件1
						dataMap.put("c52","(X)");//条件2
					}else if (conditions == 2) {
						dataMap.put("c51","(X)");//条件1
						dataMap.put("c52","(√)");//条件2
					}else{
						dataMap.put("c51","(√)");//条件1
						dataMap.put("c52","(√)");//条件2
					}
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p5","(X)");//检测项目
					}else{
						dataMap.put("p5","(√)");//检测项目
					}
					
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 3; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v5"+j+k+"="+item);
							
							dataMap.put("v5"+j+k,item);
						}
					}
					
					
					//透视荧光屏灵敏度
				}else if (type == 6) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p6","(X)");//检测项目
					}else{
						dataMap.put("p6","(√)");//检测项目
					}
					
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v6"+j+"="+item);
						
						dataMap.put("v6"+j,item);
					}
					
					//有用线束半值层
				}else if (type == 7) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p7","(X)");//检测项目
					}else{
						dataMap.put("p7","(√)");//检测项目
					}
					
					for (int j = 1; j <= 2; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v7"+j+"="+item);
						
						dataMap.put("v7"+j,item);
					}
					
					//过滤材料厚度(mmAl)
				}else if (type == 8) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p8","(X)");//检测项目
					}else{
						dataMap.put("p8","(√)");//检测项目
					}
					
					for (int j = 1; j <= 2; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v8"+j+"="+item);
						
						dataMap.put("v8"+j,item);
					}
					
					//焦皮距
				}else if (type == 9) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p9","(X)");//检测项目
					}else{
						dataMap.put("p9","(√)");//检测项目
					}
					
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v9"+j+"="+item);
						
						dataMap.put("v9"+j,item);
					}
					
					//照射野与影像接收器中心偏差
				}else if (type == 10) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p10","(X)");//检测项目
					}else{
						dataMap.put("p10","(√)");//检测项目
					}
					
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v10"+j+"="+item);
						
						dataMap.put("v10"+j,item);
					}
					
					//最大照射野与普通荧光屏尺寸相同时的台屏距
				}else if (type == 11) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p11","(X)");//检测项目
					}else{
						dataMap.put("p11","(√)");//检测项目
					}
					
					for (int j = 1; j <= 2; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v11"+j+"="+item);
						
						dataMap.put("v11"+j,item);
					}
					
					//透视影像小于影像增强器
				}else if (type == 12) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p12","(X)");//检测项目
					}else{
						dataMap.put("p12","(√)");//检测项目
					}
					
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v12"+j+"="+item);
						
						dataMap.put("v12"+j,item);
					}
					
					//透视方形野的长和宽
				}else{
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p13","(X)");//检测项目
					}else{
						dataMap.put("p13","(√)");//检测项目
					}
					
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v13"+j+"="+item);
						
						dataMap.put("v13"+j,item);
					}
				}
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/382.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为383的原始数据表
	 * @return
	 */
	public String upload_383_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_383_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额  定  容  量
		    dataMap.put("timeDeixis",task.getTimeDeixis());//有无时间指示
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		   
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    String deviceName = "";
		    String deviceNum = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	
		    	//获取仪器名字和编号
		    	deviceName += "    "+taskDevices.get(i).getDevice().getDeviceName();
		    	deviceNum += "         "+taskDevices.get(i).getDevice().getDeviceNum();
			}
		    dataMap.put("deviceName",deviceName);//检测仪器名字
		    dataMap.put("deviceNum",deviceNum);//检测仪器编号
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是管电压调节范围,1是管电压指示的偏离，2是曝光时间指示的偏离，" +
						"3是有用线束半值层，4是过滤材料厚度，5是焦皮距，6是集光筒出口平面的最大几何尺寸（直径/对角线）="+type);
				
				//管电压调节范围
				if (type == 0) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("item5="+item5);
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("item7="+item7);
					
					if (item1.equals("")) {
						dataMap.put("p01","(X)");
					}else{
						dataMap.put("p01","(√)");
					}
					
					if (item3.equals("")) {
						dataMap.put("p03","(X)");
					}else{
						dataMap.put("p03","(√)");
					}
					
					if (item5.equals("")) {
						dataMap.put("p05","(X)");
					}else{
						dataMap.put("p05","(√)");
					}

					if (item7.equals("")) {
						dataMap.put("p07","(X)");
					}else{
						dataMap.put("p07","(√)");
					}
					
					for (int j = 1; j <= 8; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v0"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					
					//1是管电压指示的偏离
				}else if (type == 1) {
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 8; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v1"+j+k+"="+item);
							
							dataMap.put("v1"+j+k,item);
						}
					}
					
					//2是曝光时间指示的偏离
				}else if (type == 2) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p2","(X)");//检测项目
					}else{
						dataMap.put("p2","(√)");//检测项目
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 8; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v2"+j+k+"="+item);
							
							dataMap.put("v2"+j+k,item);
						}
					}
					
					//3是有用线束半值层
				}else if (type == 3) {
					
					for (int j = 1; j <= 8; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v3"+j+"="+item);
						
						dataMap.put("v3"+j,item);
					}
					
					//4是过滤材料厚度
				}else if (type == 4) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p4","(X)");//检测项目
					}else{
						dataMap.put("p4","(√)");//检测项目
					}
					
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v4"+j+"="+item);
						
						dataMap.put("v4"+j,item);
					}
					
					//5是焦皮距
				}else if (type == 5) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p5","(X)");//检测项目
					}else{
						dataMap.put("p5","(√)");//检测项目
					}
					
					
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v5"+j+"="+item);
						
						dataMap.put("v5"+j,item);
					}
					
					//6是集光筒出口平面的最大几何尺寸（直径/对角线）
				}else if (type == 6) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p6","(X)");//检测项目
					}else{
						dataMap.put("p6","(√)");//检测项目
					}
					
					for (int j = 1; j <= 2; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v6"+j+"="+item);
						
						dataMap.put("v6"+j,item);
					}
				}
			}
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/383.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为384的原始数据表
	 * @return
	 */
	public String upload_384_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_384_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("reportNum",task.getReportNum());//相关联摄影机性能检测报告号
		    
		    if (task.getTestingProject().equals("180cm")) {
		    	dataMap.put("p01","(√)");
		    	dataMap.put("p02","(X)");
		    	dataMap.put("testValue","");
			}else{
				dataMap.put("p01","(X)");
		    	dataMap.put("p02","(√)");
				dataMap.put("testValue",task.getTestingProject());
			}
		    
		   
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    String deviceName = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	
		    	//获取仪器名字和编号
		    	deviceName += "        "+taskDevices.get(i).getDevice().getDeviceName()+"/"+taskDevices.get(i).getDevice().getDeviceNum()+"";
			}
		    dataMap.put("deviceName",deviceName);//检测仪器名字
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("1是曝光参数选择，2是目视检查，" +
						"3是IP暗噪声，4是IP响应均匀性及一致性，5是照射量指示校准，" +
						"6是IP响应线性,7是激光束功能，8是空间分辨力与分辨力一致性，" +
						"9是低对比度细节探测，10是空间距离准确性，11是IP擦除完全性，" +
						"12是滤线栅效应（混叠），13是IP通过量="+type);
				
				//1是曝光参数选择
				if (type == 0) {
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("item1="+item1);
					int item8 = Integer.parseInt((String) morphDynaBean.get("item8"));
					logger.info("item8="+item8);
					int item15 = Integer.parseInt((String) morphDynaBean.get("item15"));
					logger.info("item15="+item15);
					
					if (item1 == 0) {
						dataMap.put("p11","(X)");
					}else{
						dataMap.put("p11","(√)");
					}
					
					if (item8 == 0) {
						dataMap.put("p12","(X)");
					}else{
						dataMap.put("p12","(√)");
					}
					
					if (item15 == 0) {
						dataMap.put("p13","(X)");
					}else{
						dataMap.put("p13","(√)");
					}
					
					for (int j = 1; j <= 21; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v1"+j+"="+item);
						
						dataMap.put("v1"+j,item);
					}
					
					//2是目视检查
				}else if (type == 1) {
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("item1="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					
					dataMap.put("v23",item3);
					
					if (item1 == 0) {
						dataMap.put("v21","(X)");
					}else{
						dataMap.put("v21","(√)");
					}
					
					if (item2 == 0) {
						dataMap.put("v22","(X)");
					}else{
						dataMap.put("v22","(√)");
					}
					
					//3是IP暗噪声
				}else if (type == 2) {
					String M1 = (String) morphDynaBean.get("M1");
					logger.info("M1="+M1);
					String M2 = (String) morphDynaBean.get("M2");
					logger.info("M2="+M2);
					String M3 = (String) morphDynaBean.get("M3");
					logger.info("M3="+M3);
					String S1 = (String) morphDynaBean.get("S1");
					logger.info("S1="+S1);
					String S2 = (String) morphDynaBean.get("S2");
					logger.info("S2="+S2);
					String S3 = (String) morphDynaBean.get("S3");
					logger.info("S3="+S3);
					String EI1 = (String) morphDynaBean.get("EI1");
					logger.info("EI1="+EI1);
					String EI2 = (String) morphDynaBean.get("EI2");
					logger.info("EI2="+EI2);
					String EI3 = (String) morphDynaBean.get("EI3");
					logger.info("EI3="+EI3);
					int conditions = Integer.parseInt((String) morphDynaBean.get("conditions"));
					logger.info("conditions="+conditions);
					
					//照射量指示值和厂家保证值
					if (task.getCheckDeviceVender().equals("锐珂(kodak)")) {
						dataMap.put("c31","(√)");
						dataMap.put("c32","(X)");
						dataMap.put("c33","(X)");
						dataMap.put("c34","(X)");
						dataMap.put("c321","(X)");
						dataMap.put("c322","(X)");
						
						dataMap.put("ip31","EI="+EI1);
						dataMap.put("ip32","EI="+EI2);
						dataMap.put("ip33","EI="+EI3);
					}else if (task.getCheckDeviceVender().equals("AGFA")) {
						dataMap.put("c32","(√)");
						dataMap.put("c31","(X)");
						dataMap.put("c33","(X)");
						dataMap.put("c34","(X)");
						
						if (conditions == 0) {
							dataMap.put("c321","(X)");
							dataMap.put("c322","(X)");
						}else if (conditions == 1) {
							dataMap.put("c321","(√)");
							dataMap.put("c322","(X)");
						}else{
							dataMap.put("c321","(X)");
							dataMap.put("c322","(√)");
						}
						
						dataMap.put("ip31","S="+S1+",M="+M1);
						dataMap.put("ip32","S="+S2+",M="+M2);
						dataMap.put("ip33","S="+S3+",M="+M3);
					}else if (task.getCheckDeviceVender().equals("FUJIFILM")) {
						dataMap.put("c33","(√)");
						dataMap.put("c31","(X)");
						dataMap.put("c32","(X)");
						dataMap.put("c34","(X)");
						dataMap.put("c321","(X)");
						dataMap.put("c322","(X)");
						
						dataMap.put("ip31","S="+S1);
						dataMap.put("ip32","S="+S2);
						dataMap.put("ip33","S="+S3);
					}else if (task.getCheckDeviceVender().equals("KONIKA")) {
						dataMap.put("c31","(X)");
						dataMap.put("c32","(X)");
						dataMap.put("c33","(X)");
						dataMap.put("c34","(√)");
						dataMap.put("c321","(X)");
						dataMap.put("c322","(X)");
						
						dataMap.put("ip31","S="+S1);
						dataMap.put("ip32","S="+S2);
						dataMap.put("ip33","S="+S3);
					}else{
						dataMap.put("c31","(X)");
						dataMap.put("c32","(X)");
						dataMap.put("c33","(X)");
						dataMap.put("c34","(X)");
						dataMap.put("c321","(X)");
						dataMap.put("c322","(X)");
						
						String ANY1 = (String) morphDynaBean.get("ANY1");
						logger.info("ANY1="+ANY1);
						String ANY2 = (String) morphDynaBean.get("ANY2");
						logger.info("ANY2="+ANY2);
						String ANY3 = (String) morphDynaBean.get("ANY3");
						logger.info("ANY3="+ANY3);
						
						dataMap.put("ip31",ANY1);
						dataMap.put("ip32",ANY2);
						dataMap.put("ip33",ANY3);
					}
					
					//响应照射量
					dataMap.put("v3","(√)");
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v3"+j+"="+item);
						
						dataMap.put("v3"+j,item);
					}
					
					//照片或影像全野目视检查
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("item4="+item4);
					if (item4.equals("0")) {
						dataMap.put("z311","(X)");
						dataMap.put("z312","(X)");
					}else if (item4.equals("1")) {
						dataMap.put("z311","(√)");
						dataMap.put("z312","(X)");
					}else{
						dataMap.put("z311","(X)");
						dataMap.put("z312","(√)");
					}
					
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("item5="+item5);
					if (item5.equals("0")) {
						dataMap.put("z321","(X)");
						dataMap.put("z322","(X)");
					}else if (item5.equals("1")) {
						dataMap.put("z321","(√)");
						dataMap.put("z322","(X)");
					}else{
						dataMap.put("z321","(X)");
						dataMap.put("z322","(√)");
					}
					String item6 = (String) morphDynaBean.get("item6");
					logger.info("item6="+item6);
					if (item6.equals("0")) {
						dataMap.put("z331","(X)");
						dataMap.put("z332","(X)");
					}else if (item6.equals("1")) {
						dataMap.put("z331","(√)");
						dataMap.put("z332","(X)");
					}else{
						dataMap.put("z331","(X)");
						dataMap.put("z332","(√)");
					}
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("item7="+item7);
					if (item7.equals("0")) {
						dataMap.put("z341","(X)");
						dataMap.put("z342","(X)");
					}else if (item7.equals("1")) {
						dataMap.put("z341","(√)");
						dataMap.put("z342","(X)");
					}else{
						dataMap.put("z341","(X)");
						dataMap.put("z342","(√)");
					}
					String item8 = (String) morphDynaBean.get("item8");
					logger.info("item8="+item8);
					if (item8.equals("0")) {
						dataMap.put("z351","(X)");
						dataMap.put("z352","(X)");
					}else if (item8.equals("1")) {
						dataMap.put("z351","(√)");
						dataMap.put("z352","(X)");
					}else{
						dataMap.put("z351","(X)");
						dataMap.put("z352","(√)");
					}
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("item9="+item9);
					if (item9.equals("0")) {
						dataMap.put("z361","(X)");
						dataMap.put("z362","(X)");
					}else if (item9.equals("1")) {
						dataMap.put("z361","(√)");
						dataMap.put("z362","(X)");
					}else{
						dataMap.put("z361","(X)");
						dataMap.put("z362","(√)");
					}
					String item10 = (String) morphDynaBean.get("item10");
					logger.info("item10="+item10);
					if (item10.equals("0")) {
						dataMap.put("z371","(X)");
						dataMap.put("z372","(X)");
					}else if (item10.equals("1")) {
						dataMap.put("z371","(√)");
						dataMap.put("z372","(X)");
					}else{
						dataMap.put("z371","(X)");
						dataMap.put("z372","(√)");
					}
					String item11 = (String) morphDynaBean.get("item11");
					logger.info("item11="+item11);
					if (item11.equals("0")) {
						dataMap.put("z381","(X)");
						dataMap.put("z382","(X)");
					}else if (item11.equals("1")) {
						dataMap.put("z381","(√)");
						dataMap.put("z382","(X)");
					}else{
						dataMap.put("z381","(X)");
						dataMap.put("z382","(√)");
					}
					String item12 = (String) morphDynaBean.get("item12");
					logger.info("item12="+item12);
					if (item12.equals("0")) {
						dataMap.put("z391","(X)");
						dataMap.put("z392","(X)");
					}else if (item12.equals("1")) {
						dataMap.put("z391","(√)");
						dataMap.put("z392","(X)");
					}else{
						dataMap.put("z391","(X)");
						dataMap.put("z392","(√)");
					}
					
					//4是IP响应均匀性及一致性
				}else if (type == 3) {
					int conditions = Integer.parseInt((String) morphDynaBean.get("conditions"));
					logger.info("conditions="+conditions);
					
					if (conditions == 0) {
						dataMap.put("c41","(X)");
						dataMap.put("c42","(X)");
					}else if (conditions == 1) {
						dataMap.put("c41","(√)");
						dataMap.put("c42","(X)");
					}else{
						dataMap.put("c41","(X)");
						dataMap.put("c42","(√)");
					}
					
					for (int j = 1; j <= 25; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v4"+j+"="+item);
						
						dataMap.put("v4"+j,item);
					}
					
					//5是照射量指示校准
				}else if (type == 4) {
					String M1 = (String) morphDynaBean.get("M1");
					logger.info("M1="+M1);
					String M2 = (String) morphDynaBean.get("M2");
					logger.info("M2="+M2);
					String M3 = (String) morphDynaBean.get("M3");
					logger.info("M3="+M3);
					String S1 = (String) morphDynaBean.get("S1");
					logger.info("S1="+S1);
					String S2 = (String) morphDynaBean.get("S2");
					logger.info("S2="+S2);
					String S3 = (String) morphDynaBean.get("S3");
					logger.info("S3="+S3);
					String EI1 = (String) morphDynaBean.get("EI1");
					logger.info("EI1="+EI1);
					String EI2 = (String) morphDynaBean.get("EI2");
					logger.info("EI2="+EI2);
					String EI3 = (String) morphDynaBean.get("EI3");
					logger.info("EI3="+EI3);
					
					//照射量指示值
					if (task.getCheckDeviceVender().equals("锐珂(kodak)")) {
						dataMap.put("ip51","EI="+EI1);
						dataMap.put("ip52","EI="+EI2);
						dataMap.put("ip53","EI="+EI3);
					}else if (task.getCheckDeviceVender().equals("AGFA")) {
						dataMap.put("ip51","S="+S1+",M="+M1);
						dataMap.put("ip52","S="+S2+",M="+M2);
						dataMap.put("ip53","S="+S3+",M="+M3);
					}else if (task.getCheckDeviceVender().equals("FUJIFILM")) {
						dataMap.put("ip51","S="+S1);
						dataMap.put("ip52","S="+S2);
						dataMap.put("ip53","S="+S3);
					}else if (task.getCheckDeviceVender().equals("KONIKA")) {
						dataMap.put("ip51","S="+S1);
						dataMap.put("ip52","S="+S2);
						dataMap.put("ip53","S="+S3);
					}else{
						String ANY1 = (String) morphDynaBean.get("ANY1");
						logger.info("ANY1="+ANY1);
						String ANY2 = (String) morphDynaBean.get("ANY2");
						logger.info("ANY2="+ANY2);
						String ANY3 = (String) morphDynaBean.get("ANY3");
						logger.info("ANY3="+ANY3);
						
						dataMap.put("ip51",ANY1);
						dataMap.put("ip52",ANY2);
						dataMap.put("ip53",ANY3);
					}
					
					for (int j = 1; j <= 11; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v5"+j+"="+item);
						
						dataMap.put("v5"+j,item);
					}
					
					//6是IP响应线性
				}else if (type == 5) {
					String M1 = (String) morphDynaBean.get("M1");
					logger.info("M1="+M1);
					String M2 = (String) morphDynaBean.get("M2");
					logger.info("M2="+M2);
					String M3 = (String) morphDynaBean.get("M3");
					logger.info("M3="+M3);
					String S1 = (String) morphDynaBean.get("S1");
					logger.info("S1="+S1);
					String S2 = (String) morphDynaBean.get("S2");
					logger.info("S2="+S2);
					String S3 = (String) morphDynaBean.get("S3");
					logger.info("S3="+S3);
					String EI1 = (String) morphDynaBean.get("EI1");
					logger.info("EI1="+EI1);
					String EI2 = (String) morphDynaBean.get("EI2");
					logger.info("EI2="+EI2);
					String EI3 = (String) morphDynaBean.get("EI3");
					logger.info("EI3="+EI3);
					
					//照射量指示值
					if (task.getCheckDeviceVender().equals("锐珂(kodak)")) {
						dataMap.put("ip61","EI="+EI1);
						dataMap.put("ip62","EI="+EI2);
						dataMap.put("ip63","EI="+EI3);
					}else if (task.getCheckDeviceVender().equals("AGFA")) {
						dataMap.put("ip61","S="+S1+",M="+M1);
						dataMap.put("ip62","S="+S2+",M="+M2);
						dataMap.put("ip63","S="+S3+",M="+M3);
					}else if (task.getCheckDeviceVender().equals("FUJIFILM")) {
						dataMap.put("ip61","S="+S1);
						dataMap.put("ip62","S="+S2);
						dataMap.put("ip63","S="+S3);
					}else if (task.getCheckDeviceVender().equals("KONIKA")) {
						dataMap.put("ip61","S="+S1);
						dataMap.put("ip62","S="+S2);
						dataMap.put("ip63","S="+S3);
					}else{
						String ANY1 = (String) morphDynaBean.get("ANY1");
						logger.info("ANY1="+ANY1);
						String ANY2 = (String) morphDynaBean.get("ANY2");
						logger.info("ANY2="+ANY2);
						String ANY3 = (String) morphDynaBean.get("ANY3");
						logger.info("ANY3="+ANY3);
						
						dataMap.put("ip61",ANY1);
						dataMap.put("ip62",ANY2);
						dataMap.put("ip63",ANY3);
					}
					
					for (int j = 1; j <= 9; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v6"+j+"="+item);
						
						dataMap.put("v6"+j,item);
					}
					
					//7是激光束功能
				}else if (type == 6) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					
					if (item1.equals("0")) {
						dataMap.put("v71","(X)");
					}else{
						dataMap.put("v71","(√)");
					}
					
					if (item2.equals("0")) {
						dataMap.put("v72","(X)");
					}else{
						dataMap.put("v72","(√)");
					}
					
					dataMap.put("v73",item3);
					
					//8是空间分辨力与分辨力一致性
				}else if (type == 7) {
					for (int j = 1; j <= 7; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v8"+j+"="+item);
						
						dataMap.put("v8"+j,item);
					}
					String item8 = (String) morphDynaBean.get("item8");
					logger.info("item8="+item8);
					
					if (item8.equals("0")) {
						dataMap.put("c81","(X)");
						dataMap.put("c82","(X)");
					}else if (item8.equals("1")) {
						dataMap.put("c81","(√)");
						dataMap.put("c82","(X)");
					}else{
						dataMap.put("c81","(X)");
						dataMap.put("c82","(√)");
					}
					
					//9是低对比度细节探测
				}else if (type == 8) {
					for (int j = 1; j <= 8; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v9"+j+"="+item);
						
						dataMap.put("v9"+j,item);
					}
					
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("item5="+item5);
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("item7="+item7);
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("item9="+item9);
					
					if (item5.equals("0")) {
						dataMap.put("c91","(X)");
					}else{
						dataMap.put("c91","(√)");
					}
					
					if (item7.equals("0")) {
						dataMap.put("c92","(X)");
					}else{
						dataMap.put("c92","(√)");
					}
					
					if (item9.equals("0")) {
						dataMap.put("c93","(X)");
					}else{
						dataMap.put("c93","(√)");
					}
					
					//10是空间距离准确性
				}else if (type == 9) {
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v10"+j+"="+item);
						
						dataMap.put("v10"+j,item);
					}
					
					//11是IP擦除完全性
				}else if (type == 10) {
					int conditions = Integer.parseInt((String) morphDynaBean.get("conditions"));
					logger.info("conditions="+conditions);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("item5="+item5);
					
					dataMap.put("v111",item2);
					dataMap.put("v112",item4);
					if (item1.equals("0")) {
						dataMap.put("z111","(X)");
					}else{
						dataMap.put("z111","(√)");
					}
					
					if (item3.equals("0")) {
						dataMap.put("z112","(X)");
					}else{
						dataMap.put("z112","(√)");
					}
					
					if (item5.equals("0")) {
						dataMap.put("z113","(X)");
					}else{
						dataMap.put("z113","(√)");
					}
					
					//厂家保证值
					if (task.getCheckDeviceVender().equals("锐珂(kodak)")) {
						dataMap.put("c111","(√)");
						dataMap.put("c112","(X)");
						dataMap.put("c113","(X)");
						dataMap.put("c114","(X)");
						dataMap.put("c1121","(X)");
						dataMap.put("c1122","(X)");
					}else if (task.getCheckDeviceVender().equals("AGFA")) {
						dataMap.put("c112","(√)");
						dataMap.put("c111","(X)");
						dataMap.put("c113","(X)");
						dataMap.put("c114","(X)");
						
						if (conditions == 0) {
							dataMap.put("c1121","(X)");
							dataMap.put("c1122","(X)");
						}else if (conditions == 1) {
							dataMap.put("c1121","(√)");
							dataMap.put("c1122","(X)");
						}else{
							dataMap.put("c1121","(X)");
							dataMap.put("c1122","(√)");
						}
					}else if (task.getCheckDeviceVender().equals("FUJIFILM")) {
						dataMap.put("c113","(√)");
						dataMap.put("c111","(X)");
						dataMap.put("c112","(X)");
						dataMap.put("c114","(X)");
						dataMap.put("c1121","(X)");
						dataMap.put("c1122","(X)");
					}else if (task.getCheckDeviceVender().equals("KONIKA")) {
						dataMap.put("c111","(X)");
						dataMap.put("c112","(X)");
						dataMap.put("c113","(X)");
						dataMap.put("c114","(√)");
						dataMap.put("c1121","(X)");
						dataMap.put("c1122","(X)");
					}else{
						dataMap.put("c111","(X)");
						dataMap.put("c112","(X)");
						dataMap.put("c113","(X)");
						dataMap.put("c114","(X)");
						dataMap.put("c1121","(X)");
						dataMap.put("c1122","(X)");
					}
					
					//12是滤线栅效应（混叠）
				}else if (type == 11) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("item2="+item2);
					
					if (item1.equals("0")) {
						dataMap.put("c121","(X)");
					}else{
						dataMap.put("c121","(√)");
					}
					
					if (item2.equals("0")) {
						dataMap.put("c122","(X)");
					}else{
						dataMap.put("c122","(√)");
					}
					
					//13是IP通过量
				}else if (type == 12) {
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v13"+j+"="+item);
						
						dataMap.put("v13"+j,item);
					}
				}
			}
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/384.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为385的原始数据表
	 * @return
	 */
	public String upload_385_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_385_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额  定  容  量
		    dataMap.put("sidDeixis",task.getSidDeixis());//SID指示
		    dataMap.put("radiometricControl",task.getRadiometricControl());//自照射量控制
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("note",task.getNote());//备注
		   
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    String deviceName = "";
		    String deviceNum = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	
		    	//获取仪器名字和编号
		    	deviceName += "    "+taskDevices.get(i).getDevice().getDeviceName();
		    	deviceNum += "         "+taskDevices.get(i).getDevice().getDeviceNum();
			}
		    dataMap.put("deviceName",deviceName);//检测仪器名字
		    dataMap.put("deviceNum",deviceNum);//检测仪器编号
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是输出量,1是有用线束半值层（HVL），2是有用线束垂直度偏离，" +
						"3是光野与照射野四边的偏离，4是光野与照射野中心的偏离，5是照射野与影像接收器的偏离，6是过滤材料厚度(mmAl),7是SID值的偏离，8是自动照射量控制响应，9是自动照射量控制重复性，10是滤线栅与有用线束中心对准，11是有效焦点尺寸="+type);
				
				//0是输出量
				if (type == 0) {
					for (int j = 1; j <= 10; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v0"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 9; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v0"+j+k+"="+item);
							
							dataMap.put("v0"+j+k,item);
						}
					}
					
					//1是有用线束半值层（HVL）
				}else if (type == 1) {
					for (int j = 1; j <= 2; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v1"+j+"="+item);
						
						dataMap.put("v1"+j,item);
					}
					
					//2是有用线束垂直度偏离
				}else if (type == 2) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p2","(X)");//检测项目
					}else{
						dataMap.put("p2","(√)");//检测项目
					}
					
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("item4="+item4);
					
					dataMap.put("v21",item4);
					if (item1.equals("1")) {
						dataMap.put("c21","(√)");
					}else{
						dataMap.put("c21","(X)");
					}
					
					if (item2.equals("1")) {
						dataMap.put("c22","(√)");
					}else{
						dataMap.put("c22","(X)");
					}
					
					if (item3.equals("1")) {
						dataMap.put("c23","(√)");
					}else{
						dataMap.put("c23","(X)");
					}
					
					//3是光野与照射野四边的偏离
				}else if (type == 3) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p3","(X)");//检测项目
					}else{
						dataMap.put("p3","(√)");//检测项目
					}
					
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v3"+j+"="+item);
						
						dataMap.put("v3"+j,item);
					}
					
					//4是光野与照射野中心的偏离
				}else if (type == 4) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p4","(X)");//检测项目
					}else{
						dataMap.put("p4","(√)");//检测项目
					}
					
					for (int j = 1; j <= 1; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v4"+j+"="+item);
						
						dataMap.put("v4"+j,item);
					}
					
					//5是照射野与影像接收器的偏离
				}else if (type == 5) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p5","(X)");//检测项目
					}else{
						dataMap.put("p5","(√)");//检测项目
					}
					
					
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v5"+j+"="+item);
						
						dataMap.put("v5"+j,item);
					}
					
					//6是过滤材料厚度(mmAl)
				}else if (type == 6) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p6","(X)");//检测项目
					}else{
						dataMap.put("p6","(√)");//检测项目
					}
					
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v6"+j+"="+item);
						
						dataMap.put("v6"+j,item);
					}
					
					//7是SID值的偏离
				}else if (type == 7) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p7","(X)");//检测项目
					}else{
						dataMap.put("p7","(√)");//检测项目
					}
					
					for (int j = 1; j <= 12; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v7"+j+"="+item);
						
						dataMap.put("v7"+j,item);
					}
					
					//8是自动照射量控制响应
				}else if (type == 8) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p8","(X)");//检测项目
					}else{
						dataMap.put("p8","(√)");//检测项目
					}
					
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v8"+j+"="+item);
						
						dataMap.put("v8"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 3; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v8"+j+k+"="+item);
							
							dataMap.put("v8"+j+k,item);
						}
					}
					
					//9是自动照射量控制重复性
				}else if (type == 9) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p9","(X)");//检测项目
					}else{
						dataMap.put("p9","(√)");//检测项目
					}
					
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v9"+j+"="+item);
						
						dataMap.put("v9"+j,item);
					}
					
					//10是滤线栅与有用线束中心对准
				}else if (type == 10) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p10","(X)");//检测项目
					}else{
						dataMap.put("p10","(√)");//检测项目
					}
					
					for (int j = 1; j <= 8; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v10"+j+"="+item);
						
						dataMap.put("v10"+j,item);
					}
					String item9 = (String) morphDynaBean.get("item9");
					logger.info("item9="+item9);
					String item10 = (String) morphDynaBean.get("item10");
					logger.info("item10="+item10);
					
					if (item9.equals("1")) {
						dataMap.put("c101","(√)");
						dataMap.put("c102","(X)");
					}else if (item9.equals("0")) {
						dataMap.put("c101","(X)");
						dataMap.put("c102","(X)");
					}else{
						dataMap.put("c101","(X)");
						dataMap.put("c102","(√)");
					}
					
					if (item10.equals("1")) {
						dataMap.put("c103","(√)");
						dataMap.put("c104","(X)");
					}else if (item10.equals("0")) {
						dataMap.put("c103","(X)");
						dataMap.put("c104","(X)");
					}else{
						dataMap.put("c103","(X)");
						dataMap.put("c104","(√)");
					}
					
					//11是有效焦点尺寸
				}else if (type == 11) {
					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//判断检测项目
					if (project == 0) {
						dataMap.put("p11","(X)");//检测项目
					}else{
						dataMap.put("p11","(√)");//检测项目
					}
					
					for (int j = 1; j <= 16; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v11"+j+"="+item);
						
						dataMap.put("v11"+j,item);
					}
				}
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/385.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为386的原始数据表
	 * @return
	 */
	public String upload_386_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_386_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("sourcesSpecies",task.getSourcesSpecies());//治疗源核数种类
		    dataMap.put("sourcesVender",task.getSourcesVender());//治疗源生产厂家
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				for (int j = 1; j <= 5; j++) {
					String item = (String) morphDynaBean.get("item"+j);
					logger.info("item="+item);
					
					dataMap.put("v"+j,item);
				}
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String item10 = (String) morphDynaBean1.get("item10");
					logger.info("item10="+item10);
					
					
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setItem1(item1);
					pointData.setItem2(item2);
					pointData.setItem3(item3);
					pointData.setItem4(item4);
					pointData.setItem5(item5);
					pointData.setItem6(item6);
					pointData.setItem7(item7);
					pointData.setItem8(item8);
					pointData.setItem9(item9);
					pointData.setItem10(item10);
					
					pointDatas.add(pointData);
				}
				
				//补空值
				if (objects.length == 0) {
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setItem1("");
					pointData.setItem2("");
					pointData.setItem3("");
					pointData.setItem4("");
					pointData.setItem5("");
					pointData.setItem6("");
					pointData.setItem7("");
					pointData.setItem8("");
					pointData.setItem9("");
					pointData.setItem10("");
					
					pointDatas.add(pointData);
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/386.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为387的原始数据表
	 * @return
	 */
	public String upload_387_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_387_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("testingWay",task.getTestingWay());//检测方式
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    
		  //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    String device = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	//获取仪器
		    	String deviceName = taskDevices.get(i).getDevice().getDeviceName();
		    	device = taskDevices.get(i).getDevice().getDeviceName()+"/"+taskDevices.get(i).getDevice().getDeviceNum();
		    	logger.info("仪器="+deviceName);
		    	
		    	dataMap.put("deviceName",deviceName);
		    	dataMap.put("device",device);
			}
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是空间分辨率，1是灵敏度，2是散射分数，3是计数丢失和随机事件校正精度（NECR）="+type);
				
				//0是空间分辨率
				if (type == 0) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					
					dataMap.put("v01",item1);
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 6; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v0"+j+k+"="+item);
							
							dataMap.put("v0"+j+k,item);
						}
					}
					
					
					//1是灵敏度
				}else if (type == 1) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					
					dataMap.put("v11",item1);
					dataMap.put("v12",item2);
					dataMap.put("v13",item3);
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 2; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v1"+j+k+"="+item);
							
							dataMap.put("v1"+j+k,item);
						}
					}
					
					//2是散射分数
				}else if (type == 2) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					
					dataMap.put("v21",item1);
					
					//3是计数丢失和随机事件校正精度（NECR）
				}else if (type == 3) {
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v3"+j,item);
					}
				}
			}
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/387.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为388的原始数据表
	 * @return
	 */
	public String upload_388_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_388_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("factor",task.getFactor());//校准因子
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("note",task.getNote());//备注
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	//获取仪器
		    	String device = taskDevices.get(i).getDevice().getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		device = taskDevices.get(i).getDevice().getDeviceName();
				}
		    	logger.info("仪器="+device);
		    	
		    	dataMap.put("deviceName",device);
			}
		    
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				for (int j = 1; j <= 18; j++) {
					String item = (String) morphDynaBean.get("item"+j);
					logger.info("item="+item);
					
					dataMap.put("v"+j,item);
				}
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String item10 = (String) morphDynaBean1.get("item10");
					logger.info("item10="+item10);
					
					
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setItem1(item1);
					pointData.setItem2(item2);
					pointData.setItem3(item3);
					pointData.setItem4(item4);
					pointData.setItem5(item5);
					pointData.setItem6(item6);
					pointData.setItem7(item7);
					pointData.setItem8(item8);
					pointData.setItem9(item9);
					pointData.setItem10(item10);
					
					pointDatas.add(pointData);
				}
				
				//补空值
				if (objects.length == 0) {
					ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
					pointData.setItem1("");
					pointData.setItem2("");
					pointData.setItem3("");
					pointData.setItem4("");
					pointData.setItem5("");
					pointData.setItem6("");
					pointData.setItem7("");
					pointData.setItem8("");
					pointData.setItem9("");
					pointData.setItem10("");
					
					pointDatas.add(pointData);
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/388.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为389的原始数据表
	 * @return
	 */
	public String upload_389_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_389_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("probeCrystal",task.getProbeCrystal());//探头晶体厚度
		    dataMap.put("checkDeviceProbe",task.getCheckDeviceProbe());//被检设备探头个数
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    
		  //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	//获取仪器
		    	String deviceName = taskDevices.get(i).getDevice().getDeviceName();
		    	logger.info("仪器="+deviceName);
		    	
		    	dataMap.put("deviceName",deviceName);
			}
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是空气中固有计数率特性，1是固有泛源非均匀性，2是固有空间分辨力，" +
						"3是固有空间线性,4是系统平面灵敏度Cps/MBq，5是无散射系统空间分辨率，6是SPECT的系统空间分辨率="+type);
				
				//0是空气中固有计数率特性
				if (type == 0) {
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					
					
					//1是固有泛源非均匀性
				}else if (type == 1) {
					for (int j = 1; j <= 12; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v1"+j,item);
					}
					
					//2是固有空间分辨力
				}else if (type == 2) {
					for (int j = 1; j <= 10; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v2"+j,item);
					}
					
					//3是固有空间线性
				}else if (type == 3) {
					for (int j = 1; j <= 10; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v3"+j,item);
					}
					
					//4是系统平面灵敏度Cps/MBq
				}else if (type == 4) {
					for (int j = 1; j <= 17; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v4"+j,item);
					}
					
					//5是无散射系统空间分辨率
				}else if (type == 5) {
					for (int j = 1; j <= 10; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v5"+j,item);
					}
					
					//6是SPECT的系统空间分辨率
				}else if (type == 6) {
					for (int j = 1; j <= 11; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v6"+j,item);
					}
				}
			}
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/389.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为390的原始数据表
	 * @return
	 */
	public String upload_390_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_390_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkComputerRoom",task.getCheckComputerRoom());//受检机房名称
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    
		  //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	//获取仪器
		    	String deviceName = taskDevices.get(i).getDevice().getDeviceName();
		    	
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = taskDevices.get(i).getDevice().getDeviceName()+"(仪器编号："+taskDevices.get(i).getDevice().getDeviceNum()+")";
				}
		    	logger.info("仪器="+deviceName);
		    	
		    	dataMap.put("deviceName",deviceName);
			}
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是等中心偏差，1是治疗定位偏差，2是照射野尺寸与标称值最大偏差，" +
						"3是照射野半影宽度,4是等中心处计划剂量与实测剂量相对偏差="+type);
				
				//0是等中心偏差
				if (type == 0) {
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					
					
					//1是治疗定位偏差
				}else if (type == 1) {
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v1"+j,item);
					}
					
					//2是照射野尺寸与标称值最大偏差
				}else if (type == 2) {
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v2"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 3; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v2"+j+k+"="+item);
							
							dataMap.put("v2"+j+k,item);
						}
					}
					
					//3是照射野半影宽度
				}else if (type == 3) {
					for (int j = 1; j <= 7; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v3"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 3; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v3"+j+k+"="+item);
							
							dataMap.put("v3"+j+k,item);
						}
					}
					
					//4是等中心处计划剂量与实测剂量相对偏差
				}else if (type == 4) {
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v4"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 9; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v4"+j+k+"="+item);
							
							dataMap.put("v4"+j+k,item);
						}
					}
				}
			}
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/390.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为391的原始数据表
	 * @return
	 */
	public String upload_391_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_391_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("nom",task.getNominalCapacity());//额定容量
		    dataMap.put("nom1",task.getNominalCapacity1());//额定容量1
		    dataMap.put("cond",task.getConditions());//检测条件
		    dataMap.put("cond1",task.getConditions1());//检测条件1
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("up",task.getUpstairs());//楼上
		    dataMap.put("down",task.getDownstairs());//楼下
		    dataMap.put("note",task.getNote());//备注
		    
		  //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas5 = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    //解析测点和数据json
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是0°测点,2是90°测点,3是180°测点,4是270°测点,5是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				//0是本底测点
				if (type == 0) {
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item2 = (String) morphDynaBean1.get("item2");
						logger.info("item2="+item2);
						String item3 = (String) morphDynaBean1.get("item3");
						logger.info("item3="+item3);
						String item4 = (String) morphDynaBean1.get("item4");
						logger.info("item4="+item4);
						String item5 = (String) morphDynaBean1.get("item5");
						logger.info("item5="+item5);
						String item6 = (String) morphDynaBean1.get("item6");
						logger.info("item6="+item6);
						String item7 = (String) morphDynaBean1.get("item7");
						logger.info("item7="+item7);
						String item8 = (String) morphDynaBean1.get("item8");
						logger.info("item8="+item8);
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("item9="+item9);
						pieces = (String) morphDynaBean1.get("pieces");
						logger.info("单位="+pieces);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}
					
					
				}else{
					
					if (objects.length >= 1) {
						a = JSONObject.fromObject(objects[0]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						if (type == 1) {
							dataMap.put("x",(String) morphDynaBean.get("item1"));//X射线检测结果
							dataMap.put("z",(String) morphDynaBean.get("item2"));//中子检测结果
							dataMap.put("x1",(String) morphDynaBean.get("item3"));//X射线照射野1
							dataMap.put("x2",(String) morphDynaBean.get("item4"));//X射线照射野2
							dataMap.put("z1",(String) morphDynaBean.get("item5"));//中子照射野1
							dataMap.put("z2",(String) morphDynaBean.get("item6"));//中子照射野2
							
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v11"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else if (type == 2) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v21"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else if (type == 3) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v31"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else if (type == 4) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v41"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else{
							dataMap.put("dj",(String) morphDynaBean.get("item1"));//机头偏转角度
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v51"+j,(String) morphDynaBean1.get("item"+j));
							}
						}
					}else{
						if (type == 1) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v11"+j,"");
							}
						}else if (type == 2) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v21"+j,"");
							}
						}else if (type == 3) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v31"+j,"");
							}
						}else if (type == 4) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v41"+j,"");
							}
						}else{
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v51"+j,"");
							}
						}
						
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						pointData.setItem1("");
						pointData.setItem2("");
						pointData.setItem3("");
						pointData.setItem4("");
						pointData.setItem5("");
						pointData.setItem6("");
						
						
						pointDatas1.add(pointData);
						pointDatas2.add(pointData);
						pointDatas3.add(pointData);
						pointDatas4.add(pointData);
						dataMap.put("dj",(String) morphDynaBean.get("item1"));//机头偏转角度
						
						pointDatas5.add(pointData);
						
					}
					
					
					
					//判断大于2就-1循环，不然就正常循环
					int as = 0;
					if (objects.length > 2) {
						as = objects.length-1;
					}else{
						as = objects.length;
					}
					for (int j = 1; j < as; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item2 = (String) morphDynaBean1.get("item2");
						logger.info("item2="+item2);
						String item3 = (String) morphDynaBean1.get("item3");
						logger.info("item3="+item3);
						String item4 = (String) morphDynaBean1.get("item4");
						logger.info("item4="+item4);
						String item5 = (String) morphDynaBean1.get("item5");
						logger.info("item5="+item5);
						String item6 = (String) morphDynaBean1.get("item6");
						logger.info("item6="+item6);
						String item7 = (String) morphDynaBean1.get("item7");
						logger.info("item7="+item7);
						String item8 = (String) morphDynaBean1.get("item8");
						logger.info("item8="+item8);
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("item9="+item9);
						String item10 = (String) morphDynaBean1.get("item10");
						logger.info("item10="+item10);
						String item11 = (String) morphDynaBean1.get("item11");
						logger.info("item11="+item11);
						String item12 = (String) morphDynaBean1.get("item12");
						logger.info("item12="+item12);
						String item13 = (String) morphDynaBean1.get("item13");
						logger.info("item13="+item13);
						String item14 = (String) morphDynaBean1.get("item14");
						logger.info("item14="+item14);
						
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						pointData.setItem1(item9);
						pointData.setItem2(item10);
						pointData.setItem3(item11);
						pointData.setItem4(item12);
						pointData.setItem5(item13);
						pointData.setItem6(item14);
						
						if (type == 1) {
							
							pointDatas1.add(pointData);
						}else if (type == 2) {
							
							pointDatas2.add(pointData);
						}else if (type == 3) {
							
							pointDatas3.add(pointData);
						}else if (type == 4) {
							
							pointDatas4.add(pointData);
						}else{
							dataMap.put("dj",(String) morphDynaBean.get("item1"));//机头偏转角度
							
							pointDatas5.add(pointData);
						}
					}
					
					//判断objects.length长度，因为如果小于2的话就替换空
					if (objects.length > 2) {
						a = JSONObject.fromObject(objects[objects.length-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						if (type == 1) {
							
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v12"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else if (type == 2) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v22"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else if (type == 3) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v32"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else if (type == 4) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v42"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else{
							dataMap.put("dj",(String) morphDynaBean.get("item1"));//机头偏转角度
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v52"+j,(String) morphDynaBean1.get("item"+j));
							}
						}
					}else{
						if (type == 1) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v12"+j,"");
							}
						}else if (type == 2) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v22"+j,"");
							}
						}else if (type == 3) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v32"+j,"");
							}
						}else if (type == 4) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v42"+j,"");
							}
						}else{
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v52"+j,"");
							}
						}
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas1",pointDatas1);//数据1
			dataMap.put("pointDatas2",pointDatas2);//数据2
			dataMap.put("pointDatas3",pointDatas3);//数据3
			dataMap.put("pointDatas4",pointDatas4);//数据4
			dataMap.put("pointDatas5",pointDatas5);//数据5
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/391.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为392的原始数据表
	 * @return
	 */
	public String upload_392_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_392_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("sourcesSpecies",task.getSourcesSpecies());//治疗源核数种类
		    dataMap.put("sourcesVender",task.getSourcesVender());//治疗源生产厂家
		    dataMap.put("sourcesActivity",task.getSourcesActivity());//治疗源当前总活度
		    dataMap.put("checkComputerRoom",task.getCheckComputerRoom());//受检机房名称
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("type="+type);
				
				if (type == 0) {
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 9; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v0"+j+k+"="+item);
							
							dataMap.put("v0"+j+k,item);
						}
					}
				}else if (type == 1) {
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v1"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 9; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v1"+j+k+"="+item);
							
							dataMap.put("v1"+j+k,item);
						}
					}
				}else if (type == 2) {
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v2"+j,item);
					}
				}else if (type == 3) {
					for (int j = 1; j <= 1; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v3"+j,item);
					}
					
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 5; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v3"+j+k+"="+item);
							
							dataMap.put("v3"+j+k,item);
						}
					}
				}else if (type == 4) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 8; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v4"+j+k+"="+item);
							
							dataMap.put("v4"+j+k,item);
						}
					}
				}else if (type == 5) {
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v5"+j,item);
					}
					
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v5"+j+k+"="+item);
							
							dataMap.put("v5"+j+k,item);
						}
					}
				}
			}
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/392.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为393的原始数据表
	 * @return
	 */
	public String upload_393_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_393_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("sourcesSpecies",task.getSourcesSpecies());//治疗源核数种类
		    dataMap.put("sourcesVender",task.getSourcesVender());//治疗源生产厂家
		    dataMap.put("sourcesActivity",task.getSourcesActivity());//治疗源当前总活度
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("up",task.getUpstairs());//治疗机房楼上
		    dataMap.put("down",task.getDownstairs());//治疗机房楼下
		    dataMap.put("note",task.getNote());//备注
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是治疗状态下测点,2是非治疗状态下测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("item9="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("b_range",item6+" ~ "+item7);//范围
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else if (type == 1) {
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas1.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("b_range"," ~ ");//范围
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
						pointDatas1.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//治疗状态下数据
			dataMap.put("pointDatas1",pointDatas1);//非治疗状态下数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/393.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为394的原始数据表
	 * @return
	 */
	public String upload_394_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_394_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("sourcesSpecies",task.getSourcesSpecies());//治疗源核数种类
		    dataMap.put("sourcesVender",task.getSourcesVender());//治疗源生产厂家
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("type="+type);
				
				if (type == 0) {
					for (int j = 1; j <= 1; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 10; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v0"+j+k+"="+item);
							
							dataMap.put("v0"+j+k,item);
						}
					}
				}else if (type == 1) {
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v1"+j,item);
					}
					
				}else if (type == 2) {
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v2"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v2"+j+k+"="+item);
							
							dataMap.put("v2"+j+k,item);
						}
					}
					
				}else if (type == 3) {
					for (int j = 1; j <= 1; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v3"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 3; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v3"+j+k+"="+item);
							
							dataMap.put("v3"+j+k,item);
						}
					}
				}else if (type == 4) {
					for (int j = 1; j <= 1; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v4"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("value");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 3; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v4"+j+k+"="+item);
							
							dataMap.put("v4"+j+k,item);
						}
					}
				}else if (type == 5) {
					for (int j = 1; j <= 2; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v5"+j,item);
					}
				}
			}
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/394.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为395的原始数据表
	 * @return
	 */
	public String upload_395_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_395_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("sourcesSpecies",task.getSourcesSpecies());//治疗源核数种类
		    dataMap.put("sourcesVender",task.getSourcesVender());//治疗源生产厂家
		    dataMap.put("sourcesActivity",task.getSourcesActivity());//治疗源当前总活度
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("load",task.getSourcesLoading());//治疗源装源活度
		    dataMap.put("activityTime",task.getActivityTime());//活度刻度时间
		    dataMap.put("num",task.getSourcesNuclideNum());//治疗源装源活度
		    dataMap.put("note",task.getNote());//备注
		    dataMap.put("activityResponse",task.getActivityResponse());//表面活度响应
		    dataMap.put("testingWay",task.getTestingWay());//检测方式
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    dataMap.put("device",taskDevices.get(0).getDevice().getDeviceName()+"/"+taskDevices.get(0).getDevice().getDeviceModel()+"/"+taskDevices.get(0).getDevice().getDeviceNum());//仪器
		    
		    
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String item10 = (String) morphDynaBean1.get("item10");
					logger.info("item10="+item10);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 0) {
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("b_docv",item6);//报告值
						dataMap.put("b_avg",item7);//平均值
						dataMap.put("b_bzc",item8);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setV4(item6);
						pointData.setV5(item7);
						pointData.setAvg(item8);
						pointData.setDocv(item9);
						pointData.setBzc(item10);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("b_docv","");//报告值
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setV4("");
						pointData.setV5("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/395.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	
	
	/**
	 * 生成编号为396的原始数据表
	 * @return
	 */
	public String upload_396_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_396_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("sourcesSpecies",task.getSourcesSpecies());//治疗源核数种类
		    dataMap.put("sourcesVender",task.getSourcesVender());//治疗源生产厂家
		    dataMap.put("sourcesActivity",task.getSourcesActivity());//治疗源当前总活度
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("up",task.getUpstairs());//治疗机房楼上
		    dataMap.put("down",task.getDownstairs());//治疗机房楼下
		    dataMap.put("load",task.getSourcesLoading());//治疗源装源活度
		    dataMap.put("activityTime",task.getActivityTime());//活度刻度时间
		    dataMap.put("num",task.getSourcesNuclideNum());//治疗源装源活度
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	 device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("item9="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("b_range",item6+" ~ "+item7);//范围
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("b_range"," ~ ");//范围
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/396.ftl",paths);

			// 输出文档路径及名称
		    outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		    logger.info("文档路径及名称="+outFile);
		     
		   //这样你就能得到你想要的xml
		   //这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
		    WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为398的原始数据表
	 * @return
	 */
	public String upload_398_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_398_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("dev",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("dev1",task.getDeviceFactor1());//检测仪器校准因子1
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nom",task.getNominalCapacity());//额定容量
		    dataMap.put("nom1",task.getNominalCapacity1());//额定容量1
		    dataMap.put("con",task.getConditions());//检测条件
		    dataMap.put("con1",task.getConditions1());//检测条件1
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("up",task.getUpstairs());//机房上方
		    dataMap.put("down",task.getDownstairs());//机房下方
		    dataMap.put("note",task.getNote());//备注
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas3 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas4 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas5 = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是0°测点,2是90°测点,3是180°测点,4是270°测点,5是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				if (type == 0) {
					for (int j = 0; j < objects.length; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item2 = (String) morphDynaBean1.get("item2");
						logger.info("item2="+item2);
						String item3 = (String) morphDynaBean1.get("item3");
						logger.info("item3="+item3);
						String item4 = (String) morphDynaBean1.get("item4");
						logger.info("item4="+item4);
						String item5 = (String) morphDynaBean1.get("item5");
						logger.info("item5="+item5);
						String item6 = (String) morphDynaBean1.get("item6");
						logger.info("item6="+item6);
						String item7 = (String) morphDynaBean1.get("item7");
						logger.info("item7="+item7);
						String item8 = (String) morphDynaBean1.get("item8");
						logger.info("item8="+item8);
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("item9="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}
				}else{
					//判断大于1就-1循环，不然就正常循环
					int as = 0;
					if (objects.length > 1) {
						as = objects.length-1;
					}else{
						as = objects.length;
					}
					for (int j = 0; j < as; j++) {
						a = JSONObject.fromObject(objects[j]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						String item2 = (String) morphDynaBean1.get("item2");
						logger.info("item2="+item2);
						String item3 = (String) morphDynaBean1.get("item3");
						logger.info("item3="+item3);
						String item4 = (String) morphDynaBean1.get("item4");
						logger.info("item4="+item4);
						String item5 = (String) morphDynaBean1.get("item5");
						logger.info("item5="+item5);
						String item6 = (String) morphDynaBean1.get("item6");
						logger.info("item6="+item6);
						String item7 = (String) morphDynaBean1.get("item7");
						logger.info("item7="+item7);
						String item8 = (String) morphDynaBean1.get("item8");
						logger.info("item8="+item8);
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("item9="+item9);
						String item10 = (String) morphDynaBean1.get("item10");
						logger.info("item10="+item10);
						String item11 = (String) morphDynaBean1.get("item11");
						logger.info("item11="+item11);
						String item12 = (String) morphDynaBean1.get("item12");
						logger.info("item12="+item12);
						String item13 = (String) morphDynaBean1.get("item13");
						logger.info("item13="+item13);
						String item14 = (String) morphDynaBean1.get("item14");
						logger.info("item14="+item14);
						pieces = (String) morphDynaBean1.get("pieces");
						logger.info("单位="+pieces);
						
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						pointData.setItem1(item9);
						pointData.setItem2(item10);
						pointData.setItem3(item11);
						pointData.setItem4(item12);
						pointData.setItem5(item13);
						pointData.setItem6(item14);
						if (type == 1) {
							dataMap.put("x",(String) morphDynaBean.get("item1"));//X射线检测结果
							dataMap.put("z",(String) morphDynaBean.get("item2"));//中子检测结果
							dataMap.put("x1",(String) morphDynaBean.get("item3"));//X射线照射野1
							dataMap.put("x2",(String) morphDynaBean.get("item4"));//X射线照射野2
							dataMap.put("z1",(String) morphDynaBean.get("item5"));//中子照射野1
							dataMap.put("z2",(String) morphDynaBean.get("item6"));//中子照射野2
							
							pointDatas1.add(pointData);
						}else if (type == 2) {
							
							pointDatas2.add(pointData);
						}else if (type == 3) {
							
							pointDatas3.add(pointData);
						}else if (type == 4) {
							
							pointDatas4.add(pointData);
						}else{
							dataMap.put("dj",(String) morphDynaBean.get("item1"));//大机架偏转角度
							dataMap.put("xj",(String) morphDynaBean.get("item2"));//小机头偏转角度
							
							pointDatas5.add(pointData);
						}
					}
					
					//判断objects.length长度，因为如果小于1的话就替换空
					if (objects.length > 1) {
						a = JSONObject.fromObject(objects[objects.length-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						if (type == 1) {
							dataMap.put("x",(String) morphDynaBean.get("item1"));//X射线检测结果
							dataMap.put("z",(String) morphDynaBean.get("item2"));//中子检测结果
							dataMap.put("x1",(String) morphDynaBean.get("item3"));//X射线照射野1
							dataMap.put("x2",(String) morphDynaBean.get("item4"));//X射线照射野2
							dataMap.put("z1",(String) morphDynaBean.get("item5"));//中子照射野1
							dataMap.put("z2",(String) morphDynaBean.get("item6"));//中子照射野2
							
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v1"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else if (type == 2) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v2"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else if (type == 3) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v3"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else if (type == 4) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v4"+j,(String) morphDynaBean1.get("item"+j));
							}
						}else{
							dataMap.put("dj",(String) morphDynaBean.get("item1"));//大机架偏转角度
							dataMap.put("xj",(String) morphDynaBean.get("item2"));//小机头偏转角度
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v5"+j,(String) morphDynaBean1.get("item"+j));
							}
						}
					}else{
						if (type == 1) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v1"+j,"");
							}
						}else if (type == 2) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v2"+j,"");
							}
						}else if (type == 3) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v3"+j,"");
							}
						}else if (type == 4) {
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v4"+j,"");
							}
						}else{
							for (int j = 1; j <= 14; j++) {
								dataMap.put("v5"+j,"");
							}
						}
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						pointData.setItem1("");
						pointData.setItem2("");
						pointData.setItem3("");
						pointData.setItem4("");
						pointData.setItem5("");
						pointData.setItem6("");
						
						pointDatas1.add(pointData);
						pointDatas2.add(pointData);
						pointDatas3.add(pointData);
						pointDatas4.add(pointData);
						pointDatas5.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas1",pointDatas1);//数据1
			dataMap.put("pointDatas2",pointDatas2);//数据2
			dataMap.put("pointDatas3",pointDatas3);//数据3
			dataMap.put("pointDatas4",pointDatas4);//数据4
			dataMap.put("pointDatas5",pointDatas5);//数据5
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/398.ftl",paths);

			// 输出文档路径及名称
		    outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		    logger.info("文档路径及名称="+outFile);
		    
		  //这样你就能得到你想要的xml
		   	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
		    WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为399的原始数据表
	 * @return
	 */
	public String upload_399_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_399_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("exposureDeviceModel",task.getExposureDeviceModel());//辐照装置分类
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("note",task.getNote());//备注
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    String pieces = "";
		    String pieces1 = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String item10 = (String) morphDynaBean1.get("item10");
					logger.info("item10="+item10);
					String item11 = (String) morphDynaBean1.get("item11");
					logger.info("item11="+item11);
					String item12 = (String) morphDynaBean1.get("item12");
					logger.info("item12="+item12);
					String item13 = (String) morphDynaBean1.get("item13");
					logger.info("item13="+item13);
					String item14 = (String) morphDynaBean1.get("item14");
					logger.info("item14="+item14);
					
					if (type == 0) {
						pieces = (String) morphDynaBean1.get("pieces");
						logger.info("单位="+pieces);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						pieces1 = (String) morphDynaBean1.get("pieces");
						logger.info("单位1="+pieces1);
						
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						pointData.setItem1(item9);
						pointData.setItem2(item10);
						pointData.setItem3(item11);
						pointData.setItem4(item12);
						pointData.setItem5(item13);
						pointData.setItem6(item14);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						pointData.setItem1("");
						pointData.setItem2("");
						pointData.setItem3("");
						pointData.setItem4("");
						pointData.setItem5("");
						pointData.setItem6("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pieces1",pieces1);//单位1
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/399.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
		
	/**
	 * 生成编号为400的原始数据表
	 * @return
	 */
	public String upload_400_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_400_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("note",task.getNote());//备注
		    dataMap.put("activityResponse",task.getActivityResponse());//表面活度响应
		    dataMap.put("testingWay",task.getTestingWay());//检测方式
		    dataMap.put("nuclideName",task.getNuclideName());//辐照核素名称
		    dataMap.put("maxActivity",task.getMaxActivity());//最大装填活度
		    dataMap.put("exposureDeviceModel",task.getExposureDeviceModel());//辐照装置类型
		    dataMap.put("source",task.getSource());//贮源放射
		    dataMap.put("nuclideVender",task.getNuclideVender());//核数生产厂家
		    dataMap.put("currentActivity",task.getCurrentActivity());//当前装源活度
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    dataMap.put("device",taskDevices.get(0).getDevice().getDeviceName()+"/"+taskDevices.get(0).getDevice().getDeviceModel()+"/"+taskDevices.get(0).getDevice().getDeviceNum());//仪器
		    
		    
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					String item9 = (String) morphDynaBean1.get("item9");
					logger.info("item9="+item9);
					String item10 = (String) morphDynaBean1.get("item10");
					logger.info("item10="+item10);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 0) {
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("b_docv",item6);//报告值
						dataMap.put("b_avg",item7);//平均值
						dataMap.put("b_bzc",item8);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setV4(item6);
						pointData.setV5(item7);
						pointData.setAvg(item8);
						pointData.setDocv(item9);
						pointData.setBzc(item10);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("b_docv","");//报告值
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setV4("");
						pointData.setV5("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
//			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/400.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为401的原始数据表
	 * @return
	 */
	public String upload_401_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_401_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("standard",task.getStandard());//检测依据
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("exposureDeviceModel",task.getExposureDeviceModel());//辐照装置类型
		    dataMap.put("source",task.getSource());//贮源放射
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    dataMap.put("nucideVener",task.getNuclideVender());//核素生产厂家
		    dataMap.put("maxActivity",task.getMaxActivity());//最大装填活度
		    dataMap.put("currentActivity",task.getCurrentActivity());//当前装填活度
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("pres",task.getPressure());//气压
		    dataMap.put("note",task.getNote());//备注
		    
		  //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		  //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = Integer.parseInt((String) morphDynaBean.get("type"));
				logger.info("0是本底测点，1是测点="+type);
				
				//获取数据
				JSONArray jsonArray = a.getJSONArray("value");
				Object[] objects = jsonArray.toArray();
				logger.info("数据数量="+objects.length);
				
				for (int j = 0; j < objects.length; j++) {
					a = JSONObject.fromObject(objects[j]);
					bean = JSONObject.toBean(a);
					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
					String item1 = (String) morphDynaBean1.get("item1");
					logger.info("item1="+item1);
					String item2 = (String) morphDynaBean1.get("item2");
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean1.get("item3");
					logger.info("item3="+item3);
					String item4 = (String) morphDynaBean1.get("item4");
					logger.info("item4="+item4);
					String item5 = (String) morphDynaBean1.get("item5");
					logger.info("item5="+item5);
					String item6 = (String) morphDynaBean1.get("item6");
					logger.info("item6="+item6);
					String item7 = (String) morphDynaBean1.get("item7");
					logger.info("item7="+item7);
					String item8 = (String) morphDynaBean1.get("item8");
					logger.info("item8="+item8);
					pieces = (String) morphDynaBean1.get("pieces");
					logger.info("单位="+pieces);
					
					if (type == 0) {
						String item9 = (String) morphDynaBean1.get("item9");
						logger.info("标准差="+item9);
						
						dataMap.put("b_v1",item1);
						dataMap.put("b_v2",item2);
						dataMap.put("b_v3",item3);
						dataMap.put("b_v4",item4);
						dataMap.put("b_v5",item5);
						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
						dataMap.put("b_avg",item8);//平均值
						dataMap.put("b_bzc",item9);//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP(item1);
						pointData.setDepict(item2);
						pointData.setV1(item3);
						pointData.setV2(item4);
						pointData.setV3(item5);
						pointData.setAvg(item6);
						pointData.setDocv(item7);
						pointData.setBzc(item8);
						
						pointDatas.add(pointData);
					}
				}
				
				//补空值
				if (objects.length == 0) {
					if (type == 0) {
						dataMap.put("b_v1","");
						dataMap.put("b_v2","");
						dataMap.put("b_v3","");
						dataMap.put("b_v4","");
						dataMap.put("b_v5","");
						dataMap.put("range","~");//范围（最小值+最大值）
						dataMap.put("b_avg","");//平均值
						dataMap.put("b_bzc","");//标准差
					}else{
						ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
						pointData.setP("");
						pointData.setDepict("");
						pointData.setV1("");
						pointData.setV2("");
						pointData.setV3("");
						pointData.setAvg("");
						pointData.setDocv("");
						pointData.setBzc("");
						
						pointDatas.add(pointData);
					}
				}
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("pointDatas",pointDatas);//数据
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				dataMap.put("record",getImageStr(pas+white));
			}else{
				//检测人签名照
				dataMap.put("record", getImageStr(pas+task.getRecordUrl()));
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				dataMap.put("check", getImageStr(pas+task.getCheckUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/401.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		     
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}
	
	/**
	 * 生成编号为418的原始数据表
	 * @return
	 */
	public String upload_418_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_418_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额  定  容  量
		    dataMap.put("timeDeixis",task.getTimeDeixis());//曝光时间指示
		    dataMap.put("aceSize",task.getAceSize());//AEC电离室数量
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("xRayNum",task.getxRayNum());//X射线管编号
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("standard",standard);//检测依据
		    
		    String monitorType = task.getMonitorType();
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    String deviceName = "";
		    String deviceNum = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	
		    	//获取仪器名字和编号
		    	deviceName += "    "+taskDevices.get(i).getDevice().getDeviceModel()+"型"+taskDevices.get(i).getDevice().getDeviceName();
		    	deviceNum += "         "+taskDevices.get(i).getDevice().getDeviceNum();
			}
		    dataMap.put("deviceName",deviceName);//检测仪器名字
		    dataMap.put("deviceNum",deviceNum);//检测仪器编号
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是曝光参数选择,1是管电压指示的偏离 ，2是输出量重复，3是有用线束半值层" +
						"4是曝光时间指示的偏离，5是有用线束垂直度偏离，6是光野与照射野四边的偏离，7是暗噪声，" +
						"8是探测器剂量指示，9是信号传递特性（STP），10是响应均匀性，11是测距误差，12是残影，13是伪影，" +
						"14是极限空间分辨力，15是低对比度细节检测，16是AEC灵敏度，17是AEC电离室之间一致性，18是AEC管电压变化一致性="+type);
				
				//0是曝光参数选择
				if (type == 0) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("item1="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("item2="+item2);
					int item3 = Integer.parseInt((String) morphDynaBean.get("item3"));
					logger.info("item3="+item3);
					int item4 = Integer.parseInt((String) morphDynaBean.get("item4"));
					logger.info("item4="+item4);
					
					if (item1.equals("是")) {
						dataMap.put("v01","☑是   ☒否");
					}else if (item1.equals("否")) {
						dataMap.put("v01","☒是   ☑否");
					}else{
						dataMap.put("v01","☒是   ☒否");
					}
					if (item2 == 0) {
						dataMap.put("v02","☒");
					}else{
						dataMap.put("v02","☑");
					}
					if (item3 == 0) {
						dataMap.put("v03","☒");
					}else{
						dataMap.put("v03","☑");
					}
					if (item4 == 0) {
						dataMap.put("v04","☒");
					}else{
						dataMap.put("v04","☑");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item11 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v0"+j+"1="+item11);
						
						if (item11 == 0) {
							dataMap.put("v0"+j+"1","☒");
						}else{
							dataMap.put("v0"+j+"1","☑");
						}
						
						for (int k = 3; k <= 5; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v0"+j+(k-1)+"="+item);
							
							dataMap.put("v0"+j+(k-1),item);
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							for (int l = 1; l <= 6; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("v0"+j+k+l+"="+item);
								
								dataMap.put("v0"+j+k+l,item);
							}
						}
					}
					
					//1是管电压指示的偏离 
				}else if (type == 1) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item11 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v1"+j+"1="+item11);
						
						if (item11 == 0) {
							dataMap.put("v1"+j+"1","☒");
						}else{
							dataMap.put("v1"+j+"1","☑");
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 7; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("v1"+j+k+l+"="+item);
								
								if ((item.equals("") || item.equals("/")) && item11 != 0) {
									dataMap.put("v1"+j+k+l,"—");
								}else{
									dataMap.put("v1"+j+k+l,item);
								}
							}
						}
					}
					
					//2是输出量重复
				}else if (type == 2) {
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v2"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 6; k++) {
							String item =(String) morphDynaBean1.get("item"+k);
							logger.info("v2"+j+k+"="+item);
							
							dataMap.put("v2"+j+k,item);
						}
					}
					
					//3是有用线束半值层
				}else if (type == 3) {
					for (int j = 1; j <= 2; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v3"+j,item);
					}
					
					//4是曝光时间指示的偏离
				}else if (type == 4) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p4","☒曝光时间指示的偏离-"+yy);
					}else{
						dataMap.put("p4","☑曝光时间指示的偏离");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 7; k++) {
							String item =(String) morphDynaBean1.get("item"+k);
							logger.info("v4"+j+k+"="+item);
							
							if ((item.equals("") || item.equals("/")) && project != 0) {
								dataMap.put("v4"+j+k,"—");
							}else{
								dataMap.put("v4"+j+k,item);
							}
						}
					}
					
					//5是有用线束垂直度偏离
				}else if (type == 5) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("item1="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("item2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("item3="+item3);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (item3.indexOf("<") != -1) {
						item3 = "＜";
					}else if (item3.indexOf(">") != -1) {
						item3 = "＞";
					}
					dataMap.put("v53",item3);
					
					if (project == 0) {
						dataMap.put("p5","☒有用线束垂直度偏离-"+yy);
					}else{
						dataMap.put("p5","☑有用线束垂直度偏离");
					}
					if (item1 == 0) {
						dataMap.put("v51","☒");
					}else{
						dataMap.put("v51","☑");
					}
					if (item2 == 0) {
						dataMap.put("v52","☒");
					}else{
						dataMap.put("v52","☑");
					}
					
					//6是光野与照射野四边的偏离
				}else if (type == 6) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p6","☒光野与照射野四边的偏离-"+yy);
					}else{
						dataMap.put("p6","☑光野与照射野四边的偏离");
					}
					
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						
						dataMap.put("v6"+j,item);
					}
					
					//7是暗噪声
				}else if (type == 7) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p7","☒暗噪声-"+yy);
					}else{
						dataMap.put("p7","☑暗噪声");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						int item2 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v7"+j+"1="+item2);
						String item3 = (String) morphDynaBean1.get("item3");
						logger.info("v7"+j+"2="+item3);
						int item4 = Integer.parseInt((String) morphDynaBean1.get("item4"));
						logger.info("v7"+j+"3="+item4);
						int item5 = Integer.parseInt((String) morphDynaBean1.get("item5"));
						logger.info("v7"+j+"4="+item5);
						
						dataMap.put("v7"+j+"2",item3);
						
						if (item2 == 0) {
							dataMap.put("v7"+j+"1","☒");
						}else{
							dataMap.put("v7"+j+"1","☑");
						}
						if (item4 == 0) {
							dataMap.put("v7"+j+"3","☒");
						}else{
							dataMap.put("v7"+j+"3","☑");
						}
						if (item5 == 0) {
							dataMap.put("v7"+j+"4","☒");
						}else{
							dataMap.put("v7"+j+"4","☑");
						}
						if (item1.indexOf("验收检测") != -1) {
							int item6 = Integer.parseInt((String) morphDynaBean1.get("item6"));
							logger.info("v7"+j+"5="+item6);
							String item7 = (String) morphDynaBean1.get("item7");
							logger.info("v7"+j+"6="+item7);
							int item8 = Integer.parseInt((String) morphDynaBean1.get("item8"));
							logger.info("v7"+j+"7="+item8);
							String item9 = (String) morphDynaBean1.get("item9");
							logger.info("v7"+j+"8="+item9);
							String item10 = (String) morphDynaBean1.get("item10");
							logger.info("v7"+j+"9="+item10);
							String item11 = (String) morphDynaBean1.get("item11");
							logger.info("v7"+j+"10="+item11);
							String item12 = (String) morphDynaBean1.get("item12");
							logger.info("v7"+j+"11="+item12);
							
							dataMap.put("v7"+j+"6",item7);
							dataMap.put("v7"+j+"11",item12);
							
							if (item6 == 0) {
								dataMap.put("v7"+j+"5","☒");
							}else{
								dataMap.put("v7"+j+"5","☑");
							}
							if (item8 == 0) {
								dataMap.put("v7"+j+"7","☒");
							}else{
								dataMap.put("v7"+j+"7","☑");
							}
							if (item9.equals("是")) {
								dataMap.put("v7"+j+"8","☑是   ☒否");
							}else if (item9.equals("否")) {
								dataMap.put("v7"+j+"8","☒是   ☑否");
							}else{
								dataMap.put("v7"+j+"8","☒是   ☒否");
							}
							if (item10.equals("是")) {
								dataMap.put("v7"+j+"9","☑是   ☒否");
							}else if (item10.equals("否")) {
								dataMap.put("v7"+j+"9","☒是   ☑否");
							}else{
								dataMap.put("v7"+j+"9","☒是   ☒否");
							}
							if (item11.equals("是")) {
								dataMap.put("v7"+j+"10","☑是   ☒否");
							}else if (item11.equals("否")) {
								dataMap.put("v7"+j+"10","☒是   ☑否");
							}else{
								dataMap.put("v7"+j+"10","☒是   ☒否");
							}
						}else{
							String item6 = (String) morphDynaBean1.get("item6");
							logger.info("v7"+j+"5="+item6);
							int item7 = Integer.parseInt((String) morphDynaBean1.get("item7"));
							logger.info("v7"+j+"6="+item7);
							String item8 = (String) morphDynaBean1.get("item8");
							logger.info("v7"+j+"7="+item8);
							int item9 = Integer.parseInt((String) morphDynaBean1.get("item9"));
							logger.info("v7"+j+"8="+item9);
							String item10 = (String) morphDynaBean1.get("item10");
							logger.info("v7"+j+"9="+item10);
							String item11 = (String) morphDynaBean1.get("item11");
							logger.info("v7"+j+"10="+item11);
							String item12 = (String) morphDynaBean1.get("item12");
							logger.info("v7"+j+"11="+item12);
							
							dataMap.put("v7"+j+"5",item6);
							dataMap.put("v7"+j+"7",item8);
							
							if (item7 == 0) {
								dataMap.put("v7"+j+"6","☒");
							}else{
								dataMap.put("v7"+j+"6","☑");
							}
							if (item9 == 0) {
								dataMap.put("v7"+j+"8","☒");
							}else{
								dataMap.put("v7"+j+"8","☑");
							}
							if (item10.equals("是")) {
								dataMap.put("v7"+j+"9","☑是   ☒否");
							}else if (item10.equals("否")) {
								dataMap.put("v7"+j+"9","☒是   ☑否");
							}else{
								dataMap.put("v7"+j+"9","☒是   ☒否");
							}
							if (item11.equals("是")) {
								dataMap.put("v7"+j+"10","☑是   ☒否");
							}else if (item11.equals("否")) {
								dataMap.put("v7"+j+"10","☒是   ☑否");
							}else{
								dataMap.put("v7"+j+"10","☒是   ☒否");
							}
							if (item12.equals("是")) {
								dataMap.put("v7"+j+"11","☑是   ☒否");
							}else if (item12.equals("否")) {
								dataMap.put("v7"+j+"11","☒是   ☑否");
							}else{
								dataMap.put("v7"+j+"11","☒是   ☒否");
							}
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 6; l++) {
								String item = (String) morphDynaBean11.get("item"+(l+1));
								logger.info("s7"+j+k+l+"="+item);
								
								dataMap.put("s7"+j+k+l,item);
							}
						}
					}
					
					//8是探测器剂量指示
				}else if (type == 8) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p8","☒探测器剂量指示-"+yy);
					}else{
						dataMap.put("p8","☑探测器剂量指示");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						String item1 = (String) morphDynaBean1.get("item1");
						logger.info("item1="+item1);
						int item2 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v8"+j+"1="+item2);
						String item3 = (String) morphDynaBean1.get("item3");
						logger.info("v8"+j+"2="+item3);
						String item4 = (String) morphDynaBean1.get("item4");
						logger.info("v8"+j+"3="+item4);
						String item5 = (String) morphDynaBean1.get("item5");
						logger.info("v8"+j+"4="+item5);
						int item6 = Integer.parseInt((String) morphDynaBean1.get("item6"));
						logger.info("v8"+j+"5="+item6);
						String item7 = (String) morphDynaBean1.get("item7");
						logger.info("v8"+j+"6="+item7);
						int item8 = Integer.parseInt((String) morphDynaBean1.get("item8"));
						logger.info("v8"+j+"7="+item8);
						int item9 = Integer.parseInt((String) morphDynaBean1.get("item9"));
						logger.info("v8"+j+"8="+item9);
						int item10 = Integer.parseInt((String) morphDynaBean1.get("item10"));
						logger.info("v8"+j+"9="+item10);
						
						dataMap.put("v8"+j+"2",item3);
						dataMap.put("v8"+j+"3",item4);
						dataMap.put("v8"+j+"4",item5);
						dataMap.put("v8"+j+"6",item7);
						
						if (item1.indexOf("验收检测") != -1) {
							String item11 = (String) morphDynaBean1.get("item11");
							logger.info("v8"+j+"10="+item11);
							
							dataMap.put("v8"+j+"10",item11);
						}
						
						if (item2 == 0) {
							dataMap.put("v8"+j+"1","☒");
						}else{
							dataMap.put("v8"+j+"1","☑");
						}
						if (item6 == 0) {
							dataMap.put("v8"+j+"5","☒");
						}else{
							dataMap.put("v8"+j+"5","☑");
						}
						if (item8 == 0) {
							dataMap.put("v8"+j+"7","☒");
						}else{
							dataMap.put("v8"+j+"7","☑");
						}
						if (item9 == 0) {
							dataMap.put("v8"+j+"8","☒");
						}else{
							dataMap.put("v8"+j+"8","☑");
						}
						if (item10 == 0) {
							dataMap.put("v8"+j+"9","☒");
						}else{
							dataMap.put("v8"+j+"9","☑");
						}
						
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 7; l++) {
								String item = (String) morphDynaBean11.get("item"+(l+1));
								logger.info("v8"+j+k+l+"="+item);
								
								dataMap.put("v8"+j+k+l,item);
							}
						}
					}
					
					//9是信号传递特性（STP）
				}else if (type == 9) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p9","☒信号传递特性（STP）-"+yy);
					}else{
						dataMap.put("p9","☑信号传递特性（STP）");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v9"+j+"1="+item1);
						String item2 = (String) morphDynaBean1.get("item3");
						logger.info("v9"+j+"2="+item2);
						String item3 = (String) morphDynaBean1.get("item4");
						logger.info("v9"+j+"3="+item3);
						String item4 = (String) morphDynaBean1.get("item5");
						logger.info("v9"+j+"4="+item4);
						String item5 = (String) morphDynaBean1.get("item6");
						logger.info("v9"+j+"5="+item5);
						String item6 = (String) morphDynaBean1.get("item7");
						logger.info("v9"+j+"6="+item6);
						
						
						dataMap.put("v9"+j+"2",item2);
						dataMap.put("v9"+j+"3",item3);
						dataMap.put("v9"+j+"4",item4);
						dataMap.put("v9"+j+"5",item5);
						dataMap.put("v9"+j+"6",item6);
						
						if (item1 == 0) {
							dataMap.put("v9"+j+"1","☒");
						}else{
							dataMap.put("v9"+j+"1","☑");
						}
						
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 6; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("v9"+j+k+l+"="+item);
								
								dataMap.put("v9"+j+k+l,item);
							}
						}
					}
					
					//10是响应均匀性
				}else if (type == 10) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p10","☒响应均匀性-"+yy);
					}else{
						dataMap.put("p10","☑响应均匀性");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("s10"+j+"1="+item1);
						String item2 = (String) morphDynaBean1.get("item3");
						logger.info("s10"+j+"2="+item2);
						String item3 = (String) morphDynaBean1.get("item4");
						logger.info("s10"+j+"3="+item3);
						String item4 = (String) morphDynaBean1.get("item5");
						logger.info("s10"+j+"4="+item4);
						String item5 = (String) morphDynaBean1.get("item6");
						logger.info("s10"+j+"5="+item5);
						
						dataMap.put("s10"+j+"2",item2);
						dataMap.put("s10"+j+"3",item3);
						dataMap.put("s10"+j+"4",item4);
						dataMap.put("s10"+j+"5",item5);
						
						if (item1 == 0) {
							dataMap.put("s10"+j+"1","☒");
						}else{
							dataMap.put("s10"+j+"1","☑");
						}
						
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 6; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("s10"+j+k+(l+1)+"="+item);
								
								dataMap.put("s10"+j+k+(l+1),item);
							}
						}
					}
					
					//11是测距误差
				}else if (type == 11) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p11","☒测距误差-"+yy);
					}else{
						dataMap.put("p11","☑测距误差");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("s11"+j+"1="+item1);
						String item2 = (String) morphDynaBean1.get("item3");
						logger.info("s11"+j+"2="+item2);
						String item3 = (String) morphDynaBean1.get("item4");
						logger.info("s11"+j+"3="+item3);
						String item4 = (String) morphDynaBean1.get("item5");
						logger.info("s11"+j+"4="+item4);
						
						dataMap.put("s11"+j+"2",item2);
						dataMap.put("s11"+j+"3",item3);
						dataMap.put("s11"+j+"4",item4);
						
						if (item1 == 0) {
							dataMap.put("s11"+j+"1","☒");
						}else{
							dataMap.put("s11"+j+"1","☑");
						}
						
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 7; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("s11"+j+k+l+"="+item);
								
								dataMap.put("s11"+j+k+l,item);
							}
						}
					}
					
					//12是残影
				}else if (type == 12) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p12","☒残影-"+yy);
					}else{
						dataMap.put("p12","☑残影");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("s12"+j+"1="+item1);
						String item2 = (String) morphDynaBean1.get("item3");
						logger.info("s12"+j+"2="+item2);
						
						if (item1 == 0) {
							dataMap.put("s12"+j+"1","☒");
						}else{
							dataMap.put("s12"+j+"1","☑");
						}
						if (item2.equals("是")) {
							dataMap.put("s12"+j+"2","☑是   ☒否");
						}else if (item2.equals("否")) {
							dataMap.put("s12"+j+"2","☒是   ☑否");
						}else{
							dataMap.put("s12"+j+"2","☒是   ☒否");
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 4; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("s12"+j+k+(l+1)+"="+item);
								
								dataMap.put("s12"+j+k+(l+1),item);
							}
						}
					}
					
					//13是伪影
				}else if (type == 13) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p13","☒伪影-"+yy);
					}else{
						dataMap.put("p13","☑伪影");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("s13"+j+"1="+item1);
						String item2 = (String) morphDynaBean1.get("item3");
						logger.info("s13"+j+"2="+item2);
						String item3 = (String) morphDynaBean1.get("item4");
						logger.info("s13"+j+"3="+item3);
						
						if (item1 == 0) {
							dataMap.put("s13"+j+"1","☒");
						}else{
							dataMap.put("s13"+j+"1","☑");
						}
						if (item2.equals("是")) {
							dataMap.put("s13"+j+"2","☑是   ☒否");
						}else if (item2.equals("否")) {
							dataMap.put("s13"+j+"2","☒是   ☑否");
						}else{
							dataMap.put("s13"+j+"2","☒是   ☒否");
						}
						if (item3.equals("是")) {
							dataMap.put("s13"+j+"3","☑是   ☒否");
						}else if (item3.equals("否")) {
							dataMap.put("s13"+j+"3","☒是   ☑否");
						}else{
							dataMap.put("s13"+j+"3","☒是   ☒否");
						}
					}
					
					//14是极限空间分辨力
				}else if (type == 14) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p14","☒极限空间分辨力-"+yy);
					}else{
						dataMap.put("p14","☑极限空间分辨力");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("s14"+j+"1="+item1);
						
						if (item1 == 0) {
							dataMap.put("s14"+j+"1","☒");
						}else{
							dataMap.put("s14"+j+"1","☑");
						}
						
						for (int k = 3; k <= 9; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("s14"+j+(k-1)+"="+item);
							
							dataMap.put("s14"+j+(k-1),item);
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 2; l <= 6; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("s14"+j+k+l+"="+item);
								
								dataMap.put("s14"+j+k+l,item);
							}
						}
					}
					
					//15是低对比度细节检测
				}else if (type == 15) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p15","☒低对比度细节检测-"+yy);
					}else{
						dataMap.put("p15","☑低对比度细节检测");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("s15"+j+"1="+item1);
						int item2 = Integer.parseInt((String) morphDynaBean1.get("item3"));
						logger.info("s15"+j+"2="+item2);
						int item3 = Integer.parseInt((String) morphDynaBean1.get("item4"));
						logger.info("s15"+j+"3="+item3);
						
						if (item1 == 0) {
							dataMap.put("s15"+j+"1","☒");
						}else{
							dataMap.put("s15"+j+"1","☑");
						}
						if (item2 == 0) {
							dataMap.put("s15"+j+"2","☒");
						}else{
							dataMap.put("s15"+j+"2","☑");
						}
						if (item3 == 0) {
							dataMap.put("s15"+j+"3","☒");
						}else{
							dataMap.put("s15"+j+"3","☑");
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 4; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("s15"+j+k+l+"="+item);
								
								dataMap.put("s15"+j+k+l,item);
							}
						}
					}
					
					//16是AEC灵敏度
				}else if (type == 16) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p16","☒AEC灵敏度-"+yy);
					}else{
						dataMap.put("p16","☑AEC灵敏度");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("s16"+j+"1="+item1);
						String item2 = (String) morphDynaBean1.get("item3");
						logger.info("s16"+j+"2="+item2);
						int item3 = Integer.parseInt((String) morphDynaBean1.get("item4"));
						logger.info("s16"+j+"3="+item3);
						int item4 = Integer.parseInt((String) morphDynaBean1.get("item5"));
						logger.info("s16"+j+"4="+item4);
						String item6 = (String) morphDynaBean1.get("item6");
						logger.info("s16"+j+"5="+item6);
						String item7 = (String) morphDynaBean1.get("item7");
						logger.info("s16"+j+"6="+item7);
						
						dataMap.put("s16"+j+"2",item2);
						dataMap.put("s16"+j+"5",item6);
						
						if (item1 == 0) {
							dataMap.put("s16"+j+"1","☒");
						}else{
							dataMap.put("s16"+j+"1","☑");
						}
						if (item3 == 0) {
							dataMap.put("s16"+j+"3","☒");
						}else{
							dataMap.put("s16"+j+"3","☑");
						}
						if (item4 == 0) {
							dataMap.put("s16"+j+"4","☒");
						}else{
							dataMap.put("s16"+j+"4","☑");
						}
						if (item7.equals("是")) {
							dataMap.put("s16"+j+"6","☑是 ☒否");
						}else if (item7.equals("否")) {
							dataMap.put("s16"+j+"6","☒是 ☑否");
						}else{
							dataMap.put("s16"+j+"6","☒是 ☒否");
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 7; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("s16"+j+k+l+"="+item);
								
								dataMap.put("s16"+j+k+l,item);
							}
						}
					}
					
					//17是AEC电离室之间一致性
				}else if (type == 17) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p17","☒AEC电离室之间一致性-"+yy);
					}else{
						dataMap.put("p17","☑AEC电离室之间一致性");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("s17"+j+"1="+item1);
						String item2 = (String) morphDynaBean1.get("item3");
						logger.info("s17"+j+"2="+item2);
						int item3 = Integer.parseInt((String) morphDynaBean1.get("item4"));
						logger.info("s17"+j+"3="+item3);
						int item4 = Integer.parseInt((String) morphDynaBean1.get("item5"));
						logger.info("s17"+j+"4="+item4);
						String item5 = (String) morphDynaBean1.get("item6");
						logger.info("s17"+j+"5="+item5);
						String item6 = (String) morphDynaBean1.get("item7");
						logger.info("s17"+j+"6="+item6);
						String item7 = (String) morphDynaBean1.get("item8");
						logger.info("s17"+j+"7="+item7);
						
						dataMap.put("s17"+j+"2",item2);
						dataMap.put("s17"+j+"5",item5);
						dataMap.put("s17"+j+"7",item7);
						
						if (item1 == 0) {
							dataMap.put("s17"+j+"1","☒");
						}else{
							dataMap.put("s17"+j+"1","☑");
						}
						if (item3 == 0) {
							dataMap.put("s17"+j+"3","☒");
						}else{
							dataMap.put("s17"+j+"3","☑");
						}
						if (item4 == 0) {
							dataMap.put("s17"+j+"4","☒");
						}else{
							dataMap.put("s17"+j+"4","☑");
						}
						if (item6.equals("是")) {
							dataMap.put("s17"+j+"6","☑是 ☒否");
						}else if (item6.equals("否")) {
							dataMap.put("s17"+j+"6","☒是 ☑否");
						}else{
							dataMap.put("s17"+j+"6","☒是 ☒否");
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 8; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("s17"+j+k+l+"="+item);
								
								dataMap.put("s17"+j+k+l,item);
							}
						}
					}
					
					//18是AEC管电压变化一致性
				}else if (type == 18) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p18","☒AEC管电压变化一致性-"+yy);
					}else{
						dataMap.put("p18","☑AEC管电压变化一致性");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("s18"+j+"1="+item1);
						int item2 = Integer.parseInt((String) morphDynaBean1.get("item3"));
						logger.info("s18"+j+"2="+item2);
						int item3 = Integer.parseInt((String) morphDynaBean1.get("item4"));
						logger.info("s18"+j+"3="+item3);
						String item4 = (String) morphDynaBean1.get("item5");
						logger.info("s18"+j+"4="+item4);
						String item5 = (String) morphDynaBean1.get("item6");
						logger.info("s18"+j+"5="+item5);
						int item6 = Integer.parseInt((String) morphDynaBean1.get("item7"));
						logger.info("s18"+j+"6="+item6);
						String item7 = (String) morphDynaBean1.get("item8");
						logger.info("s18"+j+"7="+item7);
						int item8 = Integer.parseInt((String) morphDynaBean1.get("item9"));
						logger.info("s18"+j+"8="+item8);
						
						dataMap.put("s18"+j+"4",item4);
						dataMap.put("s18"+j+"7",item7);
						
						if (item1 == 0) {
							dataMap.put("s18"+j+"1","☒");
						}else{
							dataMap.put("s18"+j+"1","☑");
						}
						if (item2 == 0) {
							dataMap.put("s18"+j+"2","☒");
						}else{
							dataMap.put("s18"+j+"2","☑");
						}
						if (item3 == 0) {
							dataMap.put("s18"+j+"3","☒");
						}else{
							dataMap.put("s18"+j+"3","☑");
						}
						if (item5.equals("是")) {
							dataMap.put("s18"+j+"5","☑是 ☒否");
						}else if (item5.equals("否")) {
							dataMap.put("s18"+j+"5","☒是 ☑否");
						}else{
							dataMap.put("s18"+j+"5","☒是 ☒否");
						}
						if (item6 == 0) {
							dataMap.put("s18"+j+"6","☒");
						}else{
							dataMap.put("s18"+j+"6","☑");
						}
						if (item8 == 0) {
							dataMap.put("s18"+j+"8","☒");
						}else{
							dataMap.put("s18"+j+"8","☑");
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 8; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("s18"+j+k+l+"="+item);
								
								dataMap.put("s18"+j+k+l,item);
							}
						}
					}
				}
			}
		    
		    /*
		    ////模拟数据
		    //0
		    dataMap.put("v01","□");
		    dataMap.put("v02","□");
		    dataMap.put("v03","■");
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("v0"+i+"1","■");
				for (int j = 2; j <= 4; j++) {
					dataMap.put("v0"+i+j,"0"+i+j);
				}
				
				for (int j = 1; j <= 2; j++) {
					for (int k = 1; k <= 6; k++) {
						dataMap.put("v0"+i+j+k,"0"+i+j+k);
					}
				}
			}
		    //1
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("v1"+i+"1","■");
		    	
		    	for (int j = 1; j <= 5; j++) {
					for (int k = 1; k <= 7; k++) {
						dataMap.put("v1"+i+j+k,"1"+i+j+k);
					}
				}
			}
		    //2
		    for (int i = 1; i <= 6; i++) {
		    	dataMap.put("v2"+i,"2"+i);
		    	dataMap.put("v21"+i,"21"+i);
			}
		    //3
		    dataMap.put("v31","31");
		    dataMap.put("v32","32");
		    //4
		    dataMap.put("p4","■");
		    for (int i = 1; i <= 4; i++) {
				for (int j = 1; j <= 7; j++) {
					dataMap.put("v4"+i+j,"4"+i+j);
				}
			}
		    //5
		    dataMap.put("p5","■");
		    dataMap.put("v51","■");
		    dataMap.put("v52","■");
		    dataMap.put("v53","53");
		    //6
		    dataMap.put("p6","■");
		    for (int i = 1; i <= 4; i++) {
		    	dataMap.put("v6"+i,"6"+i);
			}
		    //7
		    dataMap.put("p7","■");
		    for (int i = 1; i <= 2; i++) {
		    	for (int j = 1; j <= 7; j++) {
		    		dataMap.put("v7"+i+j,"■");
				}
				dataMap.put("v7"+i+"7","■是   □否");
				dataMap.put("v7"+i+"8","■是   □否");
				dataMap.put("v7"+i+"5","7"+i+"5");
				dataMap.put("v7"+i+"9","7"+i+"9");
				
				for (int j = 1; j <= 6; j++) {
					dataMap.put("v7"+i+"1"+j,"7"+i+"1"+j);
				}
			}
		    for (int i = 3; i <= 4; i++) {
		    	for (int j = 1; j <= 7; j++) {
		    		dataMap.put("v7"+i+j,"■");
				}
				dataMap.put("v7"+i+"9","■是   □否");
				dataMap.put("v7"+i+"8","■是   □否");
				dataMap.put("v7"+i+"5","7"+i+"5");
				
				for (int j = 1; j <= 6; j++) {
					dataMap.put("v7"+i+"1"+j,"7"+i+"1"+j);
				}
			}
		    //8
		    dataMap.put("p8","■");
		    for (int i = 1; i <= 4; i++) {
		    	dataMap.put("v8"+i+"2","8"+i+"2");
				dataMap.put("v8"+i+"3","8"+i+"3");
				dataMap.put("v8"+i+"4","8"+i+"4");
				dataMap.put("v8"+i+"6","8"+i+"6");
				dataMap.put("v8"+i+"10","8"+i+"10");
				dataMap.put("v8"+i+"1","■");
				dataMap.put("v8"+i+"5","■");
				dataMap.put("v8"+i+"7","■");
				dataMap.put("v8"+i+"8","■");
				dataMap.put("v8"+i+"9","■");
				
				for (int j = 1; j <= 7; j++) {
					dataMap.put("v8"+i+"1"+j,"8"+i+"1"+j);
				}
			}
		    //9
		    dataMap.put("p9","■");
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("v9"+i+"2","9"+i+"2");
				dataMap.put("v9"+i+"3","9"+i+"3");
				dataMap.put("v9"+i+"4","9"+i+"4");
				dataMap.put("v9"+i+"5","9"+i+"5");
				dataMap.put("v9"+i+"6","9"+i+"6");
				dataMap.put("v9"+i+"1","■");
				
				for (int j = 1; j <= 2; j++) {
					for (int l = 1; l <= 6; l++) {
						dataMap.put("v9"+i+j+l,"9"+i+j+l);
					}
				}
			}
		    //10
		    dataMap.put("p10","■");
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("s10"+i+"2","10"+i+"2");
				dataMap.put("s10"+i+"3","10"+i+"3");
				dataMap.put("s10"+i+"4","10"+i+"4");
				dataMap.put("s10"+i+"5","10"+i+"5");
				dataMap.put("s10"+i+"1","■");
				
				for (int l = 1; l <= 6; l++) {
					dataMap.put("s10"+i+"1"+l,"10"+i+"1"+l);
				}
			}
		    //11
		    dataMap.put("p11","■");
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("s11"+i+"2","11"+i+"2");
				dataMap.put("s11"+i+"3","11"+i+"3");
				dataMap.put("s11"+i+"4","11"+i+"4");
				dataMap.put("s11"+i+"1","■");
				
				for (int j = 1; j <= 2; j++) {
					for (int l = 1; l <= 7; l++) {
						dataMap.put("s11"+i+j+l,"11"+i+j+l);
					}
				}
			}
		    //12
		    dataMap.put("p12","■");
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("s12"+i+"1","■");
			    dataMap.put("s12"+i+"2","■是   □否");
			    
			    for (int j = 1; j <= 4; j++) {
			    	dataMap.put("s12"+i+"1"+j,"12"+i+"1"+j);
				}
			}
		    //13
		    dataMap.put("p13","■");
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("s13"+i+"1","■");
		    	dataMap.put("s13"+i+"2","■是   □否");
		    	dataMap.put("s13"+i+"3","■是   □否");
			}
			//14
		    dataMap.put("p14","■");
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("s14"+i+"1","■");
		    	for (int k = 2; k <= 8; k++) {
					dataMap.put("s14"+i+k,"14"+i+k);
				}
		    	
		    	for (int j = 1; j <= 2; j++) {
		    		for (int l = 1; l <= 6; l++) {
						dataMap.put("s14"+i+j+l,"14"+i+j+l);
					}
				}
			}
		    //15
		    dataMap.put("p15","■");
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("s15"+i+"1","■");
		    	dataMap.put("s15"+i+"2","■");
		    	dataMap.put("s15"+i+"3","■");
		    	
		    	for (int j = 1; j <= 4; j++) {
		    		for (int l = 1; l <= 4; l++) {
						dataMap.put("s15"+i+j+l,"15"+i+j+l);
					}
				}
			}
		    //16
		    dataMap.put("p16","■");
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("s16"+i+"2","16"+i+"2");
		    	dataMap.put("s16"+i+"1","■");
		    	dataMap.put("s16"+i+"3","■");
		    	dataMap.put("s16"+i+"4","■");
		    	
		    	for (int l = 1; l <= 7; l++) {
					dataMap.put("s16"+i+"1"+l,"16"+i+"1"+l);
				}
		    }
		    //17
		    dataMap.put("p17","■");
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("s17"+i+"2","17"+i+"2");
				dataMap.put("s17"+i+"5","17"+i+"5");
				dataMap.put("s17"+i+"1","■");
				dataMap.put("s17"+i+"3","■");
				dataMap.put("s17"+i+"4","■");
				
				for (int l = 1; l <= 8; l++) {
					dataMap.put("s17"+i+"1"+l,"17"+i+"1"+l);
				}
		    }
		    //18
			dataMap.put("p18","■");
		    for (int i = 1; i <= 2; i++) {
		    	dataMap.put("s18"+i+"5","18"+i+"5");
		    	dataMap.put("s18"+i+"1","■");
		    	dataMap.put("s18"+i+"2","■");
		    	dataMap.put("s18"+i+"3","■");
		    	dataMap.put("s18"+i+"4","■");
		    	dataMap.put("s18"+i+"6","■");
		    	
		    	for (int l = 1; l <= 8; l++) {
					dataMap.put("s18"+i+"1"+l,"18"+i+"1"+l);
				}
		    }*/
		    
			System.out.println("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/418.ftl",paths);

			// 输出文档路径及名称
			File outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
	    	File outFile1 = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile1);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile1, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为419的原始数据表
	 * @return
	 */
	public String upload_419_docx_old(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_419_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额  定  容  量
		    dataMap.put("timeDeixis",task.getTimeDeixis());//曝光时间指示
		    dataMap.put("exposure",task.getExposureControl());//自照曝光控制
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("xRayNum",task.getxRayNum());//X射线管编号
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("standard",standard);//检测依据
		    
		  //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是管电压指示的偏离,1是输出量重复性CV输出量线性L ，2是有用线束半值层，3是曝光时间指示的偏离" +
						"4是自动曝光控制响应，5是自动曝光控制重复性，6是有用线束垂直度偏离，7是光野与照射野四边的偏离，" +
						"8是光野与照射野中心的偏离，9是聚焦滤线栅与有用线束中心对准="+type);
				
				//0是管电压指示的偏离
				if (type == 0) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item2 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v0"+j+"1="+item2);
						
						if (item2 == 0) {
							dataMap.put("v0"+j+"1","□");
						}else{
							dataMap.put("v0"+j+"1","■");
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 7; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("v0"+j+k+l+"="+item);
								
								dataMap.put("v0"+j+k+l,item);
							}
						}
					}
					
					//1是输出量重复性CV输出量线性L 
				}else if (type == 1) {
					String item2 = (String) morphDynaBean.get("item1");
					logger.info("cv="+item2);
					String item3 = (String) morphDynaBean.get("item2");
					logger.info("L12="+item3);
					
					dataMap.put("v11",item2);
					dataMap.put("v12",item3);
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						for (int k = 1; k <= 5; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v1"+j+k+"="+item);
							
							dataMap.put("v1"+j+k,item);
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							for (int l = 1; l <= 6; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("v1"+j+k+l+"="+item);
								
								dataMap.put("v1"+j+k+l,item);
							}
						}
					}
					
					//2是有用线束半值层
				}else if (type == 2) {
					String item2 = (String) morphDynaBean.get("item1");
					logger.info("管电压="+item2);
					String item3 = (String) morphDynaBean.get("item2");
					logger.info("HVL="+item3);
					
					dataMap.put("v21",item2);
					dataMap.put("v22",item3);
					
					//3是曝光时间指示的偏离
				}else if (type == 3) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					if (project == 0) {
						dataMap.put("p3","□");
					}else{
						dataMap.put("p3","■");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v3"+j+k+"="+item);
							
							dataMap.put("v3"+j+k,item);
						}
					}
					
					//4是自动曝光控制响应
				}else if (type == 4) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("空气比释动能法="+item2);
					String item3 = (String) morphDynaBean.get("item2");
					logger.info("空气比释动能法 测量值单位="+item3);
					int item4 = Integer.parseInt((String) morphDynaBean.get("item3"));
					logger.info("光密度法="+item4);
					String item5 = (String) morphDynaBean.get("item4");
					logger.info("光密度法 测量值单位="+item5);
					int item6 = Integer.parseInt((String) morphDynaBean.get("item5"));
					logger.info("自动="+item6);
					int item7 = Integer.parseInt((String) morphDynaBean.get("item6"));
					logger.info("人工选择管电压="+item7);
					String item8 = (String) morphDynaBean.get("item7");
					logger.info("管电压1="+item8);
					String item9 = (String) morphDynaBean.get("item8");
					logger.info("管电压2="+item9);
					String item10 = (String) morphDynaBean.get("item9");
					logger.info("管电压3="+item10);
					String item11 = (String) morphDynaBean.get("item10");
					logger.info("变化率="+item11);
					String item12 = (String) morphDynaBean.get("item11");
					logger.info("与平均值最大偏差="+item12);
					
					dataMap.put("v42",item3);
					dataMap.put("v44",item5);
					dataMap.put("v47",item8);
					dataMap.put("v48",item9);
					dataMap.put("v49",item10);
					dataMap.put("v410",item11);
					dataMap.put("v411",item12);
					
					if (project == 0) {
						dataMap.put("p4","□");
					}else{
						dataMap.put("p4","■");
					}
					if (item2 == 0) {
						dataMap.put("v41","□");
					}else{
						dataMap.put("v41","■");
					}
					if (item4 == 0) {
						dataMap.put("v43","□");
					}else{
						dataMap.put("v43","■");
					}
					if (item6 == 0) {
						dataMap.put("v45","□");
					}else{
						dataMap.put("v45","■");
					}
					if (item7 == 0) {
						dataMap.put("v46","□");
					}else{
						dataMap.put("v46","■");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						for (int k = 1; k <= 5; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("s4"+j+k+"="+item);
							
							dataMap.put("s4"+j+k,item);
						}
					}
					
					//5是自动曝光控制重复性
				}else if (type == 5) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					if (project == 0) {
						dataMap.put("p5","□");
					}else{
						dataMap.put("p5","■");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("item1="+item1);
						String item2 = (String) morphDynaBean1.get("item3");
						logger.info("item2"+item2);
						
						if (item1 == 0) {
							dataMap.put("v5"+j+"1","□");
						}else{
							dataMap.put("v5"+j+"1","■");
						}
						dataMap.put("v5"+j+"2",item2);
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							for (int l = 1; l <= 8; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("v5"+j+k+l+"="+item);
								
								dataMap.put("v5"+j+k+l,item);
							}
						}
					}
					
					//6是有用线束垂直度偏离
				}else if (type == 6) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("钢珠影像落在大圆内="+item2);
					int item3 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("钢珠影像落在大圆外="+item3);
					String item4 = (String) morphDynaBean.get("item3");
					logger.info("3°="+item4);
					
					if (item4.indexOf("<") != -1) {
						item4 = "〈";
					}else if (item4.indexOf(">") != -1) {
						item4 = "〉";
					}
					dataMap.put("v63",item4);
					
					if (project == 0) {
						dataMap.put("p6","□");
					}else{
						dataMap.put("p6","■");
					}
					if (item2 == 0) {
						dataMap.put("v61","□");
					}else{
						dataMap.put("v61","■");
					}
					if (item3 == 0) {
						dataMap.put("v62","□");
					}else{
						dataMap.put("v62","■");
					}
					
					//7是光野与照射野四边的偏离
				}else if (type == 7) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					if (project == 0) {
						dataMap.put("p7","□");
					}else{
						dataMap.put("p7","■");
					}
					
					for (int l = 1; l <= 4; l++) {
						String item = (String) morphDynaBean.get("item"+l);
						logger.info("v7"+l+"="+item);
						
						dataMap.put("v7"+l,item);
					}
					
					//8是光野与照射野中心的偏离
				}else if (type == 8) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String item2 = (String) morphDynaBean.get("item1");
					logger.info("光野中心与照射野中心的偏离="+item2);
					
					dataMap.put("v81",item2);
					
					if (project == 0) {
						dataMap.put("p8","□");
					}else{
						dataMap.put("p8","■");
					}
					
					//9是聚焦滤线栅与有用线束中心对准
				}else if (type == 9) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String item2 = (String) morphDynaBean.get("item1");
					logger.info("是否有聚焦滤线栅="+item2);
					String item3 = (String) morphDynaBean.get("item2");
					logger.info("是否为聚焦滤线栅="+item3);
					String item4 = (String) morphDynaBean.get("item3");
					logger.info("球管是否可以在垂直于床中心线的方向前后移动="+item4);
					String item10 = (String) morphDynaBean.get("item9");
					logger.info("是否中心点密度最高="+item10);
					String item11 = (String) morphDynaBean.get("item10");
					logger.info("是否各孔光密度对称="+item11);
					for (int j = 4; j <= 8; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v9"+j+"="+item);
						
						dataMap.put("v9"+j,item);
					}
					if (project == 0) {
						dataMap.put("p9","□");
					}else{
						dataMap.put("p9","■");
					}
					if (item2.equals("否")) {
						dataMap.put("v91","□是   ■否");
					}else if (item2.equals("是")) {
						dataMap.put("v91","■是  □否");
					}else{
						dataMap.put("v91","□是  □否");
					}
					if (item3.equals("否")) {
						dataMap.put("v92","□是   ■否");
					}else if (item3.equals("是")) {
						dataMap.put("v92","■是  □否");
					}else{
						dataMap.put("v92","□是  □否");
					}
					if (item4.equals("否")) {
						dataMap.put("v93","□是   ■否");
					}else if (item4.equals("是")) {
						dataMap.put("v93","■是  □否");
					}else{
						dataMap.put("v93","□是  □否");
					}
					if (item10.equals("否")) {
						dataMap.put("v99","□是   ■否");
					}else if (item10.equals("是")) {
						dataMap.put("v99","■是  □否");
					}else{
						dataMap.put("v99","□是  □否");
					}
					if (item11.equals("否")) {
						dataMap.put("v910","□是   ■否");
					}else if (item11.equals("是")) {
						dataMap.put("v910","■是  □否");
					}else{
						dataMap.put("v910","□是  □否");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						for (int k = 1; k <= 5; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v9"+j+k+"="+item);
							
							dataMap.put("v9"+j+k,item);
						}
					}
				}
			}
			/*
			//0
			for (int i = 1; i <= 2; i++) {
				dataMap.put("v0"+i+"1","■");
				
				for (int j = 1; j <= 5; j++) {
					for (int l = 1; l <= 7; l++) {
						dataMap.put("v0"+i+j+l,"0"+i+j+l);
					}
				}
			}
			//1
			dataMap.put("v11","11");
			dataMap.put("v12","12");
			
			for (int i = 1; i <= 2; i++) {
				for (int k = 1; k <= 5; k++) {
					dataMap.put("v1"+i+k,"1"+i+k);
				}
				
				for (int l = 1; l <= 6; l++) {
					dataMap.put("v1"+i+"1"+l,"1"+i+"1"+l);
				}
			}
			//2
			dataMap.put("v21","21");
			dataMap.put("v22","22");
			//3
			dataMap.put("p3","■");
			for (int i = 1; i <= 4; i++) {
				for (int k = 1; k <= 6; k++) {
					dataMap.put("v3"+i+k,"3"+i+k);
				}
			}
			//4
			dataMap.put("p4","■");
			dataMap.put("v41","■");
			dataMap.put("v42","43");
			dataMap.put("v43","■");
			dataMap.put("v44","45");
			dataMap.put("v45","■");
			dataMap.put("v46","■");
			dataMap.put("v47","48");
			dataMap.put("v48","49");
			dataMap.put("v49","410");
			dataMap.put("v410","411");
			
			for (int i = 1; i <= 4; i++) {
				for (int k = 1; k <= 5; k++) {
					dataMap.put("s4"+i+k,"4"+i+k);
				}
			}
			//5
			dataMap.put("p5","■");
			
			for (int i = 1; i <= 2; i++) {
				dataMap.put("v5"+i+"1","■");
				dataMap.put("v5"+i+"2","5"+i+"2");
				
				for (int l = 1; l <= 6; l++) {
					dataMap.put("v5"+i+"1"+l,"5"+i+"1"+l);
				}
			}
			//6
			dataMap.put("v63","63");
			dataMap.put("p6","■");
			dataMap.put("v61","■");
			dataMap.put("v62","■");
			//7
			dataMap.put("p7","■");
			for (int l = 1; l <= 4; l++) {
				dataMap.put("v7"+l,"7"+l);
			}
			//8
			dataMap.put("v81","81");
			dataMap.put("p8","■");
			//9
			for (int j = 4; j <= 8; j++) {
				dataMap.put("v9"+j,"9"+j);
			}
			dataMap.put("p9","■");
			dataMap.put("v91","■是  □否");
			dataMap.put("v92","■是  □否");
			dataMap.put("v93","■是  □否");
			dataMap.put("v99","■是  □否");
			dataMap.put("v910","■是  □否");
			for (int k = 1; k <= 5; k++) {
				dataMap.put("v9"+"1"+k,"9"+"1"+k);
			}
			*/
			dataMap.put("device","");
			System.out.println("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/419.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		    outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		    logger.info("文档路径及名称="+outFile);
		    
		    WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		    wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    
		    logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		    File f2 = new File(path);
		    File s2[] = f2.listFiles();
		    for(int j=0;j<s2.length;j++) {
		    	String name=s2[j].getName();
		    	if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    	 s2[j].delete();
			    }
		    }
		    
		    //传docx地址转PDF
		    String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		    logger.info(cmd);
		    cmdRun(cmd);
		     
		    //获取web.xml配置的一个默认地址
		    String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		    //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		    url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+taskauth.getTemplate().getNum();
		    logger.info("返回下载地址="+url);
		     
		    logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为419的原始数据表
	 * @return
	 */
	public String upload_419_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_419_docx()函数");
		
		String url = "";
		try {      
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
		
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额  定  容  量
		    dataMap.put("timeDeixis",task.getTimeDeixis());//曝光时间指示
		    dataMap.put("exposure",task.getExposureControl());//自照曝光控制
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("xRayNum",task.getxRayNum());//X射线管编号
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("standard",standard);//检测依据
		    
		  //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是管电压指示的偏离,1是输出量重复性CV输出量线性L ，2是有用线束半值层，3是曝光时间指示的偏离" +
						"4是自动曝光控制响应，5是自动曝光控制重复性，6是有用线束垂直度偏离，7是光野与照射野四边的偏离，" +
						"8是光野与照射野中心的偏离，9是聚焦滤线栅与有用线束中心对准="+type);
				
				//0是管电压指示的偏离
				if (type == 0) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item2 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v0"+j+"1="+item2);
						
						if (item2 == 0) {
							dataMap.put("v0"+j+"1","□");
						}else{
							dataMap.put("v0"+j+"1","■");
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 7; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("v0"+j+k+l+"="+item);
								
								dataMap.put("v0"+j+k+l,item);
							}
						}
					}
					
					//1是输出量重复性CV输出量线性L 
				}else if (type == 1) {
					String item2 = (String) morphDynaBean.get("item1");
					logger.info("cv="+item2);
					String item3 = (String) morphDynaBean.get("item2");
					logger.info("L12="+item3);
					
					dataMap.put("v11",item2);
					dataMap.put("v12",item3);
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						for (int k = 1; k <= 5; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v1"+j+k+"="+item);
							
							dataMap.put("v1"+j+k,item);
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							for (int l = 1; l <= 6; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("v1"+j+k+l+"="+item);
								
								dataMap.put("v1"+j+k+l,item);
							}
						}
					}
					
					//2是有用线束半值层
				}else if (type == 2) {
					String item2 = (String) morphDynaBean.get("item1");
					logger.info("管电压="+item2);
					String item3 = (String) morphDynaBean.get("item2");
					logger.info("HVL="+item3);
					
					dataMap.put("v21",item2);
					dataMap.put("v22",item3);
					
					//3是曝光时间指示的偏离
				}else if (type == 3) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason="";
					if (a.containsKey("reason")) {
						 reason = (String) morphDynaBean.get("reason");

					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy=0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p3","□曝光时间指示的偏离-"+yy);
					}else{
						dataMap.put("p3","■曝光时间指示的偏离");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v3"+j+k+"="+item);
							
							dataMap.put("v3"+j+k,item);
						}
					}
					 //怎么回事
					//4是自动曝光控制响应
				}else if (type == 4) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason="";
					if (a.containsKey("reason")) {
						reason =(String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);   
					int item2 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("空气比释动能法="+item2);
					String item3 = (String) morphDynaBean.get("item2");
					logger.info("空气比释动能法 测量值单位="+item3);
					int item4 = Integer.parseInt((String) morphDynaBean.get("item3"));
					logger.info("光密度法="+item4);
					String item5 = (String) morphDynaBean.get("item4");
					logger.info("光密度法 测量值单位="+item5);
					int item6 = Integer.parseInt((String) morphDynaBean.get("item5"));
					logger.info("自动="+item6);
					int item7 = Integer.parseInt((String) morphDynaBean.get("item6"));
					logger.info("人工选择管电压="+item7);
					String item8 = (String) morphDynaBean.get("item7");
					logger.info("管电压1="+item8);
					String item9 = (String) morphDynaBean.get("item8");
					logger.info("管电压2="+item9);
					String item10 = (String) morphDynaBean.get("item9");
					logger.info("管电压3="+item10);
					String item11 = (String) morphDynaBean.get("item10");
					logger.info("变化率="+item11);
					String item12 = (String) morphDynaBean.get("item11");
					logger.info("与平均值最大偏差="+item12);
					
					dataMap.put("v42",item3);
					dataMap.put("v44",item5);
					dataMap.put("v47",item8);
					dataMap.put("v48",item9);
					dataMap.put("v49",item10);
					dataMap.put("v410",item11);
					dataMap.put("v411",item12);
					
					//原因判断
					int yy=0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p4","□自动曝光控制响应-"+yy);
					}else{
						dataMap.put("p4","■自动曝光控制响应");
					}
					if (item2 == 0) {
						dataMap.put("v41","□");
					}else{
						dataMap.put("v41","■");
					}
					if (item4 == 0) {
						dataMap.put("v43","□");
					}else{
						dataMap.put("v43","■");
					}
					if (item6 == 0) {
						dataMap.put("v45","□");
					}else{
						dataMap.put("v45","■");
					}
					if (item7 == 0) {
						dataMap.put("v46","□");
					}else{
						dataMap.put("v46","■");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						for (int k = 1; k <= 5; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("s4"+j+k+"="+item);
							
							dataMap.put("s4"+j+k,item);
						}
					}
					
					//5是自动曝光控制重复性
				}else if (type == 5) {
					int project = (Integer) morphDynaBean.get("project");
					String reason="";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					
					//原因判断
					int yy=0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{  
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p5","□自动曝光控制重复性-"+yy);
					}else{
						dataMap.put("p5","■自动曝光控制重复性");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item1 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("item1="+item1);
						String item2 = (String) morphDynaBean1.get("item3");
						logger.info("item2"+item2);
						
						
						
						if (item1 == 0) {
							dataMap.put("v5"+j+"1","□");
						}else{
							dataMap.put("v5"+j+"1","■");
						}
						dataMap.put("v5"+j+"2",item2);
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							for (int l = 1; l <= 8; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("v5"+j+k+l+"="+item);
								
								dataMap.put("v5"+j+k+l,item);
							}
						}
					}
					
					//6是有用线束垂直度偏离
				}else if (type == 6) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason="";
					if (a.containsKey("reason")) {
						reason =(String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因"+reason);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("钢珠影像落在大圆内="+item2);
					int item3 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("钢珠影像落在大圆外="+item3);
					String item4 = (String) morphDynaBean.get("item3");
					logger.info("3¡ã="+item4);
					
					if (item4.indexOf("<") != -1) {
						item4 = "〈";
					}else if (item4.indexOf(">") != -1) {
						item4 = "〉";
					}
					dataMap.put("v63",item4);
					
					//原因判断
					int yy=0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p6","□有用线束垂直度偏离-"+yy);
					}else{
						dataMap.put("p6","■有用线束垂直度偏离");
					}
					if (item2 == 0) {
						dataMap.put("v61","□");
					}else{
						dataMap.put("v61","■");
					}
					if (item3 == 0) {
						dataMap.put("v62","□");
					}else{
						dataMap.put("v62","■");
					}
					
					//7是光野与照射野四边的偏离
				}else if (type == 7) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason="";
					if (a.containsKey("reason")) {
						reason =(String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因"+reason);
					
					//原因判断
					int yy=0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p7","□光野与照射野四边的偏离-"+yy);
					}else{
						dataMap.put("p7","■光野与照射野四边的偏离");
					}
					
					for (int l = 1; l <= 4; l++) {
						String item = (String) morphDynaBean.get("item"+l);
						logger.info("v7"+l+"="+item);
						
						dataMap.put("v7"+l,item);
					}
					
					//8是光野与照射野中心的偏离
				}else if (type == 8) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason="";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					String item2 = (String) morphDynaBean.get("item1");
					logger.info("光野中心与照射野中心的偏离="+item2);
					
					dataMap.put("v81",item2);
					
					//原因判断
					int yy=0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p8","□光野与照射野中心的偏离-"+yy);
					}else{
						dataMap.put("p8","■光野与照射野中心的偏离");
					}
					
					//9是聚焦滤线栅与有用线束中心对准
				}else if (type == 9) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason="";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					String item2 = (String) morphDynaBean.get("item1");
					logger.info("是否有聚焦滤线栅="+item2);
					String item3 = (String) morphDynaBean.get("item2");
					logger.info("是否为聚焦滤线栅="+item3);
					String item4 = (String) morphDynaBean.get("item3");
					logger.info("球管是否可以在垂直于床中心线的方向前后移动="+item4);
					String item10 = (String) morphDynaBean.get("item9");
					logger.info("是否中心点密度最高="+item10);
					String item11 = (String) morphDynaBean.get("item10");
					logger.info("是否各孔光密度对称="+item11);
					for (int j = 4; j <= 8; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v9"+j+"="+item);
						
						dataMap.put("v9"+j,item);
					}
					
					//原因判断
					int yy=0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p9","□聚焦滤线栅与有用线束中心对准-"+yy);
					}else{
						dataMap.put("p9","■聚焦滤线栅与有用线束中心对准");
					}
					if (item2.equals("否")) {
						dataMap.put("v91","□是   ■否");
					}else if (item2.equals("是")) {
						dataMap.put("v91","■是  □否");
					}else{
						dataMap.put("v91","□是  □否");
					}
					if (item3.equals("否")) {
						dataMap.put("v92","□是   ■否");
					}else if (item3.equals("是")) {
						dataMap.put("v92","■是  □否");
					}else{
						dataMap.put("v92","□是  □否");
					}
					if (item4.equals("否")) {
						dataMap.put("v93","□是   ■否");
					}else if (item4.equals("是")) {
						dataMap.put("v93","■是  □否");
					}else{
						dataMap.put("v93","□是  □否");
					}
					if (item10.equals("否")) {
						dataMap.put("v99","□是   ■否");
					}else if (item10.equals("是")) {
						dataMap.put("v99","■是  □否");
					}else{
						dataMap.put("v99","□是  □否");
					}
					if (item11.equals("否")) {
						dataMap.put("v910","□是   ■否");
					}else if (item11.equals("是")) {
						dataMap.put("v910","■是  □否");
					}else{
						dataMap.put("v910","□是  □否");
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						for (int k = 1; k <= 5; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v9"+j+k+"="+item);
							
							dataMap.put("v9"+j+k,item);
						}
					}
				}
			}
			/*
			//0
			for (int i = 1; i <= 2; i++) {
				dataMap.put("v0"+i+"1","■");
				
				for (int j = 1; j <= 5; j++) {
					for (int l = 1; l <= 7; l++) {
						dataMap.put("v0"+i+j+l,"0"+i+j+l);
					}
				}
			}
			//1
			dataMap.put("v11","11");
			dataMap.put("v12","12");
			
			for (int i = 1; i <= 2; i++) {
				for (int k = 1; k <= 5; k++) {
					dataMap.put("v1"+i+k,"1"+i+k);
				}
				
				for (int l = 1; l <= 6; l++) {
					dataMap.put("v1"+i+"1"+l,"1"+i+"1"+l);
				}
			}
			//2
			dataMap.put("v21","21");
			dataMap.put("v22","22");
			//3
			dataMap.put("p3","■");
			for (int i = 1; i <= 4; i++) {
				for (int k = 1; k <= 6; k++) {
					dataMap.put("v3"+i+k,"3"+i+k);
				}
			}
			//4
			dataMap.put("p4","■");
			dataMap.put("v41","■");
			dataMap.put("v42","43");
			dataMap.put("v43","■");
			dataMap.put("v44","45");
			dataMap.put("v45","■");
			dataMap.put("v46","■");
			dataMap.put("v47","48");
			dataMap.put("v48","49");
			dataMap.put("v49","410");
			dataMap.put("v410","411");
			
			for (int i = 1; i <= 4; i++) {
				for (int k = 1; k <= 5; k++) {
					dataMap.put("s4"+i+k,"4"+i+k);
				}
			}
			//5
			dataMap.put("p5","■");
			
			for (int i = 1; i <= 2; i++) {
				dataMap.put("v5"+i+"1","■");
				dataMap.put("v5"+i+"2","5"+i+"2");
				
				for (int l = 1; l <= 6; l++) {
					dataMap.put("v5"+i+"1"+l,"5"+i+"1"+l);
				}
			}
			//6
			dataMap.put("v63","63");
			dataMap.put("p6","■");
			dataMap.put("v61","■");
			dataMap.put("v62","■");
			//7
			dataMap.put("p7","■");
			for (int l = 1; l <= 4; l++) {
				dataMap.put("v7"+l,"7"+l);
			}
			//8
			dataMap.put("v81","81");
			dataMap.put("p8","■");
			//9
			for (int j = 4; j <= 8; j++) {
				dataMap.put("v9"+j,"9"+j);
			}
			dataMap.put("p9","■");
			dataMap.put("v91","■是  □否");
			dataMap.put("v92","■是  □否");
			dataMap.put("v93","■是  □否");
			dataMap.put("v99","■是  □否");
			dataMap.put("v910","■是  □否");
			for (int k = 1; k <= 5; k++) {
				dataMap.put("v9"+"1"+k,"9"+"1"+k);
			}
			*/
			dataMap.put("device","");
			System.out.println("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/419.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		    outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		    logger.info("文档路径及名称="+outFile);
		    
		    WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		    wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    
		    logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		    File f2 = new File(path);
		    File s2[] = f2.listFiles();
		    for(int j=0;j<s2.length;j++) {
		    	String name=s2[j].getName();
		    	if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    	 s2[j].delete();
			    }
		    }
		    
		    //传docx地址转PDF
		    String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		    logger.info(cmd);
		    cmdRun(cmd);
		     
		    //获取web.xml配置的一个默认地址
		    String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		    //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		    url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		    logger.info("返回下载地址="+url);
		     
		    logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	
	/**
	 * 生成编号为421的原始数据表
	 * @return
	 */
	public String upload_421_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_421_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
				logger.info("检测依据1="+standard1);
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》 ")+1,standardObject[i].length());
				logger.info("检测依据="+standard);
			    }
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额  定  容  量
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("deviceType",task.getDeviceType());//设备类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("xRayNum",task.getxRayNum());//X射线管编号
		    dataMap.put("timeDeixis",task.getTimeDeixis());//有无时间指示
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
			dataMap.put("standard",standard);//检测依据
			
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("device",deviceDatas);//仪器
		    
		    
		    
//		    String deviceName = "";  
//		    String deviceNum = "";
//		    for (int i = 0; i < taskDevices.size(); i++) {
//		    	
//		    	//获取仪器名字和编号
//		    	deviceName += "    "+taskDevices.get(i).getDevice().getDeviceModel()+"型"+taskDevices.get(i).getDevice().getDeviceName();
//		    	deviceNum += "         "+taskDevices.get(i).getDevice().getDeviceNum();
//			}
//		    dataMap.put("deviceName",deviceName);//检测仪器名字
//		    dataMap.put("deviceNum",deviceNum);//检测仪器编号
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);  
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是管电压,1是管电压指示的偏离，2是输出量重复性（仅适用于口内机），3是加载时间偏离" +
						"4是曝光时间指示的偏离，5是有用线束半值层直接测量法，6是有用线束半值层铝片法，7是高对比分辨力"+
						"8是低对比分辨力，9是集光筒出口平面的最大几何尺寸（直径/对角线），10是过滤材料厚度，11是焦皮距="+type);
				
				//0是管电压
				if (type == 0) {
					int item11 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("item1="+item11);
					int item22 = Integer.parseInt((String) morphDynaBean.get("item3"));
					logger.info("item5="+item22);
					int item33 = Integer.parseInt((String) morphDynaBean.get("item6"));
					logger.info("item8="+item33);
					int item44 = Integer.parseInt((String) morphDynaBean.get("item8"));
					logger.info("item8="+item44);
					
					if (item11 == 1) {
						dataMap.put("p01","☑");
					}else{
						dataMap.put("p01","☒");
					}
					if (item22 == 1) {
						dataMap.put("p03","☑");
					}else{
						dataMap.put("p03","☒");
					}
					if (item33 == 1) {
						dataMap.put("p06","☑");
					}else{
						dataMap.put("p06","☒");
					}
					if (item44 == 1) {
						dataMap.put("p08","☑");
					}else{
						dataMap.put("p08","☒");
					}
					for (int j = 1; j <= 9; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v0"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					//1是管电压指示的偏离
				}else if (type == 1) {
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						for (int k = 1; k <= 6; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v1"+j+k+"="+item);
							dataMap.put("v1"+j+k,item);
							if (item.equals("口腔CT")) {
								dataMap.put("v21", "☑");
								dataMap.put("v22", "☒");
							}else if(item.equals("3D模式")){
								dataMap.put("v21", "☒");
								dataMap.put("v22", "☑");
							}else {
								dataMap.put("v21", "☒");
								dataMap.put("v22", "☒");
							}
						}
					}
					//2输出量重复性（仅用于口内机）
				}else if (type == 2) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p2","☒输出的重复性（仅用于口内机）-"+yy);//检测项目
					}else{
						dataMap.put("p2","☑输出的重复性（仅用于口内机）");//检测项目
					}
					
					for (int k = 1; k <= 4; k++) {
						String item = (String) morphDynaBean.get("item"+k);
						logger.info("item"+k+"="+item);
						dataMap.put("v3"+k, item);
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 6; k++) {
							String item =(String) morphDynaBean1.get("item"+k);
							logger.info("v3"+j+k+"="+item);
							
							dataMap.put("v3"+j+k,item);
						}
					}
					
					
					//3加载时间偏离
				}else if (type == 3) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p3","☒加载时间偏离 -"+yy);//检测项目
					}else{
						dataMap.put("p3","☑加载时间偏离");//检测项目
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v4"+j+k+"="+item);
							
							dataMap.put("v4"+j+k,item);
						}
					}
					
					//4曝光时间指示的偏离
				}else if (type == 4) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p4","☒曝光时间指示的偏离 -"+yy);//检测项目
					}else{
						dataMap.put("p4","☑曝光时间指示的偏离");//检测项目
					}
					
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						
						for (int k = 1; k <= 7; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v5"+j+k+"="+item);
							
							dataMap.put("v5"+j+k,item);
						}
					}
					
					//5有用线束半值层□直接测量法
				}else if (type == 5) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p5","有用线束半值层☒直接测量法 -"+yy);//检测项目
					}else{
						dataMap.put("p5","有用线束半值层☑直接测量法");//检测项目
					}
					
					for (int j = 1; j <= 21; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("item"+j+"="+item);
						dataMap.put("v6"+j,item);
						String item7 = (String) morphDynaBean.get("item7");
						if (item7.equals("口内机")) {
							dataMap.put("v67", "☑");
							dataMap.put("v623", "☒");
						}else if (item7.equals("口外机全景摄影")) {
							dataMap.put("v67", "☒");
							dataMap.put("v623", "☑");
						}else {
							dataMap.put("v67", "☒");
							dataMap.put("v623", "☒");
						}
						String item14 = (String) morphDynaBean.get("item14");
						if (item14.equals("口外机头颅摄影")) {
							dataMap.put("v614", "☑");
						}else {
							dataMap.put("v614", "☒");
						}
						String item21 = (String) morphDynaBean.get("item21");
						if (item21.equals("口腔CT")) {
							dataMap.put("v621", "☑");
							dataMap.put("v622", "☒");
						}else if (item21.equals("3D模式")) {
							dataMap.put("v621", "☒");
							dataMap.put("v622", "☑");
						}else {
							dataMap.put("v621", "☒");
							dataMap.put("v622", "☒");
						}
					}
					//6有用线束半值层□铝片法
				}else if (type == 6) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p6","有用线束半值层☒铝片法 -"+yy);//检测项目
					}else{
						dataMap.put("p6","有用线束半值层☑铝片法");//检测项目
					}
					//获取数据
					JSONArray jsonArray = a.getJSONArray("valueList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						for (int k = 1; k < 18; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v7"+k+"="+item);
							dataMap.put("v7"+k,item);
							if (item.equals("口内机") && k==17) {
								dataMap.put("v717", "☑");
								dataMap.put("v718", "☒");
							}else if(item.equals("口外机全景摄影")){
								dataMap.put("v717", "☒");
								dataMap.put("v718", "☑");
							}else {
								dataMap.put("v717", "☒");
								dataMap.put("v718", "☒");
							}
						}
						for (int k = 1; k < 18; k++) {
							String item = (String) morphDynaBean1.get("item"+k);
							logger.info("v7"+(k+20)+"="+item);
							dataMap.put("v7"+(k+20),item);
							if (item.equals("口外机头颅摄影") && k== 17) {
								dataMap.put("v737", "☑");
								dataMap.put("v738", "☒");
							}else if(item.equals("口腔CT")){
								dataMap.put("v737", "☒");
								dataMap.put("v738", "☑");
							}else {
								dataMap.put("v737", "☒");
								dataMap.put("v738", "☒"); 
							}
						}
					}
					//7高对比分辨力
				}else if (type == 7) {
//					int project = Integer.parseInt((String) morphDynaBean.get("project"));
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p7","☒高对比分辨力 -"+yy);//检测项目
					}else{
						dataMap.put("p7","☑高对比分辨力");//检测项目
					}
					for (int k = 1; k <= 7; k++) {
						String item = (String) morphDynaBean.get("item"+k);
						logger.info("item="+item);
						dataMap.put("v8"+k,item);
						if (item.equals("0") && k == 4) {
							dataMap.put("v84", "☑");
						}else {
							dataMap.put("v84", "☒");
						}
					}
					//8低对比分辨力
				}else if(type == 8){
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p8","☒低对比分辨力 -"+yy);//检测项目
					}else{
						dataMap.put("p8","☑低对比分辨力");//检测项目
					}
					for (int k = 1; k <= 7; k++) {
						String item = (String) morphDynaBean.get("item"+k);
						logger.info("item="+item);
						dataMap.put("v9"+k,item);
						if (item.equals("0") && k == 4) {
							dataMap.put("v94", "☑");
						}else {
								dataMap.put("v94", "☒");
						}
					}
					//9集光筒出口平面的最大几何尺寸（直径/对角线）
				}else if(type == 9){
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p9","☒集光筒出口平面的最大几何尺寸（直径/对角线）-"+yy);//检测项目
					}else{
						dataMap.put("p9","☑集光筒出口平面的最大几何尺寸（直径/对角线）");//检测项目
					}
					
					for (int j = 1; j <= 2; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v10"+j+"="+item);
						dataMap.put("v10"+j,item);
					}
					
					//10过滤材料厚度
				}else if (type == 10) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p10","☒过滤材料厚度"+yy);//检测项目
					}else{
						dataMap.put("p10","☑过滤材料厚度");//检测项目
					}
					
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("s11"+j+"="+item);
						
						dataMap.put("s11"+j,item);
					}
					
					//11焦皮距	
				}else if (type == 11) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					//判断检测项目
					if (project == 0) {
						dataMap.put("p11","☒焦皮距 -"+yy);//检测项目
					}else{
						dataMap.put("p11","☑焦皮距");//检测项目
					}
					
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("s12"+j+"="+item);
						
						dataMap.put("s12"+j,item);
					}
				}
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/421.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为422的原始数据表
	 * @return
	 */
	public String upload_422_docx_old(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_422_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额  定  容  量
		    dataMap.put("bright",task.getBrightnessControl());//有无自动亮度控制
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("xRayNum",task.getxRayNum());//X射线管编号
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("standard",standard);//检测依据
		    
		    if (task.getImageIntensifier().equals("平板探测器")) {
		    	dataMap.put("imageInt","平板探测器");//有无影像接收器
			}else if (task.getImageIntensifier().equals("影像增强器")) {
				dataMap.put("imageInt","影像增强器");//有无影像接收器
			}else{
				dataMap.put("imageInt","");//有无影像接收器
			}
		    if (task.getItem2().equals("直接透视")) {
		    	dataMap.put("purpose","直接透视（透视荧光屏设备）");//设备用途
			}else if (task.getItem2().equals("间接透视")) {
				dataMap.put("purpose","间接透视（影像接收器透视）");//设备用途
			}else{
				dataMap.put("purpose","");//设备用途
			}
			
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    String deviceName = "";
		    String deviceNum = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	
		    	//获取仪器名字和编号
		    	deviceName += "    "+taskDevices.get(i).getDevice().getDeviceModel()+"型"+taskDevices.get(i).getDevice().getDeviceName();
		    	deviceNum += "         "+taskDevices.get(i).getDevice().getDeviceNum();
			}
		    dataMap.put("deviceName",deviceName);//检测仪器名字
		    dataMap.put("deviceNum",deviceNum);//检测仪器编号
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是透视受检者入射体表空气比释动能率典型值，1是透视受检者入射体表空气比释动能率最大值，2是透视荧光屏的灵敏度" +
						"3是空间分辨力，4是低对比分辨力，5是影像接收器入射屏前空气比释动能率，6是自动亮度控制，" +
						"7是照射野与影像接收器中心偏差，8是最大照射野与普通荧光屏尺寸相同时的台屏距="+type);
				
				//0是透视受检者入射体表空气比释动能率典型值
				if (type == 0) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("I.I尺寸="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("自动控制="+item2);
					for (int j = 3; j <= 9; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v0"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					int item10 = Integer.parseInt((String) morphDynaBean.get("item10"));
					logger.info("透视荧光屏="+item10);
					int item11 = Integer.parseInt((String) morphDynaBean.get("item11"));
					logger.info("非透视荧光屏="+item11);
					
					dataMap.put("v01",item1+pieces);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p0","□透视受检者入射体表空气比释动能率典型值-"+yy);
					}else{
						dataMap.put("p0","■透视受检者入射体表空气比释动能率典型值");
					}
					if (item2 == 0) {
						dataMap.put("v02","□");
					}else{
						dataMap.put("v02","■");
					}
					if (item10 == 0) {
						dataMap.put("v010","□");
					}else{
						dataMap.put("v010","■");
					}
					if (item11 == 0) {
						dataMap.put("v011","□");
					}else{
						dataMap.put("v011","■");
					}
					
					//1是透视受检者入射体表空气比释动能率最大值
				}else if (type == 1) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("I.I尺寸="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("自动控制="+item2);
					for (int j = 3; j <= 9; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v1"+j+"="+item);
						
						dataMap.put("v1"+j,item);
					}
					
					dataMap.put("v11",item1+pieces);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p1","□透视受检者入射体表空气比释动能率最大值-"+yy);
					}else{
						dataMap.put("p1","■透视受检者入射体表空气比释动能率最大值");
					}
					if (item2 == 0) {
						dataMap.put("v12","□");
					}else{
						dataMap.put("v12","■");
					}
					
					//2是透视荧光屏的灵敏度
				}else if (type == 2) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v2"+j+"="+item);
						
						dataMap.put("v2"+j,item);
					}
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p2","□透视荧光屏的灵敏度-"+yy);
					}else{
						dataMap.put("p2","■透视荧光屏的灵敏度");
					}
					
					//3是空间分辨力
				}else if (type == 3) {
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("自动控制="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					
					if (item1 == 0) {
						dataMap.put("v31","□");
					}else{
						dataMap.put("v31","■");
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 4; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v3"+k+l+"="+item);
							
							if (l == 1) {
								dataMap.put("v3"+k+l,item+pieces);
							}else{
								dataMap.put("v3"+k+l,item);
							}
						}
					}
					
					//4是低对比分辨力
				}else if (type == 4) {
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("I.I尺寸="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("自动控制="+item2);
					for (int j = 3; j <= 7; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v4"+j+"="+item);
						
						dataMap.put("v4"+j,item);
					}
					
					dataMap.put("v41",item1+pieces);
					
					if (item2 == 0) {
						dataMap.put("v42","□");
					}else{
						dataMap.put("v42","■");
					}
					
					//5是影像接收器入射屏前空气比释动能率
				}else if (type == 5) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("I.I尺寸="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("自动控制="+item2);
					for (int j = 3; j <= 10; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v5"+j+"="+item);
						
						dataMap.put("v5"+j,item);
					}
					int item11 = Integer.parseInt((String) morphDynaBean.get("item11"));
					logger.info("影像接收器前有滤线栅="+item11);
					int item12 = Integer.parseInt((String) morphDynaBean.get("item12"));
					logger.info("影像接收器前无滤线栅="+item12);
					
					dataMap.put("v51",item1+pieces);
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p5","□影像接收器入射屏前空气比释动能率-"+yy);
					}else{
						dataMap.put("p5","■影像接收器入射屏前空气比释动能率");
					}
					if (item2 == 0) {
						dataMap.put("v52","□");
					}else{
						dataMap.put("v52","■");
					}
					if (item11 == 0) {
						dataMap.put("v511","□");
					}else{
						dataMap.put("v511","■");
					}
					if (item12 == 0) {
						dataMap.put("v512","□");
					}else{
						dataMap.put("v512","■");
					}
					
					//6是自动亮度控制
				}else if (type == 6) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("通过改变管电流调节亮度="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("通过改变管电压调节亮度="+item2);
					int item3 = Integer.parseInt((String) morphDynaBean.get("item3"));
					logger.info("改变管电压、管电流="+item3);
					int item4 = Integer.parseInt((String) morphDynaBean.get("item4"));
					logger.info("只改变管电流="+item4);
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p6","□自动亮度控制-"+yy);
					}else{
						dataMap.put("p6","■自动亮度控制");
					}
					if (item1 == 0) {
						dataMap.put("v61","□");
					}else{
						dataMap.put("v61","■");
					}
					if (item2 == 0) {
						dataMap.put("v62","□");
					}else{
						dataMap.put("v62","■");
					}
					if (item3 == 0) {
						dataMap.put("v63","□");
					}else{
						dataMap.put("v63","■");
					}
					if (item4 == 0) {
						dataMap.put("v64","□");
					}else{
						dataMap.put("v64","■");
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 7; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v6"+k+l+"="+item);
							
							dataMap.put("v6"+k+l,item);
						}
					}
					
					//7是照射野与影像接收器中心偏差
				}else if (type == 7) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					for (int j = 1; j <= 2; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v7"+j+"="+item);
						
						dataMap.put("v7"+j,item);
					}
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p7","□照射野与影像接收器中心偏差-"+yy);
					}else{
						dataMap.put("p7","■照射野与影像接收器中心偏差");
					}
					
					//8是最大照射野与普通荧光屏尺寸相同时的台屏距
				}else if (type == 8) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("床面板到屏面板的距离="+item1);
					
					dataMap.put("v81",item1);
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p8","□最大照射野与普通荧光屏尺寸相同时的台屏距-"+yy);
					}else{
						dataMap.put("p8","■最大照射野与普通荧光屏尺寸相同时的台屏距");
					}
				}
			}
			System.out.println("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s[j].delete();
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/422.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getProjectNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为422的原始数据表
	 * @return
	 */
	public String upload_422_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_422_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额  定  容  量
		    dataMap.put("bright",task.getBrightnessControl());//有无自动亮度控制
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("xRayNum",task.getxRayNum());//X射线管编号
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("standard",standard);//检测依据
		    
		    if (task.getImageIntensifier().equals("平板探测器")) {
		    	dataMap.put("imageInt","平板探测器");//有无影像接收器
			}else if (task.getImageIntensifier().equals("影像增强器")) {
				dataMap.put("imageInt","影像增强器");//有无影像接收器
			}else{
				dataMap.put("imageInt","");//有无影像接收器
			}
		    if (task.getItem2().equals("直接透视")) {
		    	dataMap.put("purpose","直接透视（透视荧光屏设备）");//设备用途
			}else if (task.getItem2().equals("间接透视")) {
				dataMap.put("purpose","间接透视（影像接收器透视）");//设备用途
			}else{
				dataMap.put("purpose","");//设备用途
			}
			
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    String deviceName = "";
		    String deviceNum = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	
		    	//获取仪器名字和编号
		    	deviceName += "    "+taskDevices.get(i).getDevice().getDeviceModel()+"型"+taskDevices.get(i).getDevice().getDeviceName();
		    	deviceNum += "         "+taskDevices.get(i).getDevice().getDeviceNum();
			}
		    dataMap.put("deviceName",deviceName);//检测仪器名字
		    dataMap.put("deviceNum",deviceNum);//检测仪器编号
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是透视受检者入射体表空气比释动能率典型值，1是透视受检者入射体表空气比释动能率最大值，2是透视荧光屏的灵敏度" +
						"3是空间分辨力，4是低对比分辨力，5是影像接收器入射屏前空气比释动能率，6是自动亮度控制，" +
						"7是照射野与影像接收器中心偏差，8是最大照射野与普通荧光屏尺寸相同时的台屏距="+type);
				
				//0是透视受检者入射体表空气比释动能率典型值
				if (type == 0) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("I.I尺寸="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("自动控制="+item2);
					for (int j = 3; j <= 9; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v0"+j+"="+item);
						
						dataMap.put("v0"+j,item);
					}
					int item10 = Integer.parseInt((String) morphDynaBean.get("item10"));
					logger.info("透视荧光屏="+item10);
					int item11 = Integer.parseInt((String) morphDynaBean.get("item11"));
					logger.info("非透视荧光屏="+item11);
					
					dataMap.put("v01",item1+pieces);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p0","□透视受检者入射体表空气比释动能率典型值-"+yy);
					}else{
						dataMap.put("p0","■透视受检者入射体表空气比释动能率典型值");
					}
					if (item2 == 0) {
						dataMap.put("v02","□");
					}else{
						dataMap.put("v02","■");
					}
					if (item10 == 0) {
						dataMap.put("v010","□");
					}else{
						dataMap.put("v010","■");
					}
					if (item11 == 0) {
						dataMap.put("v011","□");
					}else{
						dataMap.put("v011","■");
					}
					
					//1是透视受检者入射体表空气比释动能率最大值
				}else if (type == 1) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("I.I尺寸="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("自动控制="+item2);
					for (int j = 3; j <= 9; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v1"+j+"="+item);
						
						dataMap.put("v1"+j,item);
					}
					
					dataMap.put("v11",item1+pieces);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p1","□透视受检者入射体表空气比释动能率最大值-"+yy);
					}else{
						dataMap.put("p1","■透视受检者入射体表空气比释动能率最大值");
					}
					if (item2 == 0) {
						dataMap.put("v12","□");
					}else{
						dataMap.put("v12","■");
					}
					
					//2是透视荧光屏的灵敏度
				}else if (type == 2) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v2"+j+"="+item);
						
						dataMap.put("v2"+j,item);
					}
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p2","□透视荧光屏的灵敏度-"+yy);
					}else{
						dataMap.put("p2","■透视荧光屏的灵敏度");
					}
					
					//3是空间分辨力
				}else if (type == 3) {
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("自动控制="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					
					if (item1 == 0) {
						dataMap.put("v31","□");
					}else{
						dataMap.put("v31","■");
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 4; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v3"+k+l+"="+item);
							
							if (l == 1) {
								dataMap.put("v3"+k+l,item+pieces);
							}else{
								dataMap.put("v3"+k+l,item);
							}
						}
					}
					
					//4是低对比分辨力
				}else if (type == 4) {
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("I.I尺寸="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("自动控制="+item2);
					for (int j = 3; j <= 7; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v4"+j+"="+item);
						
						dataMap.put("v4"+j,item);
					}
					
					dataMap.put("v41",item1+pieces);
					
					if (item2 == 0) {
						dataMap.put("v42","□");
					}else{
						dataMap.put("v42","■");
					}
					
					//5是影像接收器入射屏前空气比释动能率
				}else if (type == 5) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					String pieces = (String) morphDynaBean.get("pieces");
					logger.info("单位="+pieces);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("I.I尺寸="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("自动控制="+item2);
					for (int j = 3; j <= 10; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v5"+j+"="+item);
						
						dataMap.put("v5"+j,item);
					}
					int item11 = Integer.parseInt((String) morphDynaBean.get("item11"));
					logger.info("影像接收器前有滤线栅="+item11);
					int item12 = Integer.parseInt((String) morphDynaBean.get("item12"));
					logger.info("影像接收器前无滤线栅="+item12);
					
					dataMap.put("v51",item1+pieces);
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p5","□影像接收器入射屏前空气比释动能率-"+yy);
					}else{
						dataMap.put("p5","■影像接收器入射屏前空气比释动能率");
					}
					if (item2 == 0) {
						dataMap.put("v52","□");
					}else{
						dataMap.put("v52","■");
					}
					if (item11 == 0) {
						dataMap.put("v511","□");
					}else{
						dataMap.put("v511","■");
					}
					if (item12 == 0) {
						dataMap.put("v512","□");
					}else{
						dataMap.put("v512","■");
					}
					
					//6是自动亮度控制
				}else if (type == 6) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("通过改变管电流调节亮度="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("通过改变管电压调节亮度="+item2);
					int item3 = Integer.parseInt((String) morphDynaBean.get("item3"));
					logger.info("改变管电压、管电流="+item3);
					int item4 = Integer.parseInt((String) morphDynaBean.get("item4"));
					logger.info("只改变管电流="+item4);
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p6","□自动亮度控制-"+yy);
					}else{
						dataMap.put("p6","■自动亮度控制");
					}
					if (item1 == 0) {
						dataMap.put("v61","□");
					}else{
						dataMap.put("v61","■");
					}
					if (item2 == 0) {
						dataMap.put("v62","□");
					}else{
						dataMap.put("v62","■");
					}
					if (item3 == 0) {
						dataMap.put("v63","□");
					}else{
						dataMap.put("v63","■");
					}
					if (item4 == 0) {
						dataMap.put("v64","□");
					}else{
						dataMap.put("v64","■");
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 7; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v6"+k+l+"="+item);
							
							dataMap.put("v6"+k+l,item);
						}
					}
					
					//7是照射野与影像接收器中心偏差
				}else if (type == 7) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					for (int j = 1; j <= 2; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v7"+j+"="+item);
						
						dataMap.put("v7"+j,item);
					}
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p7","□照射野与影像接收器中心偏差-"+yy);
					}else{
						dataMap.put("p7","■照射野与影像接收器中心偏差");
					}
					
					//8是最大照射野与普通荧光屏尺寸相同时的台屏距
				}else if (type == 8) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = (String) morphDynaBean.get("reason");
					logger.info("未检测原因="+reason);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("床面板到屏面板的距离="+item1);
					
					dataMap.put("v81",item1);
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p8","□最大照射野与普通荧光屏尺寸相同时的台屏距-"+yy);
					}else{
						dataMap.put("p8","■最大照射野与普通荧光屏尺寸相同时的台屏距");
					}
				}
			}
			System.out.println("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/422.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为424的原始数据表
	 * @return
	 */
	public String upload_424_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_424_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额  定  容  量
		    dataMap.put("exposure",task.getExposureControl());//自照曝光控制
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("xRayNum",task.getxRayNum());//X射线管编号
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("standard",standard);//检测依据
		    
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
		    ROMS_SZ_DEVICE device = null;
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	device = taskDevices.get(i).getDevice();
		    	
		    	//获取仪器
		    	String deviceName = device.getDeviceName();
		    	//判断仪器是否有编号，有的话就拼上
		    	if (!device.getDeviceNum().equals("")) {
		    		//名称/型号/编号
		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
				}
		    	logger.info("仪器="+deviceName);
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice(deviceName);
		    	
		    	deviceDatas.add(deviceData);
			}
		    //防止没有绑定仪器而文档无法打开
		    if (taskDevices.size() == 0) {
		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
		    	deviceData.setDevice("");
		    	
		    	deviceDatas.add(deviceData);
			}
		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是胸壁侧照射野准直,1是光野与照射野的一致性，2是管电压指示的偏离，3是半值层（HVL）/mmAl" +
						"4是特定辐射输出量和输出量重复性，5是影像接收器响应，6是影像接收器均匀性，7是伪影，" +
						"8是自动曝光控制重复性，9是乳腺平均剂量，10是高对比分辨率，11是对比度细节阈值="+type);
				
				//0是胸壁侧照射野准直
				if (type == 0) {
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("超出台边="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("超出距离="+item2);
					int item3 = Integer.parseInt((String) morphDynaBean.get("item3"));
					logger.info("未超出台边="+item3);
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					dataMap.put("v02",item2);
					
					if (project == 0) {
						dataMap.put("p0","□胸壁侧照射野准直-"+yy);
					}else{
						dataMap.put("p0","■胸壁侧照射野准直");
					}
					if (item1 == 0) {
						dataMap.put("v01","□");
					}else{
						dataMap.put("v01","■");
					}
					if (item3 == 0) {
						dataMap.put("v03","□");
					}else{
						dataMap.put("v03","■");
					}
					
					//1是光野与照射野的一致性
				}else if (type == 1) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("a1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("a2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("b1="+item3);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					dataMap.put("v11",item1);
					dataMap.put("v12",item2);
					dataMap.put("v13",item3);
					
					if (project == 0) {
						dataMap.put("p1","□光野与照射野的一致性-"+yy);
					}else{
						dataMap.put("p1","■光野与照射野的一致性");
					}
					
					//2是管电压指示的偏离
				}else if (type == 2) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item2 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v2"+j+"1="+item2);
						
						if (item2 == 0) {
							dataMap.put("v2"+j+"1","□");
						}else{
							dataMap.put("v2"+j+"1","■");
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 6; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("v2"+j+k+l+"="+item);
								
								dataMap.put("v2"+j+k+l,item);
							}
						}
					}
					
					//3是半值层（HVL）/mmAl
				}else if (type == 3) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("kV="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("mAs="+item2);
					
					dataMap.put("v31",item1);
					dataMap.put("v32",item2);
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 5; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v3"+k+l+"="+item);
							
							dataMap.put("v3"+k+l,item);
						}
					}
					
					//4是特定辐射输出量和输出量重复性
				}else if (type == 4) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					for (int k = 1; k <= 5; k++) {
						String item = (String) morphDynaBean.get("item"+k);
						logger.info("v4"+k+"="+item);
						
						dataMap.put("v4"+k,item);
					}
					String reason1 = "";
					if (a.containsKey("reason1")) {
						reason1 = (String) morphDynaBean.get("reason1");
					}
					logger.info("特定辐射输出量未检测原因="+reason1);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("输出量重复性未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					int yy1 = 0;
					if (reason1.equals("状态检测无此项")) {
						yy1 = 1;
					}else if (reason1.equals("不具备此项功能")) {
						yy1 = 2;
					}else{
						yy1 = 3;
					}
					
					if (project == 0) {
						dataMap.put("p41","□特定辐射输出量-"+yy);
						dataMap.put("p42","□输出量重复性-"+yy1);
					}else if (project == 1) {
						dataMap.put("p41","■特定辐射输出量");
						dataMap.put("p42","□输出量重复性-"+yy1);
					}else if (project == 2) {
						dataMap.put("p41","□特定辐射输出量-"+yy);
						dataMap.put("p42","■输出量重复性");
					}else{
						dataMap.put("p41","■特定辐射输出量");
						dataMap.put("p42","■输出量重复性");
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 9; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v4"+k+l+"="+item);
							
							dataMap.put("v4"+k+l,item);
						}
					}
					
					//5是影像接收器响应
				}else if (type == 5) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					for (int j = 1; j <= 5; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v5"+j+"="+item);
						
						dataMap.put("v5"+j,item);
					}
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p5","□影像接收器响应-"+yy);
					}else{
						dataMap.put("p5","■影像接收器响应");
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 6; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v5"+k+l+"="+item);
							
							dataMap.put("v5"+k+l,item);
						}
					}
					
					//6是影像接收器均匀性
				}else if (type == 6) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v6"+j+"="+item);
						
						dataMap.put("v6"+j,item);
					}
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("曝光="+item4);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("影像接收器均匀性="+item5);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					dataMap.put("v65",item5);
					
					if (project == 0) {
						dataMap.put("p6","□影像接收器均匀性-"+yy);
					}else{
						dataMap.put("p6","■影像接收器均匀性");
					}
					if (item4.equals("自动曝光")) {
						dataMap.put("v64","■自动曝光 □手动曝光");
					}else if (item4.equals("手动曝光")) {
						dataMap.put("v64","□自动曝光 ■手动曝光");
					}else{
						dataMap.put("v64","□自动曝光 □手动曝光");
					}
					
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 6; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v6"+k+l+"="+item);
							
							dataMap.put("v6"+k+l,item);
						}
					}
					
					//7是伪影
				}else if (type == 7) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v7"+j+"="+item);
						
						dataMap.put("v7"+j,item);
					}
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("曝光="+item4);
					String item5 = (String) morphDynaBean.get("item5");
					logger.info("是否存在伪影 ="+item5);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p7","□伪影-"+yy);
					}else{
						dataMap.put("p7","■伪影");
					}
					if (item4.equals("自动曝光")) {
						dataMap.put("v74","■自动曝光 □手动曝光");
					}else if (item4.equals("手动曝光")) {
						dataMap.put("v74","□自动曝光 ■手动曝光");
					}else{
						dataMap.put("v74","□自动曝光 □手动曝光");
					}
					if (item5.equals("否")) {
						dataMap.put("v75","□是   ■否");
					}else if (item5.equals("是")) {
						dataMap.put("v75","■是  □否");
					}else{
						dataMap.put("v75","□是  □否");
					}
					
					//8是自动曝光控制重复性
				}else if (type == 8) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v8"+j+"="+item);
						
						dataMap.put("v8"+j,item);
					}
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p8","□自动曝光控制重复性-"+yy);
					}else{
						dataMap.put("p8","■自动曝光控制重复性");
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 7; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v8"+k+l+"="+item);
							
							dataMap.put("v8"+k+l,item);
						}
					}
					
					//9是乳腺平均剂量
				}else if (type == 9) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("2D="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("3D="+item2);
					for (int j = 3; j <= 17; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v9"+j+"="+item);
						
						dataMap.put("v9"+j,item);
					}
					int item6 = Integer.parseInt((String) morphDynaBean.get("item6"));
					logger.info("2D曝光模式="+item6);
					int item7 = Integer.parseInt((String) morphDynaBean.get("item7"));
					logger.info("3D 0°曝光模式="+item7);
					int item11 = Integer.parseInt((String) morphDynaBean.get("item11"));
					logger.info("3D测量值="+item11);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p9","□乳腺平均剂量-"+yy);
					}else{
						dataMap.put("p9","■乳腺平均剂量");
					}
					if (item1 == 0) {
						dataMap.put("v91","□");
					}else{
						dataMap.put("v91","■");
					}
					if (item2 == 0) {
						dataMap.put("v92","□");
					}else{
						dataMap.put("v92","■");
					}
					if (item6 == 0) {
						dataMap.put("v96","□");
					}else{
						dataMap.put("v96","■");
					}
					if (item7 == 0) {
						dataMap.put("v97","□");
					}else{
						dataMap.put("v97","■");
					}
					if (item11 == 0) {
						dataMap.put("v911","□");
					}else{
						dataMap.put("v911","■");
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 7; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("s9"+k+l+"="+item);
							
							dataMap.put("s9"+k+l,item);
						}
					}
					
					//10是高对比分辨率
				}else if (type == 10) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					for (int j = 1; j <= 4; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("s10"+j+"="+item);
						
						dataMap.put("s10"+j,item);
					}
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p10","□高对比分辨率-"+yy);
					}else{
						dataMap.put("p10","■高对比分辨率");
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 6; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("s10"+k+l+"="+item);
							
							dataMap.put("s10"+k+l,item);
						}
					}
					
					//11是对比度细节阈值
				}else if (type == 11) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					for (int j = 1; j <= 2; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("s11"+j+"="+item);
						
						dataMap.put("s11"+j,item);
					}
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					if (project == 0) {
						dataMap.put("p11","□对比度细节阈值-"+yy);
					}else{
						dataMap.put("p11","■对比度细节阈值");
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 3; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("s11"+k+l+"="+item);
							
							dataMap.put("s11"+k+l,item);
						}
					}
				}
			}
			dataMap.put("device","");
			System.out.println("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/424.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	/**
	 * 生成编号为451的原始数据表
	 * @return
	 */
	public String upload_451_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_451_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("nominalCapacity",task.getNominalCapacity()+"kV，"+task.getNominalCapacity1());//额  定  容  量
		    dataMap.put("timeDeixis",task.getTimeDeixis());//曝光时间指示
		    dataMap.put("exposure",task.getExposureControl());//自照曝光控制
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("xRayNum",task.getxRayNum());//X射线管编号
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("standard",task.getStandard());//检测依据
		    
			
		    //查询任务下仪器
		    String where = " and taskId='"+taskId+"' and deviceId is not null";
		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
		    logger.info("任务关联仪器数量="+taskDevices.size());
		    
		    String deviceName = "";
		    String deviceNum = "";
		    for (int i = 0; i < taskDevices.size(); i++) {
		    	
		    	//获取仪器名字和编号
		    	deviceName += "    "+taskDevices.get(i).getDevice().getDeviceModel()+"型"+taskDevices.get(i).getDevice().getDeviceName();
		    	deviceNum += "         "+taskDevices.get(i).getDevice().getDeviceNum();
			}
		    dataMap.put("deviceName",deviceName);//检测仪器名字
		    dataMap.put("deviceNum",deviceNum);//检测仪器编号
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    //解析测点和数据json
		    JSONObject a = null;
			Object bean = null;
			JSONArray array = JSONArray.fromObject(data);
			Object[] objArray = array.toArray();
			logger.info("测点数量="+objArray.length);
			for (int i = 0; i < objArray.length; i++) {
				a = JSONObject.fromObject(objArray[i]);
				bean = JSONObject.toBean(a);
				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
				int type = (Integer) morphDynaBean.get("type");
				logger.info("0是标准照片密度,1是 胸壁侧射野的准直，2是胸壁侧射野与台边准直，3是光野与照射野的一致性" +
						"4是自动曝光控制，5是管电压指示的偏离，6是特定辐射输出量输出量重复性，7是乳腺平均剂量，" +
						"8是高对比分辨率，9是半值层（HVL）/mmAl，10是曝光时间指示的偏离="+type);
				
				//0是标准照片密度
				if (type == 0) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("自动控制="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("4cm厚模体的胶片光密度值="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("与基线值差值="+item3);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					dataMap.put("v02",item2);
					dataMap.put("v03",item3);
					
					if (project == 0) {
						dataMap.put("p0","□标准照片密度-"+yy);
					}else{
						dataMap.put("p0","■标准照片密度");
					}
					if (item1 == 0) {
						dataMap.put("v01","□");
					}else{
						dataMap.put("v01","■");
					}
					
					//1是 胸壁侧射野的准直
				}else if (type == 1) {
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("全部覆盖="+item1);
					int item2 = Integer.parseInt((String) morphDynaBean.get("item2"));
					logger.info("部分未覆盖="+item2);
					
					if (item1 == 0) {
						dataMap.put("v11","□");
					}else{
						dataMap.put("v11","■");
					}
					if (item2 == 0) {
						dataMap.put("v12","□");
					}else{
						dataMap.put("v12","■");
					}
					
					//2是胸壁侧射野与台边准直
				}else if (type == 2) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("超出台边距离="+item1);
					
					dataMap.put("v21",item1);
					
					//3是光野与照射野的一致性
				}else if (type == 3) {
					String item1 = (String) morphDynaBean.get("item1");
					logger.info("a1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("a2="+item2);
					String item3 = (String) morphDynaBean.get("item3");
					logger.info("b1="+item3);
					
					dataMap.put("v31",item1);
					dataMap.put("v32",item2);
					dataMap.put("v33",item3);
					
					
					//4是自动曝光控制
				}else if (type == 4) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					int item1 = Integer.parseInt((String) morphDynaBean.get("item1"));
					logger.info("自动控制1="+item1);
					String item2 = (String) morphDynaBean.get("item2");
					logger.info("2cm厚模体的胶片光密度值="+item2);
					int item3 = Integer.parseInt((String) morphDynaBean.get("item3"));
					logger.info("自动控制2="+item3);
					String item4 = (String) morphDynaBean.get("item4");
					logger.info("4cm厚模体的胶片光密度值="+item4);
					int item5 = Integer.parseInt((String) morphDynaBean.get("item5"));
					logger.info("自动控制3="+item5);
					String item6 = (String) morphDynaBean.get("item6");
					logger.info("6cm厚模体的胶片光密度值="+item6);
					String item7 = (String) morphDynaBean.get("item7");
					logger.info("与4cm厚模体光密度值差值1="+item7);
					String item8 = (String) morphDynaBean.get("item8");
					logger.info("与4cm厚模体光密度值差值2="+item8);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					
					dataMap.put("v42",item2);
					dataMap.put("v44",item4);
					dataMap.put("v46",item6);
					dataMap.put("v47",item7);
					dataMap.put("v48",item8);
					
					if (project == 0) {
						dataMap.put("p4","□自动曝光控制-"+yy);
					}else{
						dataMap.put("p4","■自动曝光控制");
					}
					if (item1 == 0) {
						dataMap.put("v41","□");
					}else{
						dataMap.put("v41","■");
					}
					if (item3 == 0) {
						dataMap.put("v43","□");
					}else{
						dataMap.put("v43","■");
					}
					if (item5 == 0) {
						dataMap.put("v45","□");
					}else{
						dataMap.put("v45","■");
					}
					
					//5是管电压指示的偏离
				}else if (type == 5) {
					//获取数据
					JSONArray jsonArray = a.getJSONArray("subTaskBeanList");
					Object[] objects = jsonArray.toArray();
					logger.info("数据数量="+objects.length);
					for (int j = 1; j <= objects.length; j++) {
						a = JSONObject.fromObject(objects[j-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
						int item2 = Integer.parseInt((String) morphDynaBean1.get("item2"));
						logger.info("v5"+j+"1="+item2);
						
						if (item2 == 0) {
							dataMap.put("v5"+j+"1","□");
						}else{
							dataMap.put("v5"+j+"1","■");
						}
						
						//获取数据
						JSONArray jsonArray1 = a.getJSONArray("valueList");
						Object[] objects1 = jsonArray1.toArray();
						logger.info("sub数据数量="+objects1.length);
						for (int k = 1; k <= objects1.length; k++) {
							a = JSONObject.fromObject(objects1[k-1]);
							bean = JSONObject.toBean(a);
							MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
							
							for (int l = 1; l <= 6; l++) {
								String item = (String) morphDynaBean11.get("item"+l);
								logger.info("v5"+j+k+l+"="+item);
								
								dataMap.put("v5"+j+k+l,item);
							}
						}
						
						//补空值
						if (objects1.length == 0) {
							for (int k = 0; k < 4; k++) {
								for (int l = 1; l <= 6; l++) {
									dataMap.put("v5"+j+k+l,"");
								}
							}
						}
					}
					
					//6是特定辐射输出量输出量重复性
				}else if (type == 6) {
					for (int j = 1; j <= 6; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v6"+j+"="+item);
						
						dataMap.put("v6"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 8; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v6"+k+l+"="+item);
							
							dataMap.put("v6"+k+l,item);
						}
					}
					
					//7是乳腺平均剂量
				}else if (type == 7) {
					for (int j = 1; j <= 8; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v7"+j+"="+item);
						
						dataMap.put("v7"+j,item);
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 8; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v7"+k+l+"="+item);
							
							dataMap.put("v7"+k+l,item);
						}
					}
					
					//8是高对比分辨率
				}else if (type == 8) {
					for (int j = 1; j <= 3; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v8"+j+"="+item);
						
						dataMap.put("v8"+j,item);
					}
					
					//9是半值层（HVL）/mmAl
				}else if (type == 9) {
					for (int j = 1; j <= 7; j++) {
						String item = (String) morphDynaBean.get("item"+j);
						logger.info("v9"+j+"="+item);
						
						dataMap.put("v9"+j,item);
					}
					
					//10是曝光时间指示的偏离
				}else if (type == 10) {
					int project = (Integer) morphDynaBean.get("project");
					logger.info("0是检测项目没打钩，1是检测项目打钩="+project);
					String reason = "";
					if (a.containsKey("reason")) {
						reason = (String) morphDynaBean.get("reason");
					}
					logger.info("未检测原因="+reason);
					
					//原因判断
					int yy = 0;
					if (reason.equals("状态检测无此项")) {
						yy = 1;
					}else if (reason.equals("不具备此项功能")) {
						yy = 2;
					}else{
						yy = 3;
					}
					if (project == 0) {
						dataMap.put("p10","□曝光时间指示的偏离-"+yy);
					}else{
						dataMap.put("p10","■曝光时间指示的偏离");
					}
					
					//获取数据
					JSONArray jsonArray1 = a.getJSONArray("valueList");
					Object[] objects1 = jsonArray1.toArray();
					logger.info("sub数据数量="+objects1.length);
					for (int k = 1; k <= objects1.length; k++) {
						a = JSONObject.fromObject(objects1[k-1]);
						bean = JSONObject.toBean(a);
						MorphDynaBean morphDynaBean11 = (MorphDynaBean) bean;
						
						for (int l = 1; l <= 6; l++) {
							String item = (String) morphDynaBean11.get("item"+l);
							logger.info("v10"+k+l+"="+item);
							
							dataMap.put("v10"+k+l,item);
						}
					}
				}
			}
			System.out.println("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/451.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	//往原始记录文件夹里再存一份
	      	String pass1 = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
		     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
		     File f2 = new File(path);
		     File s2[] = f2.listFiles();
		     for(int j=0;j<s2.length;j++) {
		    	 String name=s2[j].getName();
		    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		    		 s2[j].delete();
		    	 }
		     }
		     
		     //传docx地址转PDF
		     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
		     logger.info(cmd);
		     cmdRun(cmd);
		     
		     //获取web.xml配置的一个默认地址
		     String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		     //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url = address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	
	/**
	 * 生成编号为488的原始数据表
	 * @return
	 */
	public String upload_488_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_488_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			SimpleDateFormat H_sdf = new SimpleDateFormat("HH");//时
			SimpleDateFormat m_sdf = new SimpleDateFormat("mm");//分
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
//		    H_sdf.format(task.getCreatetime())+"时"+
//		    m_sdf.format(task.getCreatetime())+"分";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
		    
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("objectWork",task.getObjectWork());//检测对象及工况
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
//		    dataMap.put("note",task.getNote());//备注
		    
		    //备注
		    ArrayList<ROMS_SZ_POINTDATA> notes = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA note = new ROMS_SZ_POINTDATA();
		    note.setNote(task.getNote());
		    notes.add(note);
		    dataMap.put("notes",notes);
		    
		  //查询任务下仪器
//		    String where = " and taskId='"+taskId+"' and deviceId is not null";
//		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
//		    logger.info("任务关联仪器数量="+taskDevices.size());
//		    
//		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
//		    ROMS_SZ_DEVICE device = null;
//		    for (int i = 0; i < taskDevices.size(); i++) {
//		    	device = taskDevices.get(i).getDevice();
//		    	//获取仪器
//		    	String deviceName = device.getDeviceName();
//		    	//判断仪器是否有编号，有的话就拼上
//		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
//		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
//				}
//		    	logger.info("仪器="+deviceName);
//		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
//		    	deviceData.setDevice(deviceName);
//		    	
//		    	deviceDatas.add(deviceData);
//			}
//		    //防止没有绑定仪器而文档无法打开
//		    if (taskDevices.size() == 0) {
//		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
//		    	deviceData.setDevice("");
//		    	
//		    	deviceDatas.add(deviceData);
//			}
//		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> points = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
//		    String data = task.getData();
//		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
//		    JSONObject a = null;
//			Object bean = null;
//			JSONArray array = JSONArray.fromObject(data);
//			Object[] objArray = array.toArray();
//			logger.info("测点数量="+objArray.length);
//			for (int i = 0; i < objArray.length; i++) {
//				a = JSONObject.fromObject(objArray[i]);
//				bean = JSONObject.toBean(a);
//				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
//				int type = Integer.parseInt((String) morphDynaBean.get("type"));
//				logger.info("0是本底测点，1是测点="+type);
//				pieces = (String) morphDynaBean.get("pieces");
//				logger.info("单位="+pieces);
//				
//				if (type == 1) {
//					//获取数据
//					JSONArray jsonArray = a.getJSONArray("value");
//					Object[] objects = jsonArray.toArray();
//					logger.info("数据数量="+objects.length);
//					
//					for (int j = 0; j < objects.length; j++) {
//						a = JSONObject.fromObject(objects[j]);
//						bean = JSONObject.toBean(a);
//						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
//						String item1 = (String) morphDynaBean1.get("item1");
//						logger.info("item1="+item1);
//						String item2 = (String) morphDynaBean1.get("item2");
//						logger.info("item2="+item2);
//						String item3 = (String) morphDynaBean1.get("item3");
//						logger.info("item3="+item3);
//						String item4 = (String) morphDynaBean1.get("item4");
//						logger.info("item4="+item4);
//						String item5 = (String) morphDynaBean1.get("item5");
//						logger.info("item5="+item5);
//						String item6 = (String) morphDynaBean1.get("item6");
//						logger.info("item6="+item6);
//						String item7 = (String) morphDynaBean1.get("item7");
//						logger.info("item7="+item7);
//						String item8 = (String) morphDynaBean1.get("item8");
//						logger.info("item8="+item8);
//						String item9 = (String) morphDynaBean1.get("item9");
//						logger.info("item9="+item9);
//						String item10 = (String) morphDynaBean1.get("item10");
//						logger.info("item10="+item10);
//						String item11 = (String) morphDynaBean1.get("item11");
//						logger.info("item11="+item11);
//						
//						pointData = new ROMS_SZ_POINTDATA();
//						pointData.setV1(item1);
//						pointData.setV2(item2);
//						pointData.setV3(item3);
//						pointData.setV4(item4);
//						pointData.setV5(item5);
//						pointData.setV6(item6);
//						pointData.setV7(item7);
//						pointData.setV8(item8);
//						pointData.setV9(item9);
//						pointData.setV10(item10);
//						pointData.setV11(item11);
//						
//						pointDatas.add(pointData);
//						
//						//规定pointDatas大小等于***就放入另外一个points
//						if (pointDatas.size() == 16) {
//							pointData = new ROMS_SZ_POINTDATA();
//							pointData.setPointDatas(pointDatas);
//							points.add(pointData);
//							
//							//把pointDatas重新置空
//							pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
//						}else if (j == objects.length-1) {
//							pointData = new ROMS_SZ_POINTDATA();
//							pointData.setPointDatas(pointDatas);
//							points.add(pointData);
//						}
//					}
//					
//					//补空值
//					if (objects.length == 0) {
//						if (type == 1) {
//							pointData = new ROMS_SZ_POINTDATA();
//							pointData.setV1("");
//							pointData.setV2("");
//							pointData.setV3("");
//							pointData.setV4("");
//							pointData.setV5("");
//							pointData.setV6("");
//							pointData.setV7("");
//							pointData.setV8("");
//							pointData.setV9("");
//							pointData.setV10("");
//							pointData.setV11("");
//							
//							pointDatas.add(pointData);
//							pointData = new ROMS_SZ_POINTDATA();
//							pointData.setPointDatas(pointDatas);
//							points.add(pointData);
//						}
//					}
//				}
//			}
			
			
			
		  for (int i = 0; i < 20; i++) {
	    	pointData = new ROMS_SZ_POINTDATA();
	    	pointData.setV1("");
			pointData.setV2("");
			pointData.setV3("");
			pointData.setV4("");
			pointData.setV5("");
			pointData.setV6("");
			pointData.setV7("");
			pointData.setV8("");
			pointData.setV9("");
			pointData.setV10("");
			pointData.setV11("");
			pointDatas.add(pointData);
			
			//规定pointDatas大小等于***就放入另外一个points
			if (pointDatas.size() == 16) {
				pointData = new ROMS_SZ_POINTDATA();
				pointData.setPointDatas(pointDatas);
				points.add(pointData);
				
				//把pointDatas重新置空
				pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
			}else if (i == 20-1) {
				pointData = new ROMS_SZ_POINTDATA();
				pointData.setPointDatas(pointDatas);
				points.add(pointData);
			}
		  }
		    
		    
		    dataMap.put("note","");
		    dataMap.put("device","");
		    dataMap.put("v1","");
		    dataMap.put("v2","");
		    dataMap.put("v3","");
		    dataMap.put("v4","");
		    dataMap.put("v5","");
		    dataMap.put("v6","");
		    dataMap.put("v7","");
		    dataMap.put("v8","");
		    dataMap.put("v9","");
		    dataMap.put("v10","");
		    dataMap.put("v11","");
			dataMap.put("pieces",pieces);//单位
			dataMap.put("points",points);//数据
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/488.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		    //往原始记录文件夹里再存一份
		    String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
	    	File s1[] = f1.listFiles();
	    	for(int j=0;j<s1.length;j++) {
	    		String name=s1[j].getName();
	    		if(taskauth.getTemplate().getNum().equals(name)){
	    			s1[j].delete();
	    		}
	    	}
	    	// 输出文档路径及名称
		    outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
		    logger.info("文档路径及名称="+outFile);
		     
		    WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
		    wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
		    	
		     
		    logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
			File f2 = new File(path);
	    	File s2[] = f2.listFiles();
	    	for(int j=0;j<s2.length;j++) {
	    		String name=s2[j].getName();
	    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
	    			s2[j].delete();
	    		}
	    	}
				     
		    //传docx地址转PDF
	    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			logger.info(cmd);
			cmdRun(cmd);
					
		    //获取web.xml配置的一个默认地址
		    String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		    //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		    url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		    logger.info("返回下载地址="+url);
		     
		    logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}
		 

	/**
	 * 生成编号为493的原始数据表
	 * @return
	 */
	public String upload_493_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_493_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//x射线编号（摄影）
		    dataMap.put("xRayNum1",task.getxRayNum1());//x射线编号（透视）
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量（摄影）
		    dataMap.put("nominalCapacity1",task.getNominalCapacity1());//额定容量（透视）
		    dataMap.put("conditions",task.getConditions());//检测条件（摄影）
		    dataMap.put("conditions1",task.getConditions1());//检测条件（透视）
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子（摄影）
		    dataMap.put("deviceFactor1",task.getDeviceFactor1());//检测仪器校准因子（透视）
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("volt",task.getVoltageRange1());//常用最大管电压
		    dataMap.put("current",task.getCurrent1());//常用最大管电流
		    dataMap.put("expos",task.getExposureTimeRange1());//单次最长曝光时间
		    dataMap.put("week",task.getWeekWork());//每周工作天数
		    dataMap.put("shooting",task.getShooting1());//每天最多曝光
		    dataMap.put("other",task.getOther());//其他
		    
		    //查询任务下仪器
//		    String where = " and taskId='"+taskId+"' and deviceId is not null";
//		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
//		    logger.info("任务关联仪器数量="+taskDevices.size());
//		    
//		    ROMS_SZ_DEVICE device = null;
//		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
//		    for (int i = 0; i < taskDevices.size(); i++) {
//		    	device = taskDevices.get(i).getDevice();
//		    	//获取仪器
//		    	String deviceName = device.getDeviceName();
//		    	dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
//		    	
//		    	//判断仪器是否有编号，有的话就拼上
//		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
//		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
//				}
//		    	logger.info("仪器="+deviceName);
//		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
//		    	deviceData.setDevice(deviceName);
//		    	
//		    	deviceDatas.add(deviceData);
//			}
//		    //防止没有绑定仪器而文档无法打开
//		    if (taskDevices.size() == 0) {
//		    	dataMap.put("deviceLower","");//检测仪器探测下限
//		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
//		    	deviceData.setDevice("");
//		    	
//		    	deviceDatas.add(deviceData);
//			}
//		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //设备用途
		    String item22 = task.getItem2();
		    if (item22.equals("DR摄影")) {
		    	dataMap.put("s1","■");
		    	dataMap.put("s2","□");
				dataMap.put("s3","□");
				dataMap.put("s4","□");
			}else if (item22.equals("CR摄影")) {
				dataMap.put("s1","□");
				dataMap.put("s2","■");
				dataMap.put("s3","□");
				dataMap.put("s4","□");
			}else if (item22.equals("屏片摄影")) {
				dataMap.put("s1","□");
				dataMap.put("s2","□");
				dataMap.put("s3","■");
				dataMap.put("s4","□");
			}else if (item22.equals("直接透视")) {
				dataMap.put("s1","□");
				dataMap.put("s2","□");
				dataMap.put("s3","□");
				dataMap.put("s4","■");
			}else{
				dataMap.put("s1","□");
				dataMap.put("s2","□");
				dataMap.put("s3","□");
				dataMap.put("s4","□");
			}

		    //摄影模式
		    String item33 = task.getItem3();
		    if (item33.substring(0, 1).equals("1")) {
		    	dataMap.put("y1","■");
		    	dataMap.put("y11",task.getItem4());
		    	dataMap.put("y12",task.getItem5());
			}else{
				dataMap.put("y1","□");
				dataMap.put("y11","");
		    	dataMap.put("y12","");
			}
		    if (item33.substring(1, 2).equals("1")) {
		    	dataMap.put("y2","■");
		    	dataMap.put("y21",task.getItem6());
			}else{
				dataMap.put("y2","□");
				dataMap.put("y21","");
			}
		    
		    //透视模式
		    String item44 = task.getItem7();
		    if (item44.substring(0, 1).equals("1")) {
				dataMap.put("z1", "■");
				dataMap.put("z11", task.getItem8());
			}else{
				dataMap.put("z1","□");
				dataMap.put("z11","");
			}
		    if (item44.substring(1, 2).equals("1")) {
		    	dataMap.put("z2", "■");
				dataMap.put("z12", task.getItem9());
			}else{
				dataMap.put("z2","□");
				dataMap.put("z12","");
			}
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas2 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> points = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
//		    String data = task.getData();
//		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
//		    JSONObject a = null;
//			Object bean = null;
//			JSONArray array = JSONArray.fromObject(data);
//			Object[] objArray = array.toArray();
//			logger.info("测点数量="+objArray.length);
//			for (int i = 0; i < objArray.length; i++) {
//				a = JSONObject.fromObject(objArray[i]);
//				bean = JSONObject.toBean(a);
//				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
//				int type = Integer.parseInt((String) morphDynaBean.get("type"));
//				logger.info("0是本底测点，1是测点="+type);
//				String locationType = (String) morphDynaBean.get("locationType");
//				logger.info("射线照射方向="+locationType);
//				pieces = (String) morphDynaBean.get("pieces");
//				logger.info("单位="+pieces);
//				
//				if (type ==1) {
//					//获取数据
//					JSONArray jsonArray = a.getJSONArray("value");
//					Object[] objects = jsonArray.toArray();
//					logger.info("数据数量="+objects.length);
//					
//					pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
//					for (int j = 0; j < objects.length; j++) {
//						a = JSONObject.fromObject(objects[j]);
//						bean = JSONObject.toBean(a);
//						MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
//						String item1 = (String) morphDynaBean1.get("item1");
//						logger.info("item1="+item1);
//						String item2 = (String) morphDynaBean1.get("item2");
//						logger.info("item2="+item2);
//						String item3 = (String) morphDynaBean1.get("item3");
//						logger.info("item3="+item3);
//						String item4 = (String) morphDynaBean1.get("item4");
//						logger.info("item4="+item4);
//						String item5 = (String) morphDynaBean1.get("item5");
//						logger.info("item5="+item5);
//						String item6 = (String) morphDynaBean1.get("item6");
//						logger.info("item6="+item6);
//						String item7 = (String) morphDynaBean1.get("item7");
//						logger.info("item7="+item7);
//						String item8 = (String) morphDynaBean1.get("item8");
//						logger.info("item8="+item8);
//						String item9 = (String) morphDynaBean1.get("item9");
//						logger.info("item9="+item9);
//						String item10 = (String) morphDynaBean1.get("item10");
//						logger.info("item10="+item10);
//						
//
//							pointData = new ROMS_SZ_POINTDATA();
//							pointData.setV1(item1);
//							pointData.setV2(item2);
//							pointData.setV3(item3);
//							pointData.setV4(item4);
//							pointData.setV5(item5);
//							pointData.setV6(item6);
//							pointData.setV7(item7);
//							pointData.setV8(item8);
//							pointData.setV9(item9);
//							
//							pointDatas1.add(pointData);
//							
//							
//							String item55=task.getItem10();
//							if (item55.equals("摄影")) {
//								//规定pointDatas大小等于***就放入另外一个points
//								if (pointDatas1.size() == 15) {
//									pointData = new ROMS_SZ_POINTDATA();
//									if (locationType.length() >= 5) {
//										pointData.setItem1(locationType.substring(4, locationType.length()));
//									}else{
//										pointData.setItem1("");
//									}
//									pointData.setPointDatas(pointDatas1);
//									pointDatas.add(pointData);
//									
//									//把pointDatas重新置空
//									pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
//								}else if (j == objects.length-1) {
//									pointData = new ROMS_SZ_POINTDATA();
//									if (locationType.length() >= 5) {
//										pointData.setItem1(locationType.substring(4, locationType.length()));
//									}else{
//										pointData.setItem1("");
//									}
//									pointData.setPointDatas(pointDatas1);
//									pointDatas.add(pointData);
//								}
//							}else if (item55.equals("透视")) {
//								//规定pointDatas大小等于***就放入另外一个points
//								if (pointDatas1.size() == 15) {
//									pointData = new ROMS_SZ_POINTDATA();
//									if (locationType.length() >= 5) {
//										pointData.setItem1(locationType.substring(4, locationType.length()));
//									}else{
//										pointData.setItem1("");
//									}
//									pointData.setPointDatas(pointDatas1);
//									pointDatas.add(pointData);
//									
//									//把pointDatas重新置空
//									pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
//								}else if (j == objects.length-1) {
//									pointData = new ROMS_SZ_POINTDATA();
//									if (locationType.length() >= 5) {
//										pointData.setItem1(locationType.substring(4, locationType.length()));
//									}else{
//										pointData.setItem1("");
//									}
//									pointData.setPointDatas(pointDatas1);
//									pointDatas.add(pointData);
//								}
//							}
//							
//							
//							
//
//					}
//					
//					//补空值
//					if (objects.length == 0) {
//						if (type == 1) {
//							pointData = new ROMS_SZ_POINTDATA();
//							pointData.setV1("");
//							pointData.setV2("");
//							pointData.setV3("");
//							pointData.setV4("");
//							pointData.setV5("");
//							pointData.setV6("");
//							pointData.setV7("");
//							pointData.setV8("");
//							pointData.setV9("");
//							
//							pointDatas1.add(pointData);
//						}
//					}
//				}	
//			}
		    
		    	String item10="透视";
		    	String locationType="";
		    if (item10.equals("摄影")) {
				for (int i = 0; i < 20; i++) {
					pointData = new ROMS_SZ_POINTDATA();
					pointData.setV1("");
					pointData.setV2("");
					pointData.setV3("");
					pointData.setV4("");
					pointData.setV5("");
					pointData.setV6("");
					pointData.setV7("");
					pointData.setV8("");
					pointData.setV9("");			
					pointDatas1.add(pointData);
					
					//规定pointDatas大小等于***就放入另外一个points
					if (pointDatas1.size() == 15) {
						pointData = new ROMS_SZ_POINTDATA();
						if (locationType.length() >= 5) {
							pointData.setItem1(locationType.substring(4, locationType.length()));
						}else{
							pointData.setItem1("");
						}
						pointData.setPointDatas(pointDatas1);
						pointDatas.add(pointData);
						//把pointDatas重新置空
						pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
					}else if (i == 20-1) {
						pointData = new ROMS_SZ_POINTDATA();
						if (locationType.length() >= 5) {
							pointData.setItem1(locationType.substring(4, locationType.length()));
						}else{
							pointData.setItem1("");
						}
						pointData.setPointDatas(pointDatas1);
						pointDatas.add(pointData);
					}
				}
			}else if (item10.equals("透视")) {
				
				for (int i = 0; i < 20; i++) {  
					pointData = new ROMS_SZ_POINTDATA();
					pointData.setV1(i+"");
					pointData.setV2("");
					pointData.setV3("");
					pointData.setV4("");
					pointData.setV5("");
					pointData.setV6("");
					pointData.setV7("");
					pointData.setV8("");
					pointData.setV9("");			
					pointDatas1.add(pointData);
					
					//规定pointDatas大小等于***就放入另外一个points1
					if (pointDatas1.size() == 15) {
						logger.info("======="+pointDatas1.size());
						pointData = new ROMS_SZ_POINTDATA();
						if (locationType.length() >= 5) {
							pointData.setItem1(locationType.substring(4, locationType.length()));
						}else{
							pointData.setItem1("");
						}
						pointData.setPointDatas(pointDatas1);
						pointDatas2.add(pointData);
						
						//把pointDatas重新置空
						pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
					}else if (i == 20-1) {
						logger.info("======="+pointDatas1.size());
						pointData = new ROMS_SZ_POINTDATA();
						if (locationType.length() >= 5) {
							pointData.setItem1(locationType.substring(4, locationType.length()));
						}else{
							pointData.setItem1("");
						}
						pointData.setPointDatas(pointDatas1);
						pointDatas2.add(pointData);
					}
				}
			}
			dataMap.put("device", "device");
		    dataMap.put("v1","v1");
		    dataMap.put("v2","v2");
		    dataMap.put("v3","v3");
		    dataMap.put("v4","v4");
		    dataMap.put("v5","v5");
		    dataMap.put("v6","v6");
		    dataMap.put("v7","v7");
		    dataMap.put("v8","v8");
		    dataMap.put("v9","v9");
		    dataMap.put("item10",item10);
		    dataMap.put("item1","up_up_up");
		    
			dataMap.put("pieces",pieces);//单位
			
			logger.info("页数="+pointDatas.size());
			//判断是否有数据
			if (pointDatas.size() > 0) {
				dataMap.put("points1", pointDatas2);//透视数据
				dataMap.put("points",pointDatas);//摄影数据
			}else{
				dataMap.put("points1",pointDatas2);//透视数据
				dataMap.put("points", pointDatas);//摄影数据  
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
			
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/493.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
				 File f2 = new File(path);
			     File s2[] = f2.listFiles();
			     for(int j=0;j<s2.length;j++) {
			    	 String name=s2[j].getName();
			    	 if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    		 s2[j].delete();
			    	 }
			     }
				     
				  //传docx地址转PDF
			     String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
				 logger.info(cmd);
				 cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		return url;
	}
	

	
	/**
	 * 生成编号为495的原始数据表
	 * @return
	 */
	public String upload_495_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_495_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//X射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("volt",task.getVoltageRange1());//常用最大管电压
		    dataMap.put("current",task.getCurrent1());//常用最大管电流
		    dataMap.put("expos",task.getExposureTimeRange1());//单次最长曝光时间
		    dataMap.put("week",task.getWeekWork());//每周工作天数
		    dataMap.put("shooting",task.getShooting1());//每天最多曝光
		    dataMap.put("other",task.getOther());//其他
		    
		    //查询任务下仪器
//		    String where = " and taskId='"+taskId+"' and deviceId is not null";
//		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
//		    logger.info("任务关联仪器数量="+taskDevices.size());
//		    
//		    ROMS_SZ_DEVICE device = null;
//		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
//		    for (int i = 0; i < taskDevices.size(); i++) {
//		    	device = taskDevices.get(i).getDevice();
//		    	dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
//		    	//获取仪器
//		    	String deviceName = device.getDeviceName();
//		    	//判断仪器是否有编号，有的话就拼上
//		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
//		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
//				}
//		    	logger.info("仪器="+deviceName);
//		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
//		    	deviceData.setDevice(deviceName);
//		    	
//		    	deviceDatas.add(deviceData);
//			}
		    //防止没有绑定仪器而文档无法打开
//		    if (taskDevices.size() == 0) {
//		    	dataMap.put("deviceLower","");//检测仪器探测下限
//		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
//		    	deviceData.setDevice("");
//		    	
//		    	deviceDatas.add(deviceData);
//			}
//		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //设备用途
		    String item2="111";
		    for (int i = 0; i < 3; i++) {
		    	if (item2.substring(i, i+1).equals("1")) {
			    	dataMap.put("s"+(i+1),"■");
				}else{
					dataMap.put("s"+(i+1),"□");
				}
			}
		    
		   //射线照射方向
			dataMap.put("item3",task.getItem3());
			dataMap.put("item4",task.getItem4());
			dataMap.put("item5",task.getItem5());
		    

		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
//		    String data = task.getData();
//		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
//		    JSONObject a = null;
//			Object bean = null;
//			JSONArray array = JSONArray.fromObject(data);
//			Object[] objArray = array.toArray();
//			logger.info("测点数量="+objArray.length);
//			for (int i = 0; i < objArray.length; i++) {
//				a = JSONObject.fromObject(objArray[i]);
//				bean = JSONObject.toBean(a);
//				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
//				int type = Integer.parseInt((String) morphDynaBean.get("type"));
//				logger.info("0是本底测点，1是测点="+type);
//				String locationType = (String) morphDynaBean.get("locationType");
//				logger.info("射线照射方向="+locationType);
//				
//				//获取数据
//				JSONArray jsonArray = a.getJSONArray("value");
//				Object[] objects = jsonArray.toArray();
//				logger.info("数据数量="+objects.length);
//				
//				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
//				for (int j = 0; j < objects.length; j++) {
//					a = JSONObject.fromObject(objects[j]);
//					bean = JSONObject.toBean(a);
//					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
//					String item1 = (String) morphDynaBean1.get("item1");
//					logger.info("item1="+item1);
//					String item2 = (String) morphDynaBean1.get("item2");
//					logger.info("item2="+item2);
//					String item3 = (String) morphDynaBean1.get("item3");
//					logger.info("item3="+item3);
//					String item4 = (String) morphDynaBean1.get("item4");
//					logger.info("item4="+item4);
//					String item5 = (String) morphDynaBean1.get("item5");
//					logger.info("item5="+item5);
//					String item6 = (String) morphDynaBean1.get("item6");
//					logger.info("item6="+item6);
//					String item7 = (String) morphDynaBean1.get("item7");
//					logger.info("item7="+item7);
//					String item8 = (String) morphDynaBean1.get("item8");
//					logger.info("item8="+item8);
//					
//					if (type == 0) {
//						pieces = (String) morphDynaBean1.get("pieces");
//						logger.info("单位="+pieces);
//						String item9 = (String) morphDynaBean1.get("item9");
//						logger.info("标准差="+item9);
//						
//						dataMap.put("b_v1",item1);
//						dataMap.put("b_v2",item2);
//						dataMap.put("b_v3",item3);
//						dataMap.put("b_v4",item4);
//						dataMap.put("b_v5",item5);
//						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
//						dataMap.put("b_avg",item8+"±"+item9);//平均值
//					}else{
//						pointData = new ROMS_SZ_POINTDATA();
//						pointData.setV1(item1);
//						pointData.setV2(item2);
//						pointData.setV3(item3);
//						pointData.setV4(item4);
//						pointData.setV5(item5);
//						pointData.setV6(item6);
//						pointData.setV7(item7);
//						pointData.setV8(item8);
//						
//						pointDatas1.add(pointData);
//						
//						//规定pointDatas大小等于***就放入另外一个points
//						if (pointDatas1.size() == 15) {
//							pointData = new ROMS_SZ_POINTDATA();
//							if (locationType.length() >= 5) {
//								pointData.setItem1(locationType.substring(locationType.indexOf(":")+1, locationType.length()));
//							}else{
//								pointData.setItem1("");
//							}
//							pointData.setPointDatas(pointDatas1);
//							pointDatas.add(pointData);
//							
//							//把pointDatas重新置空
//							pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
//						}else if (j == objects.length-1) {
//							pointData = new ROMS_SZ_POINTDATA();
//							if (locationType.length() >= 5) {
//								pointData.setItem1(locationType.substring(locationType.indexOf(":")+1, locationType.length()));
//							}else{
//								pointData.setItem1("");
//							}
//							pointData.setPointDatas(pointDatas1);
//							pointDatas.add(pointData);
//						}
//					}
//				}
//				
//				//补空值
//				if (objects.length == 0) {
//					if (type == 0) {
//						dataMap.put("b_v1","");
//						dataMap.put("b_v2","");
//						dataMap.put("b_v3","");
//						dataMap.put("b_v4","");
//						dataMap.put("b_v5","");
//						dataMap.put("range","~");//范围（最小值+最大值）
//						dataMap.put("b_avg","±");//平均值
//					}else{
//						pointData = new ROMS_SZ_POINTDATA();
//						pointData.setV1("");
//						pointData.setV2("");
//						pointData.setV3("");
//						pointData.setV4("");
//						pointData.setV5("");
//						pointData.setV6("");
//						pointData.setV7("");
//						pointData.setV8("");
//						
//						pointDatas1.add(pointData);
//					}
//				}
//			}
		    
		    	int type=1;
		    	
		    	//规定pointDatas大小等于***就放入另外一个points
				for (int i = 0; i < 10; i++) {
					pointData = new ROMS_SZ_POINTDATA();
					pointData.setV1("");
					pointData.setV2("");
					pointData.setV3("");
					pointData.setV4("");
					pointData.setV5("");
					pointData.setV6("");
					pointData.setV7("");
					pointData.setV8("");
					pointData.setV9("");
					pointDatas1.add(pointData);
					if (pointDatas1.size() == 15) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas1);
						pointDatas.add(pointData);
						logger.info("15=="+pointDatas1.size());
						//把pointDatas重新置空
						pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
					}else if (i == 20-1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas1);
						pointDatas.add(pointData);
						logger.info("5=="+pointDatas1.size());
					}
				}
				logger.info("for:::"+pointDatas.size());
				
		    dataMap.put("device", "device");
		    dataMap.put("b_v1","");
			dataMap.put("b_v2","");
			dataMap.put("b_v3","");
			dataMap.put("b_v4","");
			dataMap.put("b_v5","");
			dataMap.put("range","");//范围（最小值+最大值）
			dataMap.put("b_avg","");//平均值
			dataMap.put("item1", "item1");//射线照射方向
			dataMap.put("pieces",pieces);//单位
			for (int i =1; i <= 9; i++) {
				dataMap.put("v"+i,"");
			}
			
			//判断是否有数据
			if (pointDatas.size() > 0) {
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("points",pointDatas);//数据
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("points",pointDatas);//数据
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/495.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	
	
	/**
	 * 生成编号为497的原始数据表
	 * @return
	 */
	public String upload_497_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_497_docx()函数");
		
		String url = "";
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("carNum",task.getCarNum());//受检车牌号码
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("xRayNum",task.getxRayNum());//X射线管编号
		    dataMap.put("nominalCapacity",task.getNominalCapacity());//额定容量
		    dataMap.put("conditions",task.getConditions());//检测条件
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度
		    dataMap.put("other",task.getOther());//其他
		    
		    //查询任务下仪器
//		    String where = " and taskId='"+taskId+"' and deviceId is not null";
//		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
//		    logger.info("任务关联仪器数量="+taskDevices.size());
//		    
//		    ROMS_SZ_DEVICE device = null;
//		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
//		    for (int i = 0; i < taskDevices.size(); i++) {
//		    	device = taskDevices.get(i).getDevice();
//		    	dataMap.put("deviceLower",device.getDeviceLower());//检测仪器探测下限
//		    	//获取仪器
//		    	String deviceName = device.getDeviceName();
//		    	//判断仪器是否有编号，有的话就拼上
//		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
//		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
//				}
//		    	logger.info("仪器="+deviceName);
//		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
//		    	deviceData.setDevice(deviceName);
//		    	
//		    	deviceDatas.add(deviceData);
//			}
		    //防止没有绑定仪器而文档无法打开
//		    if (taskDevices.size() == 0) {
//		    	dataMap.put("deviceLower","");//检测仪器探测下限
//		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
//		    	deviceData.setDevice("");
//		    	
//		    	deviceDatas.add(deviceData);
//			}
//		    dataMap.put("deviceDatas",deviceDatas);//仪器
//		    
//		    //设备用途
//		    String item22 = task.getItem2();
		    String item22 = "111111";
		    for (int i = 0; i < 4; i++) {
		    	if (item22.substring(i, i+1).equals("1")) {
			    	dataMap.put("s"+(i+1),"■");
				}else{
					dataMap.put("s"+(i+1),"□");
				}
			}  
		    //射线照射方向
//		    dataMap.put("item5", task.getItem5());
		    
		    
		    //解析测点和数据json
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    
		    String data = task.getData();
		    logger.info("任务测点json="+data);
		    
		    String pieces = "";
//		    JSONObject a = null;
//			Object bean = null;
//			JSONArray array = JSONArray.fromObject(data);
//			Object[] objArray = array.toArray();
//			logger.info("测点数量="+objArray.length);
//			for (int i = 0; i < objArray.length; i++) {
//				a = JSONObject.fromObject(objArray[i]);
//				bean = JSONObject.toBean(a);
//				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
//				int type = Integer.parseInt((String) morphDynaBean.get("type"));
//				logger.info("0是本底测点，1是测点="+type);
//				String locationType = (String) morphDynaBean.get("locationType");
//				logger.info("射线照射方向="+locationType);
//				
//				//获取数据
//				JSONArray jsonArray = a.getJSONArray("value");
//				Object[] objects = jsonArray.toArray();
//				logger.info("数据数量="+objects.length);
//				
//				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
//				for (int j = 0; j < objects.length; j++) {
//					a = JSONObject.fromObject(objects[j]);
//					bean = JSONObject.toBean(a);
//					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
//					String item1 = (String) morphDynaBean1.get("item1");
//					logger.info("item1="+item1);
//					String item2 = (String) morphDynaBean1.get("item2");
//					logger.info("item2="+item2);
//					String item3 = (String) morphDynaBean1.get("item3");
//					logger.info("item3="+item3);
//					String item4 = (String) morphDynaBean1.get("item4");
//					logger.info("item4="+item4);
//					String item5 = (String) morphDynaBean1.get("item5");
//					logger.info("item5="+item5);
//					String item6 = (String) morphDynaBean1.get("item6");
//					logger.info("item6="+item6);
//					String item7 = (String) morphDynaBean1.get("item7");
//					logger.info("item7="+item7);
//					String item8 = (String) morphDynaBean1.get("item8");
//					logger.info("item8="+item8);
//					
//					if (type == 0) {
//						pieces = (String) morphDynaBean1.get("pieces");
//						logger.info("单位="+pieces);
//						String item9 = (String) morphDynaBean1.get("item9");
//						logger.info("标准差="+item9);
//						
//						dataMap.put("b_v1",item1);
//						dataMap.put("b_v2",item2);
//						dataMap.put("b_v3",item3);
//						dataMap.put("b_v4",item4);
//						dataMap.put("b_v5",item5);
//						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
//						dataMap.put("b_avg",item8+"±"+item9);//平均值
//					}else{
//						pointData = new ROMS_SZ_POINTDATA();
//						pointData.setV1(item1);
//						pointData.setV2(item2);
//						pointData.setV3(item3);
//						pointData.setV4(item4);
//						pointData.setV5(item5);
//						pointData.setV6(item6);
//						pointData.setV7(item7);
//						pointData.setV8(item8);
//						
//						pointDatas1.add(pointData);
//						
//						//规定pointDatas大小等于***就放入另外一个points
//						if (pointDatas1.size() == 15) {
//							pointData = new ROMS_SZ_POINTDATA();
//							if (locationType.length() >= 5) {
//								pointData.setItem1(locationType.substring(locationType.indexOf(":")+1, locationType.length()));
//							}else{
//								pointData.setItem1("");
//							}
//							pointData.setPointDatas(pointDatas1);
//							pointDatas.add(pointData);
//							
//							//把pointDatas重新置空
//							pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
//						}else if (j == objects.length-1) {
//							pointData = new ROMS_SZ_POINTDATA();
//							if (locationType.length() >= 5) {
//								pointData.setItem1(locationType.substring(locationType.indexOf(":")+1, locationType.length()));
//							}else{
//								pointData.setItem1("");
//							}
//							pointData.setPointDatas(pointDatas1);
//							pointDatas.add(pointData);
//						}
//					}
//				}
//				
//				//补空值
//				if (objects.length == 0) {
//					if (type == 0) {
//						dataMap.put("b_v1","");
//						dataMap.put("b_v2","");
//						dataMap.put("b_v3","");
//						dataMap.put("b_v4","");
//						dataMap.put("b_v5","");
//						dataMap.put("range","~");//范围（最小值+最大值）
//						dataMap.put("b_avg","±");//平均值
//					}else{
//						pointData = new ROMS_SZ_POINTDATA();
//						pointData.setV1("");
//						pointData.setV2("");
//						pointData.setV3("");
//						pointData.setV4("");
//						pointData.setV5("");
//						pointData.setV6("");
//						pointData.setV7("");
//						pointData.setV8("");
//						
//						pointDatas1.add(pointData);
//					}
//				}
//			}
			
				//模拟数据
		    	int type=1;
		    	String locationType="";
		    	for (int i = 0; i < 20; i++) {
		    		if (type == 1) {
		    			pointData = new ROMS_SZ_POINTDATA();
			 			pointData.setV1("1");
			 			pointData.setV2("1");
			 			pointData.setV3("1");
			 			pointData.setV4("1");
			 			pointData.setV5("1");
			 			pointData.setV6("1");
			 			pointData.setV7("1");
			 			pointData.setV8("1");
			 			pointDatas1.add(pointData);
					}else {
						pointData = new ROMS_SZ_POINTDATA();
			 			pointData.setV1("2");
			 			pointData.setV2("2");
			 			pointData.setV3("2");
			 			pointData.setV4("2");
			 			pointData.setV5("2");
			 			pointData.setV6("2");
			 			pointData.setV7("2");
			 			pointData.setV8("2");
			 			pointDatas1.add(pointData);
					}
		    		
		 			if (pointDatas1.size() == 15) {
		 				pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas1);
						pointDatas.add(pointData);
						logger.info("15=="+pointDatas1.size());
						pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
					}else if (i == 20-1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas1);
						pointDatas.add(pointData);
						logger.info("5=="+pointDatas1.size());
					}
				}
		    dataMap.put("deviceLower","deviceLower");
		    dataMap.put("device","device");
		    dataMap.put("item1","up");
		    dataMap.put("item5","down");
		    dataMap.put("b_v1","");
			dataMap.put("b_v2","");
			dataMap.put("b_v3","");
			dataMap.put("b_v4","");
			dataMap.put("b_v5","");
			dataMap.put("range","~");//范围（最小值+最大值）
			dataMap.put("b_avg","±");//平均值
//			for (int i = 1; i < 10; i++) {
//				dataMap.put("v"+i,i);
//			}
			
			dataMap.put("pieces",pieces);//单位
			//判断是否有数据
			if (pointDatas.size() > 0) {
				dataMap.put("pointDatas2",pointDatas.get(pointDatas.size()-1).getPointDatas());//数据2
				//删除最后一条数据，因为已经单独赋值给另外一个list去循环了
				pointDatas.remove(pointDatas.size()-1);
				dataMap.put("points",pointDatas);//数据
			}else{
				dataMap.put("pointDatas2",pointDatas1);//数据2
				dataMap.put("points",pointDatas);//数据
			}
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int i = 0; i < 3; i++) {
					dataMap.put("record"+i,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int i = 0; i < recordUrl.length; i++) {
					dataMap.put("record"+i, getImageStr(pas+recordUrl[i]));
				}
				//如果人数不够就插空白图片
				for (int i = recordUrl.length; i < 3; i++) {
					dataMap.put("record"+i, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/497.ftl",paths);

			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		     //往原始记录文件夹里再存一份
		      String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
				System.out.println("原始记录表文件夹路径=" + pass1);
				File dir1 = new File(pass1);
				if (!dir1.exists()){
					dir1.mkdirs();// 创建个文件夹
				}
				File f1 = new File(pass1);
		    	File s1[] = f1.listFiles();
		    	for(int j=0;j<s1.length;j++) {
		    		String name=s1[j].getName();
		    		if(taskauth.getTemplate().getNum().equals(name)){
		    			s1[j].delete();
		    		}
		    	}
		    	// 输出文档路径及名称
			     outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			     logger.info("文档路径及名称="+outFile);
			     
			     WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			     wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			     logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
					File f2 = new File(path);
			    	File s2[] = f2.listFiles();
			    	for(int j=0;j<s2.length;j++) {
			    		String name=s2[j].getName();
			    		if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
			    			s2[j].delete();
			    		}
			    	}
				     
				   //传docx地址转PDF
			    	String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
					logger.info(cmd);
					cmdRun(cmd);
					
		     //获取web.xml配置的一个默认地址
		      String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		      //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		     url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		     logger.info("返回下载地址="+url);
		     
		     logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}
	
	
	
	
	/**
	 * 生成编号为508的原始数据表
	 * @return
	 */
	public String upload_508_docx(String taskId,ROMS_SZ_TASKAUTH taskauth){
		org.apache.log4j.Logger logger = org.apache.log4j.Logger
		.getLogger(ROMS_SZ_TASKAction.class);
		logger.info("upload_508_docx()函数");
		
		String url = ""; 
		try {
			ROMS_SZ_TASK task = romssztaskService.query(taskId);
			
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat y_sdf=new SimpleDateFormat("yyyy");//年
			SimpleDateFormat M_sdf=new SimpleDateFormat("MM");//月
			SimpleDateFormat d_sdf=new SimpleDateFormat("dd");//日
			
			String datetime = y_sdf.format(task.getCreatetime())+"年"+
		    M_sdf.format(task.getCreatetime())+"月"+
		    d_sdf.format(task.getCreatetime())+"日";
			
			//检测依据
			String standard = "";
			if (task.getStandard() != null) {
				String standard1 = task.getStandard();
			    String[] standardObject = standard1.substring(1, standard1.length()).split("\\|");
			    for (int i = 0; i < standardObject.length; i++) {
					if (i != 0) {
						standard += "，";
					}
					standard += standardObject[i].substring(standardObject[i].indexOf("》")+1,standardObject[i].length());
				}
			}
			
			// 要填充的数据, 注意map的key要和word中${xxx}的xxx一致
		    Map<String,Object> dataMap = new HashMap<String,Object>();
		    dataMap.put("projectNum",task.getProjectNum());//项目编号
		    dataMap.put("checkUnitName",task.getCheckUnitName());//受检单位名称
		    dataMap.put("checkUnitAddress",task.getCheckUnitAddress());//受检单位地址
		    dataMap.put("monitorType",task.getMonitorType());//检测类型
		    dataMap.put("standard",standard);//检测依据
		    dataMap.put("address",task.getAddress());//检测地点
		    dataMap.put("testingProject",task.getTestingProject());//检测项目
		    dataMap.put("place",task.getPlace());//检测场所
		    dataMap.put("checkDeviceName",task.getCheckDeviceName());//受检设备名称
		    dataMap.put("checkDeviceNum",task.getCheckDeviceNum());//受检设备编号
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("factor",task.getFactor());//137Cs校准因子
		    dataMap.put("time",datetime);//检测日期
		    dataMap.put("tem",task.getTemperature());//温度
		    dataMap.put("hum",task.getHumidity());//湿度   
		    dataMap.put("other",task.getOther());//其他
		    dataMap.put("nuclideName",task.getNuclideName());//核素名称
		    dataMap.put("currentActivity",task.getCurrentActivity());//核素出厂活度
		    dataMap.put("nuclideTime",sdf.format(task.getNuclideTime()));//核素出厂日期
		    dataMap.put("nuclideNum",task.getNuclideNum());//核素编码
		    dataMap.put("nuclideVender",task.getNuclideVender());//核素生产厂家
		    dataMap.put("checkDeviceModel",task.getCheckDeviceModel());//受检设备型号
		    dataMap.put("checkDeviceVender",task.getCheckDeviceVender());//受检设备厂家
		    dataMap.put("deviceFactor",task.getDeviceFactor());//检测仪器校准因子
		    dataMap.put("item3",task.getItem3());
		    
		    //设备用途
		    String item22 = task.getItem3();
		    for (int i = 0; i < 6; i++) {
		    	if (item22.substring(i, i+1).equals("1")) {  
			    	dataMap.put("s"+(i+1),"■");
				}else{
					dataMap.put("s"+(i+1),"□");
				}
			}
		    
		    //查询任务下仪器
//		    String where = " and taskId='"+taskId+"' and deviceId is not null";
//		    List<ROMS_SZ_TASKDEVICE> taskDevices = romssztaskdeviceService.queryWhereList(where);
//		    logger.info("任务关联仪器数量="+taskDevices.size());
//		    
//		    ArrayList<ROMS_SZ_DEVICEDATA> deviceDatas = new ArrayList<ROMS_SZ_DEVICEDATA>();
//		    ROMS_SZ_DEVICE device = null;
//		    for (int i = 0; i < taskDevices.size(); i++) {
//		    	device = taskDevices.get(i).getDevice();
//		    	//获取仪器
//		    	String deviceName = device.getDeviceName();
//		    	//判断仪器是否有编号，有的话就拼上
//		    	if (!taskDevices.get(i).getDevice().getDeviceNum().equals("")) {
//		    		deviceName = device.getDeviceName()+"/"+device.getDeviceModel()+"/"+device.getDeviceNum();
//				}
//		    	logger.info("仪器="+deviceName);
//		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
//		    	deviceData.setDevice(deviceName);
//		    	
//		    	deviceDatas.add(deviceData);
//			}
//		    //防止没有绑定仪器而文档无法打开
//		    if (taskDevices.size() == 0) {
//		    	ROMS_SZ_DEVICEDATA deviceData = new ROMS_SZ_DEVICEDATA();
//		    	deviceData.setDevice("");
//		    	
//		    	deviceDatas.add(deviceData);
//			}
//		    dataMap.put("deviceDatas",deviceDatas);//仪器
		    
		    //解析测点和数据json
		    ROMS_SZ_POINTDATA pointData = new ROMS_SZ_POINTDATA();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
		    ArrayList<ROMS_SZ_POINTDATA> pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();//最后一次循环放的（最后一页的数据）
		    ArrayList<ROMS_SZ_POINTDATA> points = new ArrayList<ROMS_SZ_POINTDATA>();
		    ROMS_SZ_POINTDATA point = new ROMS_SZ_POINTDATA();   //用来模拟测试
		    
//		    String data = task.getData();
//		    logger.info("任务测点json="+data);
//		    
		    String pieces = "";
//		    JSONObject a = null;
//			Object bean = null;
//			JSONArray array = JSONArray.fromObject(data);
//			Object[] objArray = array.toArray();
//			logger.info("测点数量="+objArray.length);
//			for (int i = 0; i < objArray.length; i++) {
//				a = JSONObject.fromObject(objArray[i]);
//				bean = JSONObject.toBean(a);
//				MorphDynaBean morphDynaBean = (MorphDynaBean) bean;
//				int type = Integer.parseInt((String) morphDynaBean.get("type"));
//				logger.info("0是本底测点，1是测点="+type);
//				
//				//获取数据
//				JSONArray jsonArray = a.getJSONArray("value");
//				Object[] objects = jsonArray.toArray();
//				logger.info("数据数量="+objects.length);
//				
//				for (int j = 0; j < objects.length; j++) {
//					a = JSONObject.fromObject(objects[j]);
//					bean = JSONObject.toBean(a);
//					MorphDynaBean morphDynaBean1 = (MorphDynaBean) bean;
//					String item1 = (String) morphDynaBean1.get("item1");
//					logger.info("item1="+item1);
//					String item2 = (String) morphDynaBean1.get("item2");
//					logger.info("item2="+item2);
//					String item3 = (String) morphDynaBean1.get("item3");
//					logger.info("item3="+item3);
//					String item4 = (String) morphDynaBean1.get("item4");
//					logger.info("item4="+item4);
//					String item5 = (String) morphDynaBean1.get("item5");
//					logger.info("item5="+item5);
//					String item6 = (String) morphDynaBean1.get("item6");
//					logger.info("item6="+item6);
//					String item7 = (String) morphDynaBean1.get("item7");
//					logger.info("item7="+item7);
//					String item8 = (String) morphDynaBean1.get("item8");
//					logger.info("item8="+item8);
//					pieces = (String) morphDynaBean1.get("pieces");
//					logger.info("单位="+pieces);
//					
//					if (type == 0) {
//						String item9 = (String) morphDynaBean1.get("item9");
//						logger.info("标准差="+item9);
//						
//						dataMap.put("b_v1",item1);
//						dataMap.put("b_v2",item2);
//						dataMap.put("b_v3",item3);
//						dataMap.put("b_v4",item4);
//						dataMap.put("b_v5",item5);
//						dataMap.put("range",item6+"~"+item7);//范围（最小值+最大值）
//						dataMap.put("b_avg",item8+"±"+item9);//平均值+标准差
//					}else{
//						pointData = new ROMS_SZ_POINTDATA();
//						pointData.setP(item1);
//						pointData.setDepict(item2);
//						pointData.setV1(item3);
//						pointData.setV2(item4);
//						pointData.setV3(item5);
//						pointData.setAvg(item6);
//						pointData.setDocv(item7);
//						pointData.setBzc(item8);
//						
//						pointDatas.add(pointData);
//						
//						//规定pointDatas大小等于***就放入另外一个points
//						if (pointDatas.size() == 15) {
//							pointData = new ROMS_SZ_POINTDATA();
//							pointData.setPointDatas(pointDatas);
//							points.add(pointData);
//							
//							//把pointDatas重新置空
//							pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
//						}else if (j == objects.length-1) {
//							//最后一次循环（因为最后数量是不确定的）就放入另外一个points
//							pointDatas1 = pointDatas;
//						}
//					}
//				}  
//				
//				//补空值
//				if (objects.length == 0) {
//					if (type == 0) {
//						dataMap.put("b_v1","");
//						dataMap.put("b_v2","");
//						dataMap.put("b_v3","");
//						dataMap.put("b_v4","");
//						dataMap.put("b_v5","");
//						dataMap.put("range","~");//范围（最小值+最大值）
//						dataMap.put("b_avg","");//平均值+标准差
//					}else{
//						pointData = new ROMS_SZ_POINTDATA();
//						pointData.setP("");
//						pointData.setDepict("");
//						pointData.setV1("");
//						pointData.setV2("");
//						pointData.setV3("");
//						pointData.setAvg("");
//						pointData.setDocv("");
//						pointData.setBzc("");
//						pointDatas1.add(pointData);
//					}
//				}
//			}
		    
		    
			
			dataMap.put("b_v1","");
			dataMap.put("b_v2","");
			dataMap.put("b_v3","");
			dataMap.put("b_v4","");
			dataMap.put("b_v5","");
			dataMap.put("range","~");//范围（最小值+最大值）
			dataMap.put("b_avg","±");//平均值
	
				pointDatas1 = new ArrayList<ROMS_SZ_POINTDATA>();
				for (int j = 0; j < 20; j++) {
					pointData = new ROMS_SZ_POINTDATA();
					pointData.setP("");
					pointData.setDepict("");
					pointData.setV1("");
					pointData.setV2("");
					pointData.setV3("");
					pointData.setAvg("");
					pointData.setDocv("");
					pointData.setBzc("");
					
					pointDatas.add(pointData);
					
					//规定pointDatas大小等于***就放入另外一个points
					pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
					if (pointDatas1.size() == 15) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas1);
						pointDatas.add(pointData);
						
						//把pointDatas重新置空
						pointDatas = new ArrayList<ROMS_SZ_POINTDATA>();
					}else if (j == 20-1) {
						pointData = new ROMS_SZ_POINTDATA();
						pointData.setPointDatas(pointDatas);
						pointDatas.add(pointData);
					}
				}
//			}
	
		

			dataMap.put("device","");
			dataMap.put("p","");
			dataMap.put("depict","");
			dataMap.put("v1","");
			dataMap.put("v2","");
			dataMap.put("v3","");
			dataMap.put("avg","");
			dataMap.put("bzc","");
			dataMap.put("docv","");
			
			//保证最后数据的list是有值的
			if (pointDatas1.size() == 0 && pointDatas.size() != 0) {
				dataMap.put("pointDatas1",pointDatas.get(pointDatas.size()-1).getPointDatas());//最后一页数据
				//把最后一个对象数据赋给另外一个list，然后把最后一个数据删除
				pointDatas.remove(pointDatas.get(pointDatas.size()-1));
			}else{
				dataMap.put("pointDatas1",pointDatas1);//最后一页数据
			}
			dataMap.put("pieces",pieces);//单位
			dataMap.put("points",pointDatas);//数据
			logger.info("====="+JSONObject.fromObject(dataMap));
			
			String path = ServletActionContext.getServletContext().getRealPath(
					uploadDir)+"/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum();
			System.out.println("服务器路径=" + path);
			File dir = new File(path);
			if (!dir.exists()){
				dir.mkdirs();// 创建个文件夹
			}
			File f = new File(path);
	    	File s[] = f.listFiles();
	    	for(int j=0;j<s.length;j++) {
	    		String name=s[j].getName();
	    		//删除同名的重测任务
	    		if (name.equals(taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx")) {
	    			s[j].delete();
				}
	    		if(name.equals(taskauth.getTemplate().getNum()+".docx")){
	    			//s[j].delete();
	    			String rootPath = s[j].getParent();
	    			System.out.println("根路径是："+rootPath);
	    			File newFile = new File(rootPath+File.separator+taskauth.getTemplate().getNum()+"-"+task.getNoPass()+".docx");
	    			System.out.println("修改后文件名称是："+newFile.getName());
    			    if (s[j].renameTo(newFile)){
    			    	System.out.println("修改成功!");
    			    }else{
    			    	System.out.println("修改失败");
    			    }
	    		}
	    	}
			File outFile = null;
			
			String pas = ServletActionContext.getServletContext().getRealPath(
					"");
			//判断图片路径是否为空，为空就不上传
			if (task.getPointUrl() == null || task.getPointUrl().length() == 0) {
				dataMap.put("point", getImageStr(pas+white));
			}else{
				//点位图
				dataMap.put("point", getImageStr(pas+task.getPointUrl()));
			}
			if (task.getRecordUrl() == null || task.getRecordUrl().length() == 0) {
				for (int k = 0; k < 3; k++) {
					dataMap.put("record"+k,getImageStr(pas+white));
				}
			}else{
				//检测人签名照
				String[] recordUrl = task.getRecordUrl().substring(1, task.getRecordUrl().length() - 1).split("\\|");
				logger.info("检测人数量="+recordUrl.length);
				for (int k = 0; k < recordUrl.length; k++) {
					dataMap.put("record"+k, getImageStr(pas+recordUrl[k]));
				}
				//如果人数不够就插空白图片
				for (int k = recordUrl.length; k < 3; k++) {
					dataMap.put("record"+k, getImageStr(pas+white));
				}
			}
			if (task.getCheckUrl() == null || task.getCheckUrl().length() == 0) {
				dataMap.put("check",getImageStr(pas+white));
			}else{
				//复核人签名照
				String[] checkUrl = task.getCheckUrl().substring(1, task.getCheckUrl().length() - 1).split("\\|");
				logger.info("复核人数量="+checkUrl.length);
				dataMap.put("check", getImageStr(pas+checkUrl[0]));
			}
			if (task.getUnitUrl() == null || task.getUnitUrl().length() == 0) {
				dataMap.put("unit",getImageStr(pas+white));
			}else{
				//受检单位人签名照
				dataMap.put("unit", getImageStr(pas+task.getUnitUrl()));
			}
		    
			String paths = ServletActionContext.getServletContext().getRealPath(
					uploadDir);
			logger.info("ftl文件存放路径=" + paths);
			
			File resumeFile = ToDocxWord.createDoc(path+"/"+taskauth.getTemplate().getNum()+".xml", dataMap, "/508.ftl",paths);
			logger.info("XML:"+resumeFile);
			// 输出文档路径及名称
		     outFile = new File(path+"/"+taskauth.getTemplate().getNum()+".docx");
		     logger.info("文档路径及名称="+outFile);
		     
	    	//这样你就能得到你想要的xml
	    	//这个xml可以用office word 打开，但是如果你想得到docx的文件，你可能会直接把xml重命名为xx.docx 但事实是 你这样做了之后，office word打不开提示错误那么接下来的操作比较重要
	    	WordprocessingMLPackage wmlPackage = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
	    	logger.info("wmlPackage:"+wmlPackage);
	    	wmlPackage.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
	    	//这样 test.docx就可以正常用office word打开，而且在手机上也是可以正常打开的
	    	
		    //往原始记录文件夹里再存一份
		    String pass1 = ServletActionContext.getServletContext().getRealPath(
						uploadDir)+"/"+task.getProject().getProjectName()+"/原始记录表/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/";
			System.out.println("原始记录表文件夹路径=" + pass1);
			File dir1 = new File(pass1);
			if (!dir1.exists()){
				dir1.mkdirs();// 创建个文件夹
			}
			File f1 = new File(pass1);
		    File s1[] = f1.listFiles();
		    for(int j=0;j<s1.length;j++) {
		    	String name=s1[j].getName();
		    	if(taskauth.getTemplate().getNum().equals(name)){
		    		s1[j].delete();
		    	}
		    }
		    // 输出文档路径及名称
			outFile = new File(pass1+"/"+taskauth.getTemplate().getNum()+".docx");
			logger.info("文档路径及名称="+outFile);
			     
			WordprocessingMLPackage wmlPackage1 = (WordprocessingMLPackage) WordprocessingMLPackage.load(new FileInputStream(resumeFile));
			wmlPackage1.save(outFile, Docx4J.FLAG_SAVE_ZIP_FILE);
			    	
			logger.info("pdf存放路径="+path+"/"+taskauth.getTemplate().getNum()+".pdf");
			File f2 = new File(path);
			File s2[] = f2.listFiles();
			for(int j=0;j<s2.length;j++) {
				String name=s2[j].getName();
				if((taskauth.getTemplate().getNum()+".pdf").equals(name)){
		   			s2[j].delete();
		   		}
			}
				     
			//传docx地址转PDF
			String cmd = "/opt/libreoffice5.3/program/soffice --convert-to pdf:writer_pdf_Export  --outdir '"+path+"'    "+outFile;
			logger.info(cmd);
			cmdRun(cmd);
					
		    //获取web.xml配置的一个默认地址
		    String address = ServletActionContext.getServletContext().getInitParameter("xz_url");
		    //String address = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+"/"+request.getContextPath();
		    url=address+"/roms_sz/"+task.getProject().getProjectName()+"/"+taskauth.getTemplate().getNum()+"/"+task.getTaskNum()+"/"+taskauth.getTemplate().getNum();
		    logger.info("返回下载地址="+url);
		     
		    logger.info("成功");
		} catch (Exception e) {
			e.printStackTrace();
			logger.info("失败");
		}
		
		return url;
	}


	
}
